(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 9.0' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       157,          7]
NotebookDataLength[    484428,      10370]
NotebookOptionsPosition[    441783,       9302]
NotebookOutlinePosition[    474876,      10062]
CellTagsIndexPosition[    474235,      10038]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell["\<\
Operator-Notations in Theorema 2\
\>", "Title",
 CellChangeTimes->{{3.599300728188979*^9, 3.599300737616365*^9}, 
   3.599300796249972*^9, {3.599302528038349*^9, 3.599302534377918*^9}},
 CellID->1238768133],

Cell[CellGroupData[{

Cell["Overview", "Section",
 CellChangeTimes->{{3.599300930082166*^9, 3.59930093160554*^9}},
 CellID->647657379],

Cell[CellGroupData[{

Cell["Operators without Arguments", "Subsection",
 CellChangeTimes->{{3.59930123409552*^9, 3.599301240196666*^9}},
 CellID->2085607210],

Cell["\<\
It is possible to use operator symbols without arguments, in which case they \
are meant to refer to the corresponding names:\
\>", "Text",
 CellChangeTimes->{{3.599300939747482*^9, 3.599300989652377*^9}, {
  3.599301547308455*^9, 3.599301580680727*^9}},
 CellID->795956205],

Cell[CellGroupData[{

Cell[BoxData["+"], "Computation",
 CellChangeTimes->{3.599300992715723*^9},
 CellID->1748140642],

Cell[BoxData[
 DynamicModuleBox[{Typeset`var$$ = False}, 
  InterpretationBox[
   StyleBox[
    PaneSelectorBox[{False->GridBox[{
       {
        OpenerBox[Dynamic[Typeset`var$$],
         Appearance->Automatic,
         AutoAction->False,
         ContinuousAction->False,
         Enabled->Automatic], "\<\"\"\>"}
      },
      AutoDelete->False,
      BaselinePosition->{1, 1},
      GridBoxAlignment->{"Columns" -> {{Left}}},
      GridBoxBackground->{"Columns" -> {{Automatic}}},
      GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
      GridBoxSpacings->{"Columns" -> {{0.2}}, "Rows" -> {{0.5}}}], True->
     GridBox[{
       {
        OpenerBox[Dynamic[Typeset`var$$],
         Appearance->Automatic,
         AutoAction->False,
         ContinuousAction->False,
         Enabled->Automatic], "\<\"\"\>"},
       {"", 
        PaneBox[
         TagBox[GridBox[{
            {
             TagBox[
              DynamicModuleBox[{Typeset`var$$ = False}, 
               InterpretationBox[
                StyleBox[
                 PaneSelectorBox[{False->GridBox[{
                    {
                    OpenerBox[Dynamic[Typeset`var$$],
                    Appearance->Automatic,
                    AutoAction->False,
                    ContinuousAction->False,
                    Enabled->Automatic], 
                    
                    StyleBox["\<\"Knowledge used in computation\"\>", 
                    "CIContent",
                    StripOnInput->False]}
                   },
                   AutoDelete->False,
                   BaselinePosition->{1, 1},
                   GridBoxAlignment->{"Columns" -> {{Left}}},
                   GridBoxBackground->{"Columns" -> {{Automatic}}},
                   
                   GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
                   
                   GridBoxSpacings->{
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}], True->
                  GridBox[{
                    {
                    OpenerBox[Dynamic[Typeset`var$$],
                    Appearance->Automatic,
                    AutoAction->False,
                    ContinuousAction->False,
                    Enabled->Automatic], 
                    
                    StyleBox["\<\"Knowledge used in computation\"\>", 
                    "CIContent",
                    StripOnInput->False]},
                    {"", 
                    PaneBox[
                    StyleBox[
                    RowBox[{"{", "}"}], "CIContent",
                    StripOnInput->False],
                    ImageMargins->0]}
                   },
                   AutoDelete->False,
                   BaselinePosition->{1, 1},
                   GridBoxAlignment->{"Columns" -> {{Left}}},
                   GridBoxBackground->{"Columns" -> {{Automatic}}},
                   
                   GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
                   
                   GridBoxSpacings->{
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}]}, Dynamic[
                  Typeset`var$$],
                  Alignment->Automatic,
                  BaselinePosition->Baseline,
                  DefaultBaseStyle->"OpenerView",
                  ImageMargins->0,
                  ImageSize->Automatic],
                 Deployed->False,
                 StripOnInput->False],
                OpenerView[{
                  Style["Knowledge used in computation", "CIContent"], 
                  Style[{}, "CIContent"]}, False]],
               DynamicModuleValues:>Automatic],
              Setting[#, {0}]& ]},
            {
             TagBox[
              DynamicModuleBox[{Typeset`var$$ = False}, 
               InterpretationBox[
                StyleBox[
                 PaneSelectorBox[{False->GridBox[{
                    {
                    OpenerBox[Dynamic[Typeset`var$$],
                    Appearance->Automatic,
                    AutoAction->False,
                    ContinuousAction->False,
                    Enabled->Automatic], 
                    
                    StyleBox["\<\"Builtins used in computation\"\>", 
                    "CIContent",
                    StripOnInput->False]}
                   },
                   AutoDelete->False,
                   BaselinePosition->{1, 1},
                   GridBoxAlignment->{"Columns" -> {{Left}}},
                   GridBoxBackground->{"Columns" -> {{Automatic}}},
                   
                   GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
                   
                   GridBoxSpacings->{
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}], True->
                  GridBox[{
                    {
                    OpenerBox[Dynamic[Typeset`var$$],
                    Appearance->Automatic,
                    AutoAction->False,
                    ContinuousAction->False,
                    Enabled->Automatic], 
                    
                    StyleBox["\<\"Builtins used in computation\"\>", 
                    "CIContent",
                    StripOnInput->False]},
                    {"", 
                    PaneBox[
                    StyleBox[
                    RowBox[{"{", 
                    
                    RowBox[{"\<\"AbsValue\"\>", ",", "\<\"And\"\>", 
                    ",", "\<\"AnElement\"\>", ",", "\<\"Append\"\>", 
                    ",", "\<\"Cardinality\"\>", 
                    ",", "\<\"CartesianProduct\"\>", 
                    ",", "\<\"CaseDistinction\"\>", 
                    ",", "\<\"Componentwise\"\>", ",", "\<\"Delete\"\>", 
                    ",", "\<\"DeleteAt\"\>", ",", "\<\"Difference\"\>", 
                    ",", "\<\"Do\"\>", ",", "\<\"Equal\"\>", 
                    ",", "\<\"Exists\"\>", ",", "\<\"Factorial\"\>", 
                    ",", "\<\"For\"\>", ",", "\<\"Forall\"\>", 
                    ",", "\<\"Greater\"\>", ",", "\<\"GreaterEqual\"\>", 
                    ",", "\<\"Iff\"\>", ",", "\<\"Implies\"\>", 
                    ",", "\<\"Insert\"\>", ",", "\<\"IntegerInterval\"\>", 
                    ",", "\<\"IntegerQuotientRing\"\>", 
                    ",", "\<\"IntegerQuotientRingPM\"\>", 
                    ",", "\<\"Intersection\"\>", 
                    ",", "\<\"IntersectionOf\"\>", ",", "\<\"isComplex\"\>", 
                    ",", "\<\"isComplexP\"\>", ",", "\<\"IsElement\"\>", 
                    ",", "\<\"isInteger\"\>", ",", "\<\"isRational\"\>", 
                    ",", "\<\"isReal\"\>", ",", "\<\"isSet\"\>", 
                    ",", "\<\"isTuple\"\>", ",", "\<\"Join\"\>", 
                    ",", "\<\"Length\"\>", ",", "\<\"Less\"\>", 
                    ",", "\<\"LessEqual\"\>", ",", "\<\"Let\"\>", 
                    ",", "\<\"Max\"\>", ",", "\<\"MaximumElementSet\"\>", 
                    ",", "\<\"MaximumOf\"\>", ",", "\<\"Min\"\>", 
                    ",", "\<\"MinimumElementSet\"\>", 
                    ",", "\<\"MinimumOf\"\>", ",", "\<\"Minus\"\>", 
                    ",", "\<\"Module\"\>", ",", "\<\"MultInverse\"\>", 
                    ",", "\<\"Not\"\>", ",", "\<\"Or\"\>", 
                    ",", "\<\"Plus\"\>", ",", "\<\"Power\"\>", 
                    ",", "\<\"PowerSet\"\>", ",", "\<\"Prepend\"\>", 
                    ",", "\<\"ProductOf\"\>", ",", "\<\"Radical\"\>", 
                    ",", "\<\"RationalInterval\"\>", 
                    ",", "\<\"RealInterval\"\>", ",", "\<\"Replace\"\>", 
                    ",", "\<\"ReplacePart\"\>", ",", "\<\"SetEqual\"\>", 
                    ",", "\<\"Subscript\"\>", ",", "\<\"Subset\"\>", 
                    ",", "\<\"SubsetEqual\"\>", ",", "\<\"SumOf\"\>", 
                    ",", "\<\"Superset\"\>", ",", "\<\"SupersetEqual\"\>", 
                    ",", "\<\"Switch\"\>", ",", "\<\"SymmetricDifference\"\>",
                     ",", "\<\"Times\"\>", ",", "\<\"TupleEqual\"\>", 
                    ",", "\<\"Union\"\>", ",", "\<\"UnionOf\"\>", 
                    ",", "\<\"Which\"\>", ",", "\<\"While\"\>", 
                    ",", "\<\"\[DoubleStruckCapitalC]\"\>", 
                    ",", "\<\"\[DoubleStruckCapitalC]P\"\>"}], "}"}], 
                    "CIContent",
                    StripOnInput->False],
                    ImageMargins->0]}
                   },
                   AutoDelete->False,
                   BaselinePosition->{1, 1},
                   GridBoxAlignment->{"Columns" -> {{Left}}},
                   GridBoxBackground->{"Columns" -> {{Automatic}}},
                   
                   GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
                   
                   GridBoxSpacings->{
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}]}, Dynamic[
                  Typeset`var$$],
                  Alignment->Automatic,
                  BaselinePosition->Baseline,
                  DefaultBaseStyle->"OpenerView",
                  ImageMargins->0,
                  ImageSize->Automatic],
                 Deployed->False,
                 StripOnInput->False],
                OpenerView[{
                  Style["Builtins used in computation", "CIContent"], 
                  
                  Style[{"AbsValue", "And", "AnElement", "Append", 
                    "Cardinality", "CartesianProduct", "CaseDistinction", 
                    "Componentwise", "Delete", "DeleteAt", "Difference", "Do",
                     "Equal", "Exists", "Factorial", "For", "Forall", 
                    "Greater", "GreaterEqual", "Iff", "Implies", "Insert", 
                    "IntegerInterval", "IntegerQuotientRing", 
                    "IntegerQuotientRingPM", "Intersection", "IntersectionOf",
                     "isComplex", "isComplexP", "IsElement", "isInteger", 
                    "isRational", "isReal", "isSet", "isTuple", "Join", 
                    "Length", "Less", "LessEqual", "Let", "Max", 
                    "MaximumElementSet", "MaximumOf", "Min", 
                    "MinimumElementSet", "MinimumOf", "Minus", "Module", 
                    "MultInverse", "Not", "Or", "Plus", "Power", "PowerSet", 
                    "Prepend", "ProductOf", "Radical", "RationalInterval", 
                    "RealInterval", "Replace", "ReplacePart", "SetEqual", 
                    "Subscript", "Subset", "SubsetEqual", "SumOf", "Superset",
                     "SupersetEqual", "Switch", "SymmetricDifference", 
                    "Times", "TupleEqual", "Union", "UnionOf", "Which", 
                    "While", "\[DoubleStruckCapitalC]", 
                    "\[DoubleStruckCapitalC]P"}, "CIContent"]}, False]],
               DynamicModuleValues:>Automatic],
              Setting[#, {0}]& ]},
            {
             ButtonBox["\<\"Restore environment\"\>",
              Appearance->Automatic,
              
              ButtonFunction:>
               Theorema`Interface`GUI`Private`setCompEnv[{}, {{
                 "AbsValue", True}, {"And", True}, {"AnElement", True}, {
                 "Append", True}, {"Cardinality", True}, {
                 "CartesianProduct", True}, {"CaseDistinction", True}, {
                 "Componentwise", True}, {"Delete", True}, {
                 "DeleteAt", True}, {"Difference", True}, {"Do", True}, {
                 "Equal", True}, {"Exists", True}, {"Factorial", True}, {
                 "For", True}, {"Forall", True}, {"Greater", True}, {
                 "GreaterEqual", True}, {"Iff", True}, {"Implies", True}, {
                 "Insert", True}, {"IntegerInterval", True}, {
                 "IntegerQuotientRing", True}, {
                 "IntegerQuotientRingPM", True}, {"Intersection", True}, {
                 "IntersectionOf", True}, {"isComplex", True}, {
                 "isComplexP", True}, {"IsElement", True}, {
                 "isInteger", True}, {"isRational", True}, {"isReal", True}, {
                 "isSet", True}, {"isTuple", True}, {"Join", True}, {
                 "Length", True}, {"Less", True}, {"LessEqual", True}, {
                 "Let", True}, {"Max", True}, {"MaximumElementSet", True}, {
                 "MaximumOf", True}, {"Min", True}, {
                 "MinimumElementSet", True}, {"MinimumOf", True}, {
                 "Minus", True}, {"Module", True}, {"MultInverse", True}, {
                 "Not", True}, {"Or", True}, {"Plus", True}, {
                 "Power", True}, {"PowerSet", True}, {"Prepend", True}, {
                 "ProductOf", True}, {"Radical", True}, {
                 "RationalInterval", True}, {"RealInterval", True}, {
                 "Replace", True}, {"ReplacePart", True}, {
                 "SetEqual", True}, {"Subscript", True}, {"Subset", True}, {
                 "SubsetEqual", True}, {"SumOf", True}, {"Superset", True}, {
                 "SupersetEqual", True}, {"Switch", True}, {
                 "SymmetricDifference", True}, {"Times", True}, {
                 "TupleEqual", True}, {"Union", True}, {"UnionOf", True}, {
                 "Which", True}, {"While", True}, {
                 "\[DoubleStruckCapitalC]", True}, {
                 "\[DoubleStruckCapitalC]P", True}}],
              Evaluator->Automatic,
              ImageSize->Automatic,
              Method->"Preemptive"]}
           },
           DefaultBaseStyle->"Column",
           GridBoxAlignment->{"Columns" -> {{Left}}},
           
           GridBoxItemSize->{
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
          "Column"],
         ImageMargins->0]}
      },
      AutoDelete->False,
      BaselinePosition->{1, 1},
      GridBoxAlignment->{"Columns" -> {{Left}}},
      GridBoxBackground->{"Columns" -> {{Automatic}}},
      GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
      GridBoxSpacings->{"Columns" -> {{0.2}}, "Rows" -> {{0.5}}}]}, Dynamic[
     Typeset`var$$],
     Alignment->Automatic,
     BaselinePosition->Baseline,
     DefaultBaseStyle->"OpenerView",
     ImageMargins->0,
     ImageSize->Automatic],
    Deployed->False,
    StripOnInput->False],
   OpenerView[{"", 
     Column[{
       OpenerView[{
         Style["Knowledge used in computation", "CIContent"], 
         Style[{}, "CIContent"]}], 
       OpenerView[{
         Style["Builtins used in computation", "CIContent"], 
         Style[{
          "AbsValue", "And", "AnElement", "Append", "Cardinality", 
           "CartesianProduct", "CaseDistinction", "Componentwise", "Delete", 
           "DeleteAt", "Difference", "Do", "Equal", "Exists", "Factorial", 
           "For", "Forall", "Greater", "GreaterEqual", "Iff", "Implies", 
           "Insert", "IntegerInterval", "IntegerQuotientRing", 
           "IntegerQuotientRingPM", "Intersection", "IntersectionOf", 
           "isComplex", "isComplexP", "IsElement", "isInteger", "isRational", 
           "isReal", "isSet", "isTuple", "Join", "Length", "Less", 
           "LessEqual", "Let", "Max", "MaximumElementSet", "MaximumOf", "Min",
            "MinimumElementSet", "MinimumOf", "Minus", "Module", 
           "MultInverse", "Not", "Or", "Plus", "Power", "PowerSet", "Prepend",
            "ProductOf", "Radical", "RationalInterval", "RealInterval", 
           "Replace", "ReplacePart", "SetEqual", "Subscript", "Subset", 
           "SubsetEqual", "SumOf", "Superset", "SupersetEqual", "Switch", 
           "SymmetricDifference", "Times", "TupleEqual", "Union", "UnionOf", 
           "Which", "While", "\[DoubleStruckCapitalC]", 
           "\[DoubleStruckCapitalC]P"}, "CIContent"]}], 
       Button["Restore environment", 
        Theorema`Interface`GUI`Private`setCompEnv[{}, {{"AbsValue", True}, {
          "And", True}, {"AnElement", True}, {"Append", True}, {
          "Cardinality", True}, {"CartesianProduct", True}, {
          "CaseDistinction", True}, {"Componentwise", True}, {
          "Delete", True}, {"DeleteAt", True}, {"Difference", True}, {
          "Do", True}, {"Equal", True}, {"Exists", True}, {
          "Factorial", True}, {"For", True}, {"Forall", True}, {
          "Greater", True}, {"GreaterEqual", True}, {"Iff", True}, {
          "Implies", True}, {"Insert", True}, {"IntegerInterval", True}, {
          "IntegerQuotientRing", True}, {"IntegerQuotientRingPM", True}, {
          "Intersection", True}, {"IntersectionOf", True}, {
          "isComplex", True}, {"isComplexP", True}, {"IsElement", True}, {
          "isInteger", True}, {"isRational", True}, {"isReal", True}, {
          "isSet", True}, {"isTuple", True}, {"Join", True}, {
          "Length", True}, {"Less", True}, {"LessEqual", True}, {
          "Let", True}, {"Max", True}, {"MaximumElementSet", True}, {
          "MaximumOf", True}, {"Min", True}, {"MinimumElementSet", True}, {
          "MinimumOf", True}, {"Minus", True}, {"Module", True}, {
          "MultInverse", True}, {"Not", True}, {"Or", True}, {"Plus", True}, {
          "Power", True}, {"PowerSet", True}, {"Prepend", True}, {
          "ProductOf", True}, {"Radical", True}, {"RationalInterval", True}, {
          "RealInterval", True}, {"Replace", True}, {"ReplacePart", True}, {
          "SetEqual", True}, {"Subscript", True}, {"Subset", True}, {
          "SubsetEqual", True}, {"SumOf", True}, {"Superset", True}, {
          "SupersetEqual", True}, {"Switch", True}, {
          "SymmetricDifference", True}, {"Times", True}, {
          "TupleEqual", True}, {"Union", True}, {"UnionOf", True}, {
          "Which", True}, {"While", True}, {
          "\[DoubleStruckCapitalC]", True}, {
          "\[DoubleStruckCapitalC]P", True}}], ImageSize -> Automatic]}]}, 
    False]],
  DynamicModuleValues:>{}]], "ComputationInfo",
 CellChangeTimes->{3.599300993491372*^9},
 CellID->1080769374],

Cell[BoxData[
 FormBox["+", TheoremaForm]], "ComputationResult",
 CellChangeTimes->{3.599300993495674*^9},
 CellID->1777760942]
}, Open  ]],

Cell["\<\
... The symbol \[OpenCurlyDoubleQuote]+\[OpenCurlyDoubleQuote] without \
arguments actually stands for the operator name \[OpenCurlyDoubleQuote]Plus\
\[CloseCurlyDoubleQuote].\
\>", "Text",
 CellChangeTimes->{{3.599300998169719*^9, 3.599301042287607*^9}, 
   3.599301089646303*^9, {3.599301473669019*^9, 3.599301474037758*^9}, {
   3.599301587313176*^9, 3.599301588721316*^9}},
 CellID->1337121975],

Cell["\<\
Such symbols may appear everywhere, even as arguments of another function. In \
such cases, however, it is good practice to make use of one of the buttons in \
the Theorema Commander / tab \[OpenCurlyDoubleQuote]Session\
\[CloseCurlyDoubleQuote] / section \[OpenCurlyDoubleQuote]Operators\
\[CloseCurlyDoubleQuote]:\
\>", "Text",
 CellChangeTimes->{{3.599301097295771*^9, 3.599301184320922*^9}},
 CellID->1539703969],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"f", "[", 
  RowBox[{
   RowBox[{
    TagBox["(",
     "AutoParentheses"], 
    TagBox["+",
     Identity], 
    TagBox[")",
     "AutoParentheses"]}], ",", 
   RowBox[{
    TagBox["(",
     "AutoParentheses"], 
    TagBox["\[SmallCircle]",
     Identity], 
    TagBox[")",
     "AutoParentheses"]}], ",", 
   RowBox[{"g", "[", 
    RowBox[{
     TagBox["(",
      "AutoParentheses"], 
     TagBox["<",
      Identity], 
     TagBox[")",
      "AutoParentheses"]}], "]"}]}], "]"}]], "Computation",
 CellChangeTimes->{{3.599301189321697*^9, 3.599301214073001*^9}},
 CellID->939776885],

Cell[BoxData[
 DynamicModuleBox[{Typeset`var$$ = False}, 
  InterpretationBox[
   StyleBox[
    PaneSelectorBox[{False->GridBox[{
       {
        OpenerBox[Dynamic[Typeset`var$$],
         Appearance->Automatic,
         AutoAction->False,
         ContinuousAction->False,
         Enabled->Automatic], "\<\"\"\>"}
      },
      AutoDelete->False,
      BaselinePosition->{1, 1},
      GridBoxAlignment->{"Columns" -> {{Left}}},
      GridBoxBackground->{"Columns" -> {{Automatic}}},
      GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
      GridBoxSpacings->{"Columns" -> {{0.2}}, "Rows" -> {{0.5}}}], True->
     GridBox[{
       {
        OpenerBox[Dynamic[Typeset`var$$],
         Appearance->Automatic,
         AutoAction->False,
         ContinuousAction->False,
         Enabled->Automatic], "\<\"\"\>"},
       {"", 
        PaneBox[
         TagBox[GridBox[{
            {
             TagBox[
              DynamicModuleBox[{Typeset`var$$ = False}, 
               InterpretationBox[
                StyleBox[
                 PaneSelectorBox[{False->GridBox[{
                    {
                    OpenerBox[Dynamic[Typeset`var$$],
                    Appearance->Automatic,
                    AutoAction->False,
                    ContinuousAction->False,
                    Enabled->Automatic], 
                    
                    StyleBox["\<\"Knowledge used in computation\"\>", 
                    "CIContent",
                    StripOnInput->False]}
                   },
                   AutoDelete->False,
                   BaselinePosition->{1, 1},
                   GridBoxAlignment->{"Columns" -> {{Left}}},
                   GridBoxBackground->{"Columns" -> {{Automatic}}},
                   
                   GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
                   
                   GridBoxSpacings->{
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}], True->
                  GridBox[{
                    {
                    OpenerBox[Dynamic[Typeset`var$$],
                    Appearance->Automatic,
                    AutoAction->False,
                    ContinuousAction->False,
                    Enabled->Automatic], 
                    
                    StyleBox["\<\"Knowledge used in computation\"\>", 
                    "CIContent",
                    StripOnInput->False]},
                    {"", 
                    PaneBox[
                    StyleBox[
                    RowBox[{"{", "}"}], "CIContent",
                    StripOnInput->False],
                    ImageMargins->0]}
                   },
                   AutoDelete->False,
                   BaselinePosition->{1, 1},
                   GridBoxAlignment->{"Columns" -> {{Left}}},
                   GridBoxBackground->{"Columns" -> {{Automatic}}},
                   
                   GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
                   
                   GridBoxSpacings->{
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}]}, Dynamic[
                  Typeset`var$$],
                  Alignment->Automatic,
                  BaselinePosition->Baseline,
                  DefaultBaseStyle->"OpenerView",
                  ImageMargins->0,
                  ImageSize->Automatic],
                 Deployed->False,
                 StripOnInput->False],
                OpenerView[{
                  Style["Knowledge used in computation", "CIContent"], 
                  Style[{}, "CIContent"]}, False]],
               DynamicModuleValues:>Automatic],
              Setting[#, {0}]& ]},
            {
             TagBox[
              DynamicModuleBox[{Typeset`var$$ = False}, 
               InterpretationBox[
                StyleBox[
                 PaneSelectorBox[{False->GridBox[{
                    {
                    OpenerBox[Dynamic[Typeset`var$$],
                    Appearance->Automatic,
                    AutoAction->False,
                    ContinuousAction->False,
                    Enabled->Automatic], 
                    
                    StyleBox["\<\"Builtins used in computation\"\>", 
                    "CIContent",
                    StripOnInput->False]}
                   },
                   AutoDelete->False,
                   BaselinePosition->{1, 1},
                   GridBoxAlignment->{"Columns" -> {{Left}}},
                   GridBoxBackground->{"Columns" -> {{Automatic}}},
                   
                   GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
                   
                   GridBoxSpacings->{
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}], True->
                  GridBox[{
                    {
                    OpenerBox[Dynamic[Typeset`var$$],
                    Appearance->Automatic,
                    AutoAction->False,
                    ContinuousAction->False,
                    Enabled->Automatic], 
                    
                    StyleBox["\<\"Builtins used in computation\"\>", 
                    "CIContent",
                    StripOnInput->False]},
                    {"", 
                    PaneBox[
                    StyleBox[
                    RowBox[{"{", 
                    
                    RowBox[{"\<\"AbsValue\"\>", ",", "\<\"And\"\>", 
                    ",", "\<\"AnElement\"\>", ",", "\<\"Append\"\>", 
                    ",", "\<\"Cardinality\"\>", 
                    ",", "\<\"CartesianProduct\"\>", 
                    ",", "\<\"CaseDistinction\"\>", 
                    ",", "\<\"Componentwise\"\>", ",", "\<\"Delete\"\>", 
                    ",", "\<\"DeleteAt\"\>", ",", "\<\"Difference\"\>", 
                    ",", "\<\"Do\"\>", ",", "\<\"Equal\"\>", 
                    ",", "\<\"Exists\"\>", ",", "\<\"Factorial\"\>", 
                    ",", "\<\"For\"\>", ",", "\<\"Forall\"\>", 
                    ",", "\<\"Greater\"\>", ",", "\<\"GreaterEqual\"\>", 
                    ",", "\<\"Iff\"\>", ",", "\<\"Implies\"\>", 
                    ",", "\<\"Insert\"\>", ",", "\<\"IntegerInterval\"\>", 
                    ",", "\<\"IntegerQuotientRing\"\>", 
                    ",", "\<\"IntegerQuotientRingPM\"\>", 
                    ",", "\<\"Intersection\"\>", 
                    ",", "\<\"IntersectionOf\"\>", ",", "\<\"isComplex\"\>", 
                    ",", "\<\"isComplexP\"\>", ",", "\<\"IsElement\"\>", 
                    ",", "\<\"isInteger\"\>", ",", "\<\"isRational\"\>", 
                    ",", "\<\"isReal\"\>", ",", "\<\"isSet\"\>", 
                    ",", "\<\"isTuple\"\>", ",", "\<\"Join\"\>", 
                    ",", "\<\"Length\"\>", ",", "\<\"Less\"\>", 
                    ",", "\<\"LessEqual\"\>", ",", "\<\"Let\"\>", 
                    ",", "\<\"Max\"\>", ",", "\<\"MaximumElementSet\"\>", 
                    ",", "\<\"MaximumOf\"\>", ",", "\<\"Min\"\>", 
                    ",", "\<\"MinimumElementSet\"\>", 
                    ",", "\<\"MinimumOf\"\>", ",", "\<\"Minus\"\>", 
                    ",", "\<\"Module\"\>", ",", "\<\"MultInverse\"\>", 
                    ",", "\<\"Not\"\>", ",", "\<\"Or\"\>", 
                    ",", "\<\"Plus\"\>", ",", "\<\"Power\"\>", 
                    ",", "\<\"PowerSet\"\>", ",", "\<\"Prepend\"\>", 
                    ",", "\<\"ProductOf\"\>", ",", "\<\"Radical\"\>", 
                    ",", "\<\"RationalInterval\"\>", 
                    ",", "\<\"RealInterval\"\>", ",", "\<\"Replace\"\>", 
                    ",", "\<\"ReplacePart\"\>", ",", "\<\"SetEqual\"\>", 
                    ",", "\<\"Subscript\"\>", ",", "\<\"Subset\"\>", 
                    ",", "\<\"SubsetEqual\"\>", ",", "\<\"SumOf\"\>", 
                    ",", "\<\"Superset\"\>", ",", "\<\"SupersetEqual\"\>", 
                    ",", "\<\"Switch\"\>", ",", "\<\"SymmetricDifference\"\>",
                     ",", "\<\"Times\"\>", ",", "\<\"TupleEqual\"\>", 
                    ",", "\<\"Union\"\>", ",", "\<\"UnionOf\"\>", 
                    ",", "\<\"Which\"\>", ",", "\<\"While\"\>", 
                    ",", "\<\"\[DoubleStruckCapitalC]\"\>", 
                    ",", "\<\"\[DoubleStruckCapitalC]P\"\>"}], "}"}], 
                    "CIContent",
                    StripOnInput->False],
                    ImageMargins->0]}
                   },
                   AutoDelete->False,
                   BaselinePosition->{1, 1},
                   GridBoxAlignment->{"Columns" -> {{Left}}},
                   GridBoxBackground->{"Columns" -> {{Automatic}}},
                   
                   GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
                   
                   GridBoxSpacings->{
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}]}, Dynamic[
                  Typeset`var$$],
                  Alignment->Automatic,
                  BaselinePosition->Baseline,
                  DefaultBaseStyle->"OpenerView",
                  ImageMargins->0,
                  ImageSize->Automatic],
                 Deployed->False,
                 StripOnInput->False],
                OpenerView[{
                  Style["Builtins used in computation", "CIContent"], 
                  
                  Style[{"AbsValue", "And", "AnElement", "Append", 
                    "Cardinality", "CartesianProduct", "CaseDistinction", 
                    "Componentwise", "Delete", "DeleteAt", "Difference", "Do",
                     "Equal", "Exists", "Factorial", "For", "Forall", 
                    "Greater", "GreaterEqual", "Iff", "Implies", "Insert", 
                    "IntegerInterval", "IntegerQuotientRing", 
                    "IntegerQuotientRingPM", "Intersection", "IntersectionOf",
                     "isComplex", "isComplexP", "IsElement", "isInteger", 
                    "isRational", "isReal", "isSet", "isTuple", "Join", 
                    "Length", "Less", "LessEqual", "Let", "Max", 
                    "MaximumElementSet", "MaximumOf", "Min", 
                    "MinimumElementSet", "MinimumOf", "Minus", "Module", 
                    "MultInverse", "Not", "Or", "Plus", "Power", "PowerSet", 
                    "Prepend", "ProductOf", "Radical", "RationalInterval", 
                    "RealInterval", "Replace", "ReplacePart", "SetEqual", 
                    "Subscript", "Subset", "SubsetEqual", "SumOf", "Superset",
                     "SupersetEqual", "Switch", "SymmetricDifference", 
                    "Times", "TupleEqual", "Union", "UnionOf", "Which", 
                    "While", "\[DoubleStruckCapitalC]", 
                    "\[DoubleStruckCapitalC]P"}, "CIContent"]}, False]],
               DynamicModuleValues:>Automatic],
              Setting[#, {0}]& ]},
            {
             ButtonBox["\<\"Restore environment\"\>",
              Appearance->Automatic,
              
              ButtonFunction:>
               Theorema`Interface`GUI`Private`setCompEnv[{}, {{
                 "AbsValue", True}, {"And", True}, {"AnElement", True}, {
                 "Append", True}, {"Cardinality", True}, {
                 "CartesianProduct", True}, {"CaseDistinction", True}, {
                 "Componentwise", True}, {"Delete", True}, {
                 "DeleteAt", True}, {"Difference", True}, {"Do", True}, {
                 "Equal", True}, {"Exists", True}, {"Factorial", True}, {
                 "For", True}, {"Forall", True}, {"Greater", True}, {
                 "GreaterEqual", True}, {"Iff", True}, {"Implies", True}, {
                 "Insert", True}, {"IntegerInterval", True}, {
                 "IntegerQuotientRing", True}, {
                 "IntegerQuotientRingPM", True}, {"Intersection", True}, {
                 "IntersectionOf", True}, {"isComplex", True}, {
                 "isComplexP", True}, {"IsElement", True}, {
                 "isInteger", True}, {"isRational", True}, {"isReal", True}, {
                 "isSet", True}, {"isTuple", True}, {"Join", True}, {
                 "Length", True}, {"Less", True}, {"LessEqual", True}, {
                 "Let", True}, {"Max", True}, {"MaximumElementSet", True}, {
                 "MaximumOf", True}, {"Min", True}, {
                 "MinimumElementSet", True}, {"MinimumOf", True}, {
                 "Minus", True}, {"Module", True}, {"MultInverse", True}, {
                 "Not", True}, {"Or", True}, {"Plus", True}, {
                 "Power", True}, {"PowerSet", True}, {"Prepend", True}, {
                 "ProductOf", True}, {"Radical", True}, {
                 "RationalInterval", True}, {"RealInterval", True}, {
                 "Replace", True}, {"ReplacePart", True}, {
                 "SetEqual", True}, {"Subscript", True}, {"Subset", True}, {
                 "SubsetEqual", True}, {"SumOf", True}, {"Superset", True}, {
                 "SupersetEqual", True}, {"Switch", True}, {
                 "SymmetricDifference", True}, {"Times", True}, {
                 "TupleEqual", True}, {"Union", True}, {"UnionOf", True}, {
                 "Which", True}, {"While", True}, {
                 "\[DoubleStruckCapitalC]", True}, {
                 "\[DoubleStruckCapitalC]P", True}}],
              Evaluator->Automatic,
              ImageSize->Automatic,
              Method->"Preemptive"]}
           },
           DefaultBaseStyle->"Column",
           GridBoxAlignment->{"Columns" -> {{Left}}},
           
           GridBoxItemSize->{
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
          "Column"],
         ImageMargins->0]}
      },
      AutoDelete->False,
      BaselinePosition->{1, 1},
      GridBoxAlignment->{"Columns" -> {{Left}}},
      GridBoxBackground->{"Columns" -> {{Automatic}}},
      GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
      GridBoxSpacings->{"Columns" -> {{0.2}}, "Rows" -> {{0.5}}}]}, Dynamic[
     Typeset`var$$],
     Alignment->Automatic,
     BaselinePosition->Baseline,
     DefaultBaseStyle->"OpenerView",
     ImageMargins->0,
     ImageSize->Automatic],
    Deployed->False,
    StripOnInput->False],
   OpenerView[{"", 
     Column[{
       OpenerView[{
         Style["Knowledge used in computation", "CIContent"], 
         Style[{}, "CIContent"]}], 
       OpenerView[{
         Style["Builtins used in computation", "CIContent"], 
         Style[{
          "AbsValue", "And", "AnElement", "Append", "Cardinality", 
           "CartesianProduct", "CaseDistinction", "Componentwise", "Delete", 
           "DeleteAt", "Difference", "Do", "Equal", "Exists", "Factorial", 
           "For", "Forall", "Greater", "GreaterEqual", "Iff", "Implies", 
           "Insert", "IntegerInterval", "IntegerQuotientRing", 
           "IntegerQuotientRingPM", "Intersection", "IntersectionOf", 
           "isComplex", "isComplexP", "IsElement", "isInteger", "isRational", 
           "isReal", "isSet", "isTuple", "Join", "Length", "Less", 
           "LessEqual", "Let", "Max", "MaximumElementSet", "MaximumOf", "Min",
            "MinimumElementSet", "MinimumOf", "Minus", "Module", 
           "MultInverse", "Not", "Or", "Plus", "Power", "PowerSet", "Prepend",
            "ProductOf", "Radical", "RationalInterval", "RealInterval", 
           "Replace", "ReplacePart", "SetEqual", "Subscript", "Subset", 
           "SubsetEqual", "SumOf", "Superset", "SupersetEqual", "Switch", 
           "SymmetricDifference", "Times", "TupleEqual", "Union", "UnionOf", 
           "Which", "While", "\[DoubleStruckCapitalC]", 
           "\[DoubleStruckCapitalC]P"}, "CIContent"]}], 
       Button["Restore environment", 
        Theorema`Interface`GUI`Private`setCompEnv[{}, {{"AbsValue", True}, {
          "And", True}, {"AnElement", True}, {"Append", True}, {
          "Cardinality", True}, {"CartesianProduct", True}, {
          "CaseDistinction", True}, {"Componentwise", True}, {
          "Delete", True}, {"DeleteAt", True}, {"Difference", True}, {
          "Do", True}, {"Equal", True}, {"Exists", True}, {
          "Factorial", True}, {"For", True}, {"Forall", True}, {
          "Greater", True}, {"GreaterEqual", True}, {"Iff", True}, {
          "Implies", True}, {"Insert", True}, {"IntegerInterval", True}, {
          "IntegerQuotientRing", True}, {"IntegerQuotientRingPM", True}, {
          "Intersection", True}, {"IntersectionOf", True}, {
          "isComplex", True}, {"isComplexP", True}, {"IsElement", True}, {
          "isInteger", True}, {"isRational", True}, {"isReal", True}, {
          "isSet", True}, {"isTuple", True}, {"Join", True}, {
          "Length", True}, {"Less", True}, {"LessEqual", True}, {
          "Let", True}, {"Max", True}, {"MaximumElementSet", True}, {
          "MaximumOf", True}, {"Min", True}, {"MinimumElementSet", True}, {
          "MinimumOf", True}, {"Minus", True}, {"Module", True}, {
          "MultInverse", True}, {"Not", True}, {"Or", True}, {"Plus", True}, {
          "Power", True}, {"PowerSet", True}, {"Prepend", True}, {
          "ProductOf", True}, {"Radical", True}, {"RationalInterval", True}, {
          "RealInterval", True}, {"Replace", True}, {"ReplacePart", True}, {
          "SetEqual", True}, {"Subscript", True}, {"Subset", True}, {
          "SubsetEqual", True}, {"SumOf", True}, {"Superset", True}, {
          "SupersetEqual", True}, {"Switch", True}, {
          "SymmetricDifference", True}, {"Times", True}, {
          "TupleEqual", True}, {"Union", True}, {"UnionOf", True}, {
          "Which", True}, {"While", True}, {
          "\[DoubleStruckCapitalC]", True}, {
          "\[DoubleStruckCapitalC]P", True}}], ImageSize -> Automatic]}]}, 
    False]],
  DynamicModuleValues:>{}]], "ComputationInfo",
 CellChangeTimes->{3.599301214710612*^9},
 CellID->1814341658],

Cell[BoxData[
 FormBox[
  RowBox[{"f", "[", 
   RowBox[{"+", ",", "\[SmallCircle]", ",", 
    RowBox[{"g", "[", "<", "]"}]}], "]"}], TheoremaForm]], "ComputationResult",\

 CellChangeTimes->{3.599301214734667*^9},
 CellID->1026884907]
}, Open  ]],

Cell[TextData[{
 "... The expression actually reads as \[OpenCurlyDoubleQuote]",
 Cell[BoxData[
  FormBox[
   RowBox[{"f", "[", 
    RowBox[{"Plus", ",", "SmallCirlce", ",", 
     RowBox[{"g", "[", "Less", "]"}]}], "]"}], TraditionalForm]],
  FormatType->"TraditionalForm"],
 "\[CloseCurlyDoubleQuote]."
}], "Text",
 CellChangeTimes->{{3.599301471381459*^9, 3.599301527721362*^9}},
 CellID->354714933]
}, Closed]],

Cell[CellGroupData[{

Cell["Annotated Operators", "Subsection",
 CellChangeTimes->{{3.599301245911429*^9, 3.599301250117919*^9}},
 CellID->616440916],

Cell["\<\
It is possible to add annotations to operator symbols (both with and without \
arguments). Annotations may be subscripts, superscripts, sub-superscripts, \
overscripts, under-overscripts and any combination thereof. Note that \
underscripts without corresponding overscripts are not possible as \
annotations, since they are always meant to be domain underscripts!\
\>", "Text",
 CellChangeTimes->{{3.59930160076104*^9, 3.59930172355597*^9}},
 CellID->1835082554],

Cell["\<\
A convenient way of adding annotated operators (without arguments) is by \
using the Theorema Commander / tab \[OpenCurlyDoubleQuote]Session\
\[CloseCurlyDoubleQuote] / section \[OpenCurlyDoubleQuote]Operators\
\[CloseCurlyDoubleQuote].\
\>", "Text",
 CellChangeTimes->{{3.599302386359151*^9, 3.599302427140585*^9}, {
  3.599302481406242*^9, 3.599302486268116*^9}},
 CellID->1360585262],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"x", 
  SubscriptBox["+", "\[Rule]"], "y"}]], "Computation",
 CellChangeTimes->{{3.599301735420212*^9, 3.599301746789023*^9}},
 CellID->176317227],

Cell[BoxData[
 DynamicModuleBox[{Typeset`var$$ = False}, 
  InterpretationBox[
   StyleBox[
    PaneSelectorBox[{False->GridBox[{
       {
        OpenerBox[Dynamic[Typeset`var$$],
         Appearance->Automatic,
         AutoAction->False,
         ContinuousAction->False,
         Enabled->Automatic], "\<\"\"\>"}
      },
      AutoDelete->False,
      BaselinePosition->{1, 1},
      GridBoxAlignment->{"Columns" -> {{Left}}},
      GridBoxBackground->{"Columns" -> {{Automatic}}},
      GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
      GridBoxSpacings->{"Columns" -> {{0.2}}, "Rows" -> {{0.5}}}], True->
     GridBox[{
       {
        OpenerBox[Dynamic[Typeset`var$$],
         Appearance->Automatic,
         AutoAction->False,
         ContinuousAction->False,
         Enabled->Automatic], "\<\"\"\>"},
       {"", 
        PaneBox[
         TagBox[GridBox[{
            {
             TagBox[
              DynamicModuleBox[{Typeset`var$$ = False}, 
               InterpretationBox[
                StyleBox[
                 PaneSelectorBox[{False->GridBox[{
                    {
                    OpenerBox[Dynamic[Typeset`var$$],
                    Appearance->Automatic,
                    AutoAction->False,
                    ContinuousAction->False,
                    Enabled->Automatic], 
                    
                    StyleBox["\<\"Knowledge used in computation\"\>", 
                    "CIContent",
                    StripOnInput->False]}
                   },
                   AutoDelete->False,
                   BaselinePosition->{1, 1},
                   GridBoxAlignment->{"Columns" -> {{Left}}},
                   GridBoxBackground->{"Columns" -> {{Automatic}}},
                   
                   GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
                   
                   GridBoxSpacings->{
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}], True->
                  GridBox[{
                    {
                    OpenerBox[Dynamic[Typeset`var$$],
                    Appearance->Automatic,
                    AutoAction->False,
                    ContinuousAction->False,
                    Enabled->Automatic], 
                    
                    StyleBox["\<\"Knowledge used in computation\"\>", 
                    "CIContent",
                    StripOnInput->False]},
                    {"", 
                    PaneBox[
                    StyleBox[
                    RowBox[{"{", "}"}], "CIContent",
                    StripOnInput->False],
                    ImageMargins->0]}
                   },
                   AutoDelete->False,
                   BaselinePosition->{1, 1},
                   GridBoxAlignment->{"Columns" -> {{Left}}},
                   GridBoxBackground->{"Columns" -> {{Automatic}}},
                   
                   GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
                   
                   GridBoxSpacings->{
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}]}, Dynamic[
                  Typeset`var$$],
                  Alignment->Automatic,
                  BaselinePosition->Baseline,
                  DefaultBaseStyle->"OpenerView",
                  ImageMargins->0,
                  ImageSize->Automatic],
                 Deployed->False,
                 StripOnInput->False],
                OpenerView[{
                  Style["Knowledge used in computation", "CIContent"], 
                  Style[{}, "CIContent"]}, False]],
               DynamicModuleValues:>Automatic],
              Setting[#, {0}]& ]},
            {
             TagBox[
              DynamicModuleBox[{Typeset`var$$ = False}, 
               InterpretationBox[
                StyleBox[
                 PaneSelectorBox[{False->GridBox[{
                    {
                    OpenerBox[Dynamic[Typeset`var$$],
                    Appearance->Automatic,
                    AutoAction->False,
                    ContinuousAction->False,
                    Enabled->Automatic], 
                    
                    StyleBox["\<\"Builtins used in computation\"\>", 
                    "CIContent",
                    StripOnInput->False]}
                   },
                   AutoDelete->False,
                   BaselinePosition->{1, 1},
                   GridBoxAlignment->{"Columns" -> {{Left}}},
                   GridBoxBackground->{"Columns" -> {{Automatic}}},
                   
                   GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
                   
                   GridBoxSpacings->{
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}], True->
                  GridBox[{
                    {
                    OpenerBox[Dynamic[Typeset`var$$],
                    Appearance->Automatic,
                    AutoAction->False,
                    ContinuousAction->False,
                    Enabled->Automatic], 
                    
                    StyleBox["\<\"Builtins used in computation\"\>", 
                    "CIContent",
                    StripOnInput->False]},
                    {"", 
                    PaneBox[
                    StyleBox[
                    RowBox[{"{", 
                    
                    RowBox[{"\<\"AbsValue\"\>", ",", "\<\"And\"\>", 
                    ",", "\<\"AnElement\"\>", ",", "\<\"Append\"\>", 
                    ",", "\<\"Cardinality\"\>", 
                    ",", "\<\"CartesianProduct\"\>", 
                    ",", "\<\"CaseDistinction\"\>", 
                    ",", "\<\"Componentwise\"\>", ",", "\<\"Delete\"\>", 
                    ",", "\<\"DeleteAt\"\>", ",", "\<\"Difference\"\>", 
                    ",", "\<\"Do\"\>", ",", "\<\"Equal\"\>", 
                    ",", "\<\"Exists\"\>", ",", "\<\"Factorial\"\>", 
                    ",", "\<\"For\"\>", ",", "\<\"Forall\"\>", 
                    ",", "\<\"Greater\"\>", ",", "\<\"GreaterEqual\"\>", 
                    ",", "\<\"Iff\"\>", ",", "\<\"Implies\"\>", 
                    ",", "\<\"Insert\"\>", ",", "\<\"IntegerInterval\"\>", 
                    ",", "\<\"IntegerQuotientRing\"\>", 
                    ",", "\<\"IntegerQuotientRingPM\"\>", 
                    ",", "\<\"Intersection\"\>", 
                    ",", "\<\"IntersectionOf\"\>", ",", "\<\"isComplex\"\>", 
                    ",", "\<\"isComplexP\"\>", ",", "\<\"IsElement\"\>", 
                    ",", "\<\"isInteger\"\>", ",", "\<\"isRational\"\>", 
                    ",", "\<\"isReal\"\>", ",", "\<\"isSet\"\>", 
                    ",", "\<\"isTuple\"\>", ",", "\<\"Join\"\>", 
                    ",", "\<\"Length\"\>", ",", "\<\"Less\"\>", 
                    ",", "\<\"LessEqual\"\>", ",", "\<\"Let\"\>", 
                    ",", "\<\"Max\"\>", ",", "\<\"MaximumElementSet\"\>", 
                    ",", "\<\"MaximumOf\"\>", ",", "\<\"Min\"\>", 
                    ",", "\<\"MinimumElementSet\"\>", 
                    ",", "\<\"MinimumOf\"\>", ",", "\<\"Minus\"\>", 
                    ",", "\<\"Module\"\>", ",", "\<\"MultInverse\"\>", 
                    ",", "\<\"Not\"\>", ",", "\<\"Or\"\>", 
                    ",", "\<\"Plus\"\>", ",", "\<\"Power\"\>", 
                    ",", "\<\"PowerSet\"\>", ",", "\<\"Prepend\"\>", 
                    ",", "\<\"ProductOf\"\>", ",", "\<\"Radical\"\>", 
                    ",", "\<\"RationalInterval\"\>", 
                    ",", "\<\"RealInterval\"\>", ",", "\<\"Replace\"\>", 
                    ",", "\<\"ReplacePart\"\>", ",", "\<\"SetEqual\"\>", 
                    ",", "\<\"Subscript\"\>", ",", "\<\"Subset\"\>", 
                    ",", "\<\"SubsetEqual\"\>", ",", "\<\"SumOf\"\>", 
                    ",", "\<\"Superset\"\>", ",", "\<\"SupersetEqual\"\>", 
                    ",", "\<\"Switch\"\>", ",", "\<\"SymmetricDifference\"\>",
                     ",", "\<\"Times\"\>", ",", "\<\"TupleEqual\"\>", 
                    ",", "\<\"Union\"\>", ",", "\<\"UnionOf\"\>", 
                    ",", "\<\"Which\"\>", ",", "\<\"While\"\>", 
                    ",", "\<\"\[DoubleStruckCapitalC]\"\>", 
                    ",", "\<\"\[DoubleStruckCapitalC]P\"\>"}], "}"}], 
                    "CIContent",
                    StripOnInput->False],
                    ImageMargins->0]}
                   },
                   AutoDelete->False,
                   BaselinePosition->{1, 1},
                   GridBoxAlignment->{"Columns" -> {{Left}}},
                   GridBoxBackground->{"Columns" -> {{Automatic}}},
                   
                   GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
                   
                   GridBoxSpacings->{
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}]}, Dynamic[
                  Typeset`var$$],
                  Alignment->Automatic,
                  BaselinePosition->Baseline,
                  DefaultBaseStyle->"OpenerView",
                  ImageMargins->0,
                  ImageSize->Automatic],
                 Deployed->False,
                 StripOnInput->False],
                OpenerView[{
                  Style["Builtins used in computation", "CIContent"], 
                  
                  Style[{"AbsValue", "And", "AnElement", "Append", 
                    "Cardinality", "CartesianProduct", "CaseDistinction", 
                    "Componentwise", "Delete", "DeleteAt", "Difference", "Do",
                     "Equal", "Exists", "Factorial", "For", "Forall", 
                    "Greater", "GreaterEqual", "Iff", "Implies", "Insert", 
                    "IntegerInterval", "IntegerQuotientRing", 
                    "IntegerQuotientRingPM", "Intersection", "IntersectionOf",
                     "isComplex", "isComplexP", "IsElement", "isInteger", 
                    "isRational", "isReal", "isSet", "isTuple", "Join", 
                    "Length", "Less", "LessEqual", "Let", "Max", 
                    "MaximumElementSet", "MaximumOf", "Min", 
                    "MinimumElementSet", "MinimumOf", "Minus", "Module", 
                    "MultInverse", "Not", "Or", "Plus", "Power", "PowerSet", 
                    "Prepend", "ProductOf", "Radical", "RationalInterval", 
                    "RealInterval", "Replace", "ReplacePart", "SetEqual", 
                    "Subscript", "Subset", "SubsetEqual", "SumOf", "Superset",
                     "SupersetEqual", "Switch", "SymmetricDifference", 
                    "Times", "TupleEqual", "Union", "UnionOf", "Which", 
                    "While", "\[DoubleStruckCapitalC]", 
                    "\[DoubleStruckCapitalC]P"}, "CIContent"]}, False]],
               DynamicModuleValues:>Automatic],
              Setting[#, {0}]& ]},
            {
             ButtonBox["\<\"Restore environment\"\>",
              Appearance->Automatic,
              
              ButtonFunction:>
               Theorema`Interface`GUI`Private`setCompEnv[{}, {{
                 "AbsValue", True}, {"And", True}, {"AnElement", True}, {
                 "Append", True}, {"Cardinality", True}, {
                 "CartesianProduct", True}, {"CaseDistinction", True}, {
                 "Componentwise", True}, {"Delete", True}, {
                 "DeleteAt", True}, {"Difference", True}, {"Do", True}, {
                 "Equal", True}, {"Exists", True}, {"Factorial", True}, {
                 "For", True}, {"Forall", True}, {"Greater", True}, {
                 "GreaterEqual", True}, {"Iff", True}, {"Implies", True}, {
                 "Insert", True}, {"IntegerInterval", True}, {
                 "IntegerQuotientRing", True}, {
                 "IntegerQuotientRingPM", True}, {"Intersection", True}, {
                 "IntersectionOf", True}, {"isComplex", True}, {
                 "isComplexP", True}, {"IsElement", True}, {
                 "isInteger", True}, {"isRational", True}, {"isReal", True}, {
                 "isSet", True}, {"isTuple", True}, {"Join", True}, {
                 "Length", True}, {"Less", True}, {"LessEqual", True}, {
                 "Let", True}, {"Max", True}, {"MaximumElementSet", True}, {
                 "MaximumOf", True}, {"Min", True}, {
                 "MinimumElementSet", True}, {"MinimumOf", True}, {
                 "Minus", True}, {"Module", True}, {"MultInverse", True}, {
                 "Not", True}, {"Or", True}, {"Plus", True}, {
                 "Power", True}, {"PowerSet", True}, {"Prepend", True}, {
                 "ProductOf", True}, {"Radical", True}, {
                 "RationalInterval", True}, {"RealInterval", True}, {
                 "Replace", True}, {"ReplacePart", True}, {
                 "SetEqual", True}, {"Subscript", True}, {"Subset", True}, {
                 "SubsetEqual", True}, {"SumOf", True}, {"Superset", True}, {
                 "SupersetEqual", True}, {"Switch", True}, {
                 "SymmetricDifference", True}, {"Times", True}, {
                 "TupleEqual", True}, {"Union", True}, {"UnionOf", True}, {
                 "Which", True}, {"While", True}, {
                 "\[DoubleStruckCapitalC]", True}, {
                 "\[DoubleStruckCapitalC]P", True}}],
              Evaluator->Automatic,
              ImageSize->Automatic,
              Method->"Preemptive"]}
           },
           DefaultBaseStyle->"Column",
           GridBoxAlignment->{"Columns" -> {{Left}}},
           
           GridBoxItemSize->{
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
          "Column"],
         ImageMargins->0]}
      },
      AutoDelete->False,
      BaselinePosition->{1, 1},
      GridBoxAlignment->{"Columns" -> {{Left}}},
      GridBoxBackground->{"Columns" -> {{Automatic}}},
      GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
      GridBoxSpacings->{"Columns" -> {{0.2}}, "Rows" -> {{0.5}}}]}, Dynamic[
     Typeset`var$$],
     Alignment->Automatic,
     BaselinePosition->Baseline,
     DefaultBaseStyle->"OpenerView",
     ImageMargins->0,
     ImageSize->Automatic],
    Deployed->False,
    StripOnInput->False],
   OpenerView[{"", 
     Column[{
       OpenerView[{
         Style["Knowledge used in computation", "CIContent"], 
         Style[{}, "CIContent"]}], 
       OpenerView[{
         Style["Builtins used in computation", "CIContent"], 
         Style[{
          "AbsValue", "And", "AnElement", "Append", "Cardinality", 
           "CartesianProduct", "CaseDistinction", "Componentwise", "Delete", 
           "DeleteAt", "Difference", "Do", "Equal", "Exists", "Factorial", 
           "For", "Forall", "Greater", "GreaterEqual", "Iff", "Implies", 
           "Insert", "IntegerInterval", "IntegerQuotientRing", 
           "IntegerQuotientRingPM", "Intersection", "IntersectionOf", 
           "isComplex", "isComplexP", "IsElement", "isInteger", "isRational", 
           "isReal", "isSet", "isTuple", "Join", "Length", "Less", 
           "LessEqual", "Let", "Max", "MaximumElementSet", "MaximumOf", "Min",
            "MinimumElementSet", "MinimumOf", "Minus", "Module", 
           "MultInverse", "Not", "Or", "Plus", "Power", "PowerSet", "Prepend",
            "ProductOf", "Radical", "RationalInterval", "RealInterval", 
           "Replace", "ReplacePart", "SetEqual", "Subscript", "Subset", 
           "SubsetEqual", "SumOf", "Superset", "SupersetEqual", "Switch", 
           "SymmetricDifference", "Times", "TupleEqual", "Union", "UnionOf", 
           "Which", "While", "\[DoubleStruckCapitalC]", 
           "\[DoubleStruckCapitalC]P"}, "CIContent"]}], 
       Button["Restore environment", 
        Theorema`Interface`GUI`Private`setCompEnv[{}, {{"AbsValue", True}, {
          "And", True}, {"AnElement", True}, {"Append", True}, {
          "Cardinality", True}, {"CartesianProduct", True}, {
          "CaseDistinction", True}, {"Componentwise", True}, {
          "Delete", True}, {"DeleteAt", True}, {"Difference", True}, {
          "Do", True}, {"Equal", True}, {"Exists", True}, {
          "Factorial", True}, {"For", True}, {"Forall", True}, {
          "Greater", True}, {"GreaterEqual", True}, {"Iff", True}, {
          "Implies", True}, {"Insert", True}, {"IntegerInterval", True}, {
          "IntegerQuotientRing", True}, {"IntegerQuotientRingPM", True}, {
          "Intersection", True}, {"IntersectionOf", True}, {
          "isComplex", True}, {"isComplexP", True}, {"IsElement", True}, {
          "isInteger", True}, {"isRational", True}, {"isReal", True}, {
          "isSet", True}, {"isTuple", True}, {"Join", True}, {
          "Length", True}, {"Less", True}, {"LessEqual", True}, {
          "Let", True}, {"Max", True}, {"MaximumElementSet", True}, {
          "MaximumOf", True}, {"Min", True}, {"MinimumElementSet", True}, {
          "MinimumOf", True}, {"Minus", True}, {"Module", True}, {
          "MultInverse", True}, {"Not", True}, {"Or", True}, {"Plus", True}, {
          "Power", True}, {"PowerSet", True}, {"Prepend", True}, {
          "ProductOf", True}, {"Radical", True}, {"RationalInterval", True}, {
          "RealInterval", True}, {"Replace", True}, {"ReplacePart", True}, {
          "SetEqual", True}, {"Subscript", True}, {"Subset", True}, {
          "SubsetEqual", True}, {"SumOf", True}, {"Superset", True}, {
          "SupersetEqual", True}, {"Switch", True}, {
          "SymmetricDifference", True}, {"Times", True}, {
          "TupleEqual", True}, {"Union", True}, {"UnionOf", True}, {
          "Which", True}, {"While", True}, {
          "\[DoubleStruckCapitalC]", True}, {
          "\[DoubleStruckCapitalC]P", True}}], ImageSize -> Automatic]}]}, 
    False]],
  DynamicModuleValues:>{}]], "ComputationInfo",
 CellChangeTimes->{3.599301747179203*^9},
 CellID->1150671138],

Cell[BoxData[
 FormBox[
  RowBox[{"x", 
   SubscriptBox["+", "\[Rule]"], "y"}], TheoremaForm]], "ComputationResult",
 CellChangeTimes->{3.59930174721604*^9},
 CellID->1435739548]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"a", 
  SubsuperscriptBox["\[SmallCircle]", "sub", "sup"], "b"}]], "Computation",
 CellChangeTimes->{{3.599301761008256*^9, 3.599301772637154*^9}},
 CellID->1257086601],

Cell[BoxData[
 DynamicModuleBox[{Typeset`var$$ = False}, 
  InterpretationBox[
   StyleBox[
    PaneSelectorBox[{False->GridBox[{
       {
        OpenerBox[Dynamic[Typeset`var$$],
         Appearance->Automatic,
         AutoAction->False,
         ContinuousAction->False,
         Enabled->Automatic], "\<\"\"\>"}
      },
      AutoDelete->False,
      BaselinePosition->{1, 1},
      GridBoxAlignment->{"Columns" -> {{Left}}},
      GridBoxBackground->{"Columns" -> {{Automatic}}},
      GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
      GridBoxSpacings->{"Columns" -> {{0.2}}, "Rows" -> {{0.5}}}], True->
     GridBox[{
       {
        OpenerBox[Dynamic[Typeset`var$$],
         Appearance->Automatic,
         AutoAction->False,
         ContinuousAction->False,
         Enabled->Automatic], "\<\"\"\>"},
       {"", 
        PaneBox[
         TagBox[GridBox[{
            {
             TagBox[
              DynamicModuleBox[{Typeset`var$$ = False}, 
               InterpretationBox[
                StyleBox[
                 PaneSelectorBox[{False->GridBox[{
                    {
                    OpenerBox[Dynamic[Typeset`var$$],
                    Appearance->Automatic,
                    AutoAction->False,
                    ContinuousAction->False,
                    Enabled->Automatic], 
                    
                    StyleBox["\<\"Knowledge used in computation\"\>", 
                    "CIContent",
                    StripOnInput->False]}
                   },
                   AutoDelete->False,
                   BaselinePosition->{1, 1},
                   GridBoxAlignment->{"Columns" -> {{Left}}},
                   GridBoxBackground->{"Columns" -> {{Automatic}}},
                   
                   GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
                   
                   GridBoxSpacings->{
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}], True->
                  GridBox[{
                    {
                    OpenerBox[Dynamic[Typeset`var$$],
                    Appearance->Automatic,
                    AutoAction->False,
                    ContinuousAction->False,
                    Enabled->Automatic], 
                    
                    StyleBox["\<\"Knowledge used in computation\"\>", 
                    "CIContent",
                    StripOnInput->False]},
                    {"", 
                    PaneBox[
                    StyleBox[
                    RowBox[{"{", "}"}], "CIContent",
                    StripOnInput->False],
                    ImageMargins->0]}
                   },
                   AutoDelete->False,
                   BaselinePosition->{1, 1},
                   GridBoxAlignment->{"Columns" -> {{Left}}},
                   GridBoxBackground->{"Columns" -> {{Automatic}}},
                   
                   GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
                   
                   GridBoxSpacings->{
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}]}, Dynamic[
                  Typeset`var$$],
                  Alignment->Automatic,
                  BaselinePosition->Baseline,
                  DefaultBaseStyle->"OpenerView",
                  ImageMargins->0,
                  ImageSize->Automatic],
                 Deployed->False,
                 StripOnInput->False],
                OpenerView[{
                  Style["Knowledge used in computation", "CIContent"], 
                  Style[{}, "CIContent"]}, False]],
               DynamicModuleValues:>Automatic],
              Setting[#, {0}]& ]},
            {
             TagBox[
              DynamicModuleBox[{Typeset`var$$ = False}, 
               InterpretationBox[
                StyleBox[
                 PaneSelectorBox[{False->GridBox[{
                    {
                    OpenerBox[Dynamic[Typeset`var$$],
                    Appearance->Automatic,
                    AutoAction->False,
                    ContinuousAction->False,
                    Enabled->Automatic], 
                    
                    StyleBox["\<\"Builtins used in computation\"\>", 
                    "CIContent",
                    StripOnInput->False]}
                   },
                   AutoDelete->False,
                   BaselinePosition->{1, 1},
                   GridBoxAlignment->{"Columns" -> {{Left}}},
                   GridBoxBackground->{"Columns" -> {{Automatic}}},
                   
                   GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
                   
                   GridBoxSpacings->{
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}], True->
                  GridBox[{
                    {
                    OpenerBox[Dynamic[Typeset`var$$],
                    Appearance->Automatic,
                    AutoAction->False,
                    ContinuousAction->False,
                    Enabled->Automatic], 
                    
                    StyleBox["\<\"Builtins used in computation\"\>", 
                    "CIContent",
                    StripOnInput->False]},
                    {"", 
                    PaneBox[
                    StyleBox[
                    RowBox[{"{", 
                    
                    RowBox[{"\<\"AbsValue\"\>", ",", "\<\"And\"\>", 
                    ",", "\<\"AnElement\"\>", ",", "\<\"Append\"\>", 
                    ",", "\<\"Cardinality\"\>", 
                    ",", "\<\"CartesianProduct\"\>", 
                    ",", "\<\"CaseDistinction\"\>", 
                    ",", "\<\"Componentwise\"\>", ",", "\<\"Delete\"\>", 
                    ",", "\<\"DeleteAt\"\>", ",", "\<\"Difference\"\>", 
                    ",", "\<\"Do\"\>", ",", "\<\"Equal\"\>", 
                    ",", "\<\"Exists\"\>", ",", "\<\"Factorial\"\>", 
                    ",", "\<\"For\"\>", ",", "\<\"Forall\"\>", 
                    ",", "\<\"Greater\"\>", ",", "\<\"GreaterEqual\"\>", 
                    ",", "\<\"Iff\"\>", ",", "\<\"Implies\"\>", 
                    ",", "\<\"Insert\"\>", ",", "\<\"IntegerInterval\"\>", 
                    ",", "\<\"IntegerQuotientRing\"\>", 
                    ",", "\<\"IntegerQuotientRingPM\"\>", 
                    ",", "\<\"Intersection\"\>", 
                    ",", "\<\"IntersectionOf\"\>", ",", "\<\"isComplex\"\>", 
                    ",", "\<\"isComplexP\"\>", ",", "\<\"IsElement\"\>", 
                    ",", "\<\"isInteger\"\>", ",", "\<\"isRational\"\>", 
                    ",", "\<\"isReal\"\>", ",", "\<\"isSet\"\>", 
                    ",", "\<\"isTuple\"\>", ",", "\<\"Join\"\>", 
                    ",", "\<\"Length\"\>", ",", "\<\"Less\"\>", 
                    ",", "\<\"LessEqual\"\>", ",", "\<\"Let\"\>", 
                    ",", "\<\"Max\"\>", ",", "\<\"MaximumElementSet\"\>", 
                    ",", "\<\"MaximumOf\"\>", ",", "\<\"Min\"\>", 
                    ",", "\<\"MinimumElementSet\"\>", 
                    ",", "\<\"MinimumOf\"\>", ",", "\<\"Minus\"\>", 
                    ",", "\<\"Module\"\>", ",", "\<\"MultInverse\"\>", 
                    ",", "\<\"Not\"\>", ",", "\<\"Or\"\>", 
                    ",", "\<\"Plus\"\>", ",", "\<\"Power\"\>", 
                    ",", "\<\"PowerSet\"\>", ",", "\<\"Prepend\"\>", 
                    ",", "\<\"ProductOf\"\>", ",", "\<\"Radical\"\>", 
                    ",", "\<\"RationalInterval\"\>", 
                    ",", "\<\"RealInterval\"\>", ",", "\<\"Replace\"\>", 
                    ",", "\<\"ReplacePart\"\>", ",", "\<\"SetEqual\"\>", 
                    ",", "\<\"Subscript\"\>", ",", "\<\"Subset\"\>", 
                    ",", "\<\"SubsetEqual\"\>", ",", "\<\"SumOf\"\>", 
                    ",", "\<\"Superset\"\>", ",", "\<\"SupersetEqual\"\>", 
                    ",", "\<\"Switch\"\>", ",", "\<\"SymmetricDifference\"\>",
                     ",", "\<\"Times\"\>", ",", "\<\"TupleEqual\"\>", 
                    ",", "\<\"Union\"\>", ",", "\<\"UnionOf\"\>", 
                    ",", "\<\"Which\"\>", ",", "\<\"While\"\>", 
                    ",", "\<\"\[DoubleStruckCapitalC]\"\>", 
                    ",", "\<\"\[DoubleStruckCapitalC]P\"\>"}], "}"}], 
                    "CIContent",
                    StripOnInput->False],
                    ImageMargins->0]}
                   },
                   AutoDelete->False,
                   BaselinePosition->{1, 1},
                   GridBoxAlignment->{"Columns" -> {{Left}}},
                   GridBoxBackground->{"Columns" -> {{Automatic}}},
                   
                   GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
                   
                   GridBoxSpacings->{
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}]}, Dynamic[
                  Typeset`var$$],
                  Alignment->Automatic,
                  BaselinePosition->Baseline,
                  DefaultBaseStyle->"OpenerView",
                  ImageMargins->0,
                  ImageSize->Automatic],
                 Deployed->False,
                 StripOnInput->False],
                OpenerView[{
                  Style["Builtins used in computation", "CIContent"], 
                  
                  Style[{"AbsValue", "And", "AnElement", "Append", 
                    "Cardinality", "CartesianProduct", "CaseDistinction", 
                    "Componentwise", "Delete", "DeleteAt", "Difference", "Do",
                     "Equal", "Exists", "Factorial", "For", "Forall", 
                    "Greater", "GreaterEqual", "Iff", "Implies", "Insert", 
                    "IntegerInterval", "IntegerQuotientRing", 
                    "IntegerQuotientRingPM", "Intersection", "IntersectionOf",
                     "isComplex", "isComplexP", "IsElement", "isInteger", 
                    "isRational", "isReal", "isSet", "isTuple", "Join", 
                    "Length", "Less", "LessEqual", "Let", "Max", 
                    "MaximumElementSet", "MaximumOf", "Min", 
                    "MinimumElementSet", "MinimumOf", "Minus", "Module", 
                    "MultInverse", "Not", "Or", "Plus", "Power", "PowerSet", 
                    "Prepend", "ProductOf", "Radical", "RationalInterval", 
                    "RealInterval", "Replace", "ReplacePart", "SetEqual", 
                    "Subscript", "Subset", "SubsetEqual", "SumOf", "Superset",
                     "SupersetEqual", "Switch", "SymmetricDifference", 
                    "Times", "TupleEqual", "Union", "UnionOf", "Which", 
                    "While", "\[DoubleStruckCapitalC]", 
                    "\[DoubleStruckCapitalC]P"}, "CIContent"]}, False]],
               DynamicModuleValues:>Automatic],
              Setting[#, {0}]& ]},
            {
             ButtonBox["\<\"Restore environment\"\>",
              Appearance->Automatic,
              
              ButtonFunction:>
               Theorema`Interface`GUI`Private`setCompEnv[{}, {{
                 "AbsValue", True}, {"And", True}, {"AnElement", True}, {
                 "Append", True}, {"Cardinality", True}, {
                 "CartesianProduct", True}, {"CaseDistinction", True}, {
                 "Componentwise", True}, {"Delete", True}, {
                 "DeleteAt", True}, {"Difference", True}, {"Do", True}, {
                 "Equal", True}, {"Exists", True}, {"Factorial", True}, {
                 "For", True}, {"Forall", True}, {"Greater", True}, {
                 "GreaterEqual", True}, {"Iff", True}, {"Implies", True}, {
                 "Insert", True}, {"IntegerInterval", True}, {
                 "IntegerQuotientRing", True}, {
                 "IntegerQuotientRingPM", True}, {"Intersection", True}, {
                 "IntersectionOf", True}, {"isComplex", True}, {
                 "isComplexP", True}, {"IsElement", True}, {
                 "isInteger", True}, {"isRational", True}, {"isReal", True}, {
                 "isSet", True}, {"isTuple", True}, {"Join", True}, {
                 "Length", True}, {"Less", True}, {"LessEqual", True}, {
                 "Let", True}, {"Max", True}, {"MaximumElementSet", True}, {
                 "MaximumOf", True}, {"Min", True}, {
                 "MinimumElementSet", True}, {"MinimumOf", True}, {
                 "Minus", True}, {"Module", True}, {"MultInverse", True}, {
                 "Not", True}, {"Or", True}, {"Plus", True}, {
                 "Power", True}, {"PowerSet", True}, {"Prepend", True}, {
                 "ProductOf", True}, {"Radical", True}, {
                 "RationalInterval", True}, {"RealInterval", True}, {
                 "Replace", True}, {"ReplacePart", True}, {
                 "SetEqual", True}, {"Subscript", True}, {"Subset", True}, {
                 "SubsetEqual", True}, {"SumOf", True}, {"Superset", True}, {
                 "SupersetEqual", True}, {"Switch", True}, {
                 "SymmetricDifference", True}, {"Times", True}, {
                 "TupleEqual", True}, {"Union", True}, {"UnionOf", True}, {
                 "Which", True}, {"While", True}, {
                 "\[DoubleStruckCapitalC]", True}, {
                 "\[DoubleStruckCapitalC]P", True}}],
              Evaluator->Automatic,
              ImageSize->Automatic,
              Method->"Preemptive"]}
           },
           DefaultBaseStyle->"Column",
           GridBoxAlignment->{"Columns" -> {{Left}}},
           
           GridBoxItemSize->{
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
          "Column"],
         ImageMargins->0]}
      },
      AutoDelete->False,
      BaselinePosition->{1, 1},
      GridBoxAlignment->{"Columns" -> {{Left}}},
      GridBoxBackground->{"Columns" -> {{Automatic}}},
      GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
      GridBoxSpacings->{"Columns" -> {{0.2}}, "Rows" -> {{0.5}}}]}, Dynamic[
     Typeset`var$$],
     Alignment->Automatic,
     BaselinePosition->Baseline,
     DefaultBaseStyle->"OpenerView",
     ImageMargins->0,
     ImageSize->Automatic],
    Deployed->False,
    StripOnInput->False],
   OpenerView[{"", 
     Column[{
       OpenerView[{
         Style["Knowledge used in computation", "CIContent"], 
         Style[{}, "CIContent"]}], 
       OpenerView[{
         Style["Builtins used in computation", "CIContent"], 
         Style[{
          "AbsValue", "And", "AnElement", "Append", "Cardinality", 
           "CartesianProduct", "CaseDistinction", "Componentwise", "Delete", 
           "DeleteAt", "Difference", "Do", "Equal", "Exists", "Factorial", 
           "For", "Forall", "Greater", "GreaterEqual", "Iff", "Implies", 
           "Insert", "IntegerInterval", "IntegerQuotientRing", 
           "IntegerQuotientRingPM", "Intersection", "IntersectionOf", 
           "isComplex", "isComplexP", "IsElement", "isInteger", "isRational", 
           "isReal", "isSet", "isTuple", "Join", "Length", "Less", 
           "LessEqual", "Let", "Max", "MaximumElementSet", "MaximumOf", "Min",
            "MinimumElementSet", "MinimumOf", "Minus", "Module", 
           "MultInverse", "Not", "Or", "Plus", "Power", "PowerSet", "Prepend",
            "ProductOf", "Radical", "RationalInterval", "RealInterval", 
           "Replace", "ReplacePart", "SetEqual", "Subscript", "Subset", 
           "SubsetEqual", "SumOf", "Superset", "SupersetEqual", "Switch", 
           "SymmetricDifference", "Times", "TupleEqual", "Union", "UnionOf", 
           "Which", "While", "\[DoubleStruckCapitalC]", 
           "\[DoubleStruckCapitalC]P"}, "CIContent"]}], 
       Button["Restore environment", 
        Theorema`Interface`GUI`Private`setCompEnv[{}, {{"AbsValue", True}, {
          "And", True}, {"AnElement", True}, {"Append", True}, {
          "Cardinality", True}, {"CartesianProduct", True}, {
          "CaseDistinction", True}, {"Componentwise", True}, {
          "Delete", True}, {"DeleteAt", True}, {"Difference", True}, {
          "Do", True}, {"Equal", True}, {"Exists", True}, {
          "Factorial", True}, {"For", True}, {"Forall", True}, {
          "Greater", True}, {"GreaterEqual", True}, {"Iff", True}, {
          "Implies", True}, {"Insert", True}, {"IntegerInterval", True}, {
          "IntegerQuotientRing", True}, {"IntegerQuotientRingPM", True}, {
          "Intersection", True}, {"IntersectionOf", True}, {
          "isComplex", True}, {"isComplexP", True}, {"IsElement", True}, {
          "isInteger", True}, {"isRational", True}, {"isReal", True}, {
          "isSet", True}, {"isTuple", True}, {"Join", True}, {
          "Length", True}, {"Less", True}, {"LessEqual", True}, {
          "Let", True}, {"Max", True}, {"MaximumElementSet", True}, {
          "MaximumOf", True}, {"Min", True}, {"MinimumElementSet", True}, {
          "MinimumOf", True}, {"Minus", True}, {"Module", True}, {
          "MultInverse", True}, {"Not", True}, {"Or", True}, {"Plus", True}, {
          "Power", True}, {"PowerSet", True}, {"Prepend", True}, {
          "ProductOf", True}, {"Radical", True}, {"RationalInterval", True}, {
          "RealInterval", True}, {"Replace", True}, {"ReplacePart", True}, {
          "SetEqual", True}, {"Subscript", True}, {"Subset", True}, {
          "SubsetEqual", True}, {"SumOf", True}, {"Superset", True}, {
          "SupersetEqual", True}, {"Switch", True}, {
          "SymmetricDifference", True}, {"Times", True}, {
          "TupleEqual", True}, {"Union", True}, {"UnionOf", True}, {
          "Which", True}, {"While", True}, {
          "\[DoubleStruckCapitalC]", True}, {
          "\[DoubleStruckCapitalC]P", True}}], ImageSize -> Automatic]}]}, 
    False]],
  DynamicModuleValues:>{}]], "ComputationInfo",
 CellChangeTimes->{3.599301773480322*^9},
 CellID->780948432],

Cell[BoxData[
 FormBox[
  RowBox[{"a", 
   TemplateBox[{"\[SmallCircle]","sub","sup"},
    "Subsuperscript"], "b"}], TheoremaForm]], "ComputationResult",
 CellChangeTimes->{3.599301773514435*^9},
 CellID->625377875]
}, Open  ]],

Cell["\<\
At each position arbitrary many annotations, separated by \
\[OpenCurlyDoubleQuote],\[CloseCurlyDoubleQuote], are possible:\
\>", "Text",
 CellChangeTimes->{{3.599301810730284*^9, 3.599301835914971*^9}},
 CellID->1321878989],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"left", 
  OverscriptBox["<", 
   RowBox[{"1", ",", "2", ",", "3"}]], "right"}]], "Computation",
 CellChangeTimes->{{3.59930177969849*^9, 3.599301798216492*^9}},
 CellID->1655020978],

Cell[BoxData[
 DynamicModuleBox[{Typeset`var$$ = False}, 
  InterpretationBox[
   StyleBox[
    PaneSelectorBox[{False->GridBox[{
       {
        OpenerBox[Dynamic[Typeset`var$$],
         Appearance->Automatic,
         AutoAction->False,
         ContinuousAction->False,
         Enabled->Automatic], "\<\"\"\>"}
      },
      AutoDelete->False,
      BaselinePosition->{1, 1},
      GridBoxAlignment->{"Columns" -> {{Left}}},
      GridBoxBackground->{"Columns" -> {{Automatic}}},
      GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
      GridBoxSpacings->{"Columns" -> {{0.2}}, "Rows" -> {{0.5}}}], True->
     GridBox[{
       {
        OpenerBox[Dynamic[Typeset`var$$],
         Appearance->Automatic,
         AutoAction->False,
         ContinuousAction->False,
         Enabled->Automatic], "\<\"\"\>"},
       {"", 
        PaneBox[
         TagBox[GridBox[{
            {
             TagBox[
              DynamicModuleBox[{Typeset`var$$ = False}, 
               InterpretationBox[
                StyleBox[
                 PaneSelectorBox[{False->GridBox[{
                    {
                    OpenerBox[Dynamic[Typeset`var$$],
                    Appearance->Automatic,
                    AutoAction->False,
                    ContinuousAction->False,
                    Enabled->Automatic], 
                    
                    StyleBox["\<\"Knowledge used in computation\"\>", 
                    "CIContent",
                    StripOnInput->False]}
                   },
                   AutoDelete->False,
                   BaselinePosition->{1, 1},
                   GridBoxAlignment->{"Columns" -> {{Left}}},
                   GridBoxBackground->{"Columns" -> {{Automatic}}},
                   
                   GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
                   
                   GridBoxSpacings->{
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}], True->
                  GridBox[{
                    {
                    OpenerBox[Dynamic[Typeset`var$$],
                    Appearance->Automatic,
                    AutoAction->False,
                    ContinuousAction->False,
                    Enabled->Automatic], 
                    
                    StyleBox["\<\"Knowledge used in computation\"\>", 
                    "CIContent",
                    StripOnInput->False]},
                    {"", 
                    PaneBox[
                    StyleBox[
                    RowBox[{"{", "}"}], "CIContent",
                    StripOnInput->False],
                    ImageMargins->0]}
                   },
                   AutoDelete->False,
                   BaselinePosition->{1, 1},
                   GridBoxAlignment->{"Columns" -> {{Left}}},
                   GridBoxBackground->{"Columns" -> {{Automatic}}},
                   
                   GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
                   
                   GridBoxSpacings->{
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}]}, Dynamic[
                  Typeset`var$$],
                  Alignment->Automatic,
                  BaselinePosition->Baseline,
                  DefaultBaseStyle->"OpenerView",
                  ImageMargins->0,
                  ImageSize->Automatic],
                 Deployed->False,
                 StripOnInput->False],
                OpenerView[{
                  Style["Knowledge used in computation", "CIContent"], 
                  Style[{}, "CIContent"]}, False]],
               DynamicModuleValues:>Automatic],
              Setting[#, {0}]& ]},
            {
             TagBox[
              DynamicModuleBox[{Typeset`var$$ = False}, 
               InterpretationBox[
                StyleBox[
                 PaneSelectorBox[{False->GridBox[{
                    {
                    OpenerBox[Dynamic[Typeset`var$$],
                    Appearance->Automatic,
                    AutoAction->False,
                    ContinuousAction->False,
                    Enabled->Automatic], 
                    
                    StyleBox["\<\"Builtins used in computation\"\>", 
                    "CIContent",
                    StripOnInput->False]}
                   },
                   AutoDelete->False,
                   BaselinePosition->{1, 1},
                   GridBoxAlignment->{"Columns" -> {{Left}}},
                   GridBoxBackground->{"Columns" -> {{Automatic}}},
                   
                   GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
                   
                   GridBoxSpacings->{
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}], True->
                  GridBox[{
                    {
                    OpenerBox[Dynamic[Typeset`var$$],
                    Appearance->Automatic,
                    AutoAction->False,
                    ContinuousAction->False,
                    Enabled->Automatic], 
                    
                    StyleBox["\<\"Builtins used in computation\"\>", 
                    "CIContent",
                    StripOnInput->False]},
                    {"", 
                    PaneBox[
                    StyleBox[
                    RowBox[{"{", 
                    
                    RowBox[{"\<\"AbsValue\"\>", ",", "\<\"And\"\>", 
                    ",", "\<\"AnElement\"\>", ",", "\<\"Append\"\>", 
                    ",", "\<\"Cardinality\"\>", 
                    ",", "\<\"CartesianProduct\"\>", 
                    ",", "\<\"CaseDistinction\"\>", 
                    ",", "\<\"Componentwise\"\>", ",", "\<\"Delete\"\>", 
                    ",", "\<\"DeleteAt\"\>", ",", "\<\"Difference\"\>", 
                    ",", "\<\"Do\"\>", ",", "\<\"Equal\"\>", 
                    ",", "\<\"Exists\"\>", ",", "\<\"Factorial\"\>", 
                    ",", "\<\"For\"\>", ",", "\<\"Forall\"\>", 
                    ",", "\<\"Greater\"\>", ",", "\<\"GreaterEqual\"\>", 
                    ",", "\<\"Iff\"\>", ",", "\<\"Implies\"\>", 
                    ",", "\<\"Insert\"\>", ",", "\<\"IntegerInterval\"\>", 
                    ",", "\<\"IntegerQuotientRing\"\>", 
                    ",", "\<\"IntegerQuotientRingPM\"\>", 
                    ",", "\<\"Intersection\"\>", 
                    ",", "\<\"IntersectionOf\"\>", ",", "\<\"isComplex\"\>", 
                    ",", "\<\"isComplexP\"\>", ",", "\<\"IsElement\"\>", 
                    ",", "\<\"isInteger\"\>", ",", "\<\"isRational\"\>", 
                    ",", "\<\"isReal\"\>", ",", "\<\"isSet\"\>", 
                    ",", "\<\"isTuple\"\>", ",", "\<\"Join\"\>", 
                    ",", "\<\"Length\"\>", ",", "\<\"Less\"\>", 
                    ",", "\<\"LessEqual\"\>", ",", "\<\"Let\"\>", 
                    ",", "\<\"Max\"\>", ",", "\<\"MaximumElementSet\"\>", 
                    ",", "\<\"MaximumOf\"\>", ",", "\<\"Min\"\>", 
                    ",", "\<\"MinimumElementSet\"\>", 
                    ",", "\<\"MinimumOf\"\>", ",", "\<\"Minus\"\>", 
                    ",", "\<\"Module\"\>", ",", "\<\"MultInverse\"\>", 
                    ",", "\<\"Not\"\>", ",", "\<\"Or\"\>", 
                    ",", "\<\"Plus\"\>", ",", "\<\"Power\"\>", 
                    ",", "\<\"PowerSet\"\>", ",", "\<\"Prepend\"\>", 
                    ",", "\<\"ProductOf\"\>", ",", "\<\"Radical\"\>", 
                    ",", "\<\"RationalInterval\"\>", 
                    ",", "\<\"RealInterval\"\>", ",", "\<\"Replace\"\>", 
                    ",", "\<\"ReplacePart\"\>", ",", "\<\"SetEqual\"\>", 
                    ",", "\<\"Subscript\"\>", ",", "\<\"Subset\"\>", 
                    ",", "\<\"SubsetEqual\"\>", ",", "\<\"SumOf\"\>", 
                    ",", "\<\"Superset\"\>", ",", "\<\"SupersetEqual\"\>", 
                    ",", "\<\"Switch\"\>", ",", "\<\"SymmetricDifference\"\>",
                     ",", "\<\"Times\"\>", ",", "\<\"TupleEqual\"\>", 
                    ",", "\<\"Union\"\>", ",", "\<\"UnionOf\"\>", 
                    ",", "\<\"Which\"\>", ",", "\<\"While\"\>", 
                    ",", "\<\"\[DoubleStruckCapitalC]\"\>", 
                    ",", "\<\"\[DoubleStruckCapitalC]P\"\>"}], "}"}], 
                    "CIContent",
                    StripOnInput->False],
                    ImageMargins->0]}
                   },
                   AutoDelete->False,
                   BaselinePosition->{1, 1},
                   GridBoxAlignment->{"Columns" -> {{Left}}},
                   GridBoxBackground->{"Columns" -> {{Automatic}}},
                   
                   GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
                   
                   GridBoxSpacings->{
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}]}, Dynamic[
                  Typeset`var$$],
                  Alignment->Automatic,
                  BaselinePosition->Baseline,
                  DefaultBaseStyle->"OpenerView",
                  ImageMargins->0,
                  ImageSize->Automatic],
                 Deployed->False,
                 StripOnInput->False],
                OpenerView[{
                  Style["Builtins used in computation", "CIContent"], 
                  
                  Style[{"AbsValue", "And", "AnElement", "Append", 
                    "Cardinality", "CartesianProduct", "CaseDistinction", 
                    "Componentwise", "Delete", "DeleteAt", "Difference", "Do",
                     "Equal", "Exists", "Factorial", "For", "Forall", 
                    "Greater", "GreaterEqual", "Iff", "Implies", "Insert", 
                    "IntegerInterval", "IntegerQuotientRing", 
                    "IntegerQuotientRingPM", "Intersection", "IntersectionOf",
                     "isComplex", "isComplexP", "IsElement", "isInteger", 
                    "isRational", "isReal", "isSet", "isTuple", "Join", 
                    "Length", "Less", "LessEqual", "Let", "Max", 
                    "MaximumElementSet", "MaximumOf", "Min", 
                    "MinimumElementSet", "MinimumOf", "Minus", "Module", 
                    "MultInverse", "Not", "Or", "Plus", "Power", "PowerSet", 
                    "Prepend", "ProductOf", "Radical", "RationalInterval", 
                    "RealInterval", "Replace", "ReplacePart", "SetEqual", 
                    "Subscript", "Subset", "SubsetEqual", "SumOf", "Superset",
                     "SupersetEqual", "Switch", "SymmetricDifference", 
                    "Times", "TupleEqual", "Union", "UnionOf", "Which", 
                    "While", "\[DoubleStruckCapitalC]", 
                    "\[DoubleStruckCapitalC]P"}, "CIContent"]}, False]],
               DynamicModuleValues:>Automatic],
              Setting[#, {0}]& ]},
            {
             ButtonBox["\<\"Restore environment\"\>",
              Appearance->Automatic,
              
              ButtonFunction:>
               Theorema`Interface`GUI`Private`setCompEnv[{}, {{
                 "AbsValue", True}, {"And", True}, {"AnElement", True}, {
                 "Append", True}, {"Cardinality", True}, {
                 "CartesianProduct", True}, {"CaseDistinction", True}, {
                 "Componentwise", True}, {"Delete", True}, {
                 "DeleteAt", True}, {"Difference", True}, {"Do", True}, {
                 "Equal", True}, {"Exists", True}, {"Factorial", True}, {
                 "For", True}, {"Forall", True}, {"Greater", True}, {
                 "GreaterEqual", True}, {"Iff", True}, {"Implies", True}, {
                 "Insert", True}, {"IntegerInterval", True}, {
                 "IntegerQuotientRing", True}, {
                 "IntegerQuotientRingPM", True}, {"Intersection", True}, {
                 "IntersectionOf", True}, {"isComplex", True}, {
                 "isComplexP", True}, {"IsElement", True}, {
                 "isInteger", True}, {"isRational", True}, {"isReal", True}, {
                 "isSet", True}, {"isTuple", True}, {"Join", True}, {
                 "Length", True}, {"Less", True}, {"LessEqual", True}, {
                 "Let", True}, {"Max", True}, {"MaximumElementSet", True}, {
                 "MaximumOf", True}, {"Min", True}, {
                 "MinimumElementSet", True}, {"MinimumOf", True}, {
                 "Minus", True}, {"Module", True}, {"MultInverse", True}, {
                 "Not", True}, {"Or", True}, {"Plus", True}, {
                 "Power", True}, {"PowerSet", True}, {"Prepend", True}, {
                 "ProductOf", True}, {"Radical", True}, {
                 "RationalInterval", True}, {"RealInterval", True}, {
                 "Replace", True}, {"ReplacePart", True}, {
                 "SetEqual", True}, {"Subscript", True}, {"Subset", True}, {
                 "SubsetEqual", True}, {"SumOf", True}, {"Superset", True}, {
                 "SupersetEqual", True}, {"Switch", True}, {
                 "SymmetricDifference", True}, {"Times", True}, {
                 "TupleEqual", True}, {"Union", True}, {"UnionOf", True}, {
                 "Which", True}, {"While", True}, {
                 "\[DoubleStruckCapitalC]", True}, {
                 "\[DoubleStruckCapitalC]P", True}}],
              Evaluator->Automatic,
              ImageSize->Automatic,
              Method->"Preemptive"]}
           },
           DefaultBaseStyle->"Column",
           GridBoxAlignment->{"Columns" -> {{Left}}},
           
           GridBoxItemSize->{
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
          "Column"],
         ImageMargins->0]}
      },
      AutoDelete->False,
      BaselinePosition->{1, 1},
      GridBoxAlignment->{"Columns" -> {{Left}}},
      GridBoxBackground->{"Columns" -> {{Automatic}}},
      GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
      GridBoxSpacings->{"Columns" -> {{0.2}}, "Rows" -> {{0.5}}}]}, Dynamic[
     Typeset`var$$],
     Alignment->Automatic,
     BaselinePosition->Baseline,
     DefaultBaseStyle->"OpenerView",
     ImageMargins->0,
     ImageSize->Automatic],
    Deployed->False,
    StripOnInput->False],
   OpenerView[{"", 
     Column[{
       OpenerView[{
         Style["Knowledge used in computation", "CIContent"], 
         Style[{}, "CIContent"]}], 
       OpenerView[{
         Style["Builtins used in computation", "CIContent"], 
         Style[{
          "AbsValue", "And", "AnElement", "Append", "Cardinality", 
           "CartesianProduct", "CaseDistinction", "Componentwise", "Delete", 
           "DeleteAt", "Difference", "Do", "Equal", "Exists", "Factorial", 
           "For", "Forall", "Greater", "GreaterEqual", "Iff", "Implies", 
           "Insert", "IntegerInterval", "IntegerQuotientRing", 
           "IntegerQuotientRingPM", "Intersection", "IntersectionOf", 
           "isComplex", "isComplexP", "IsElement", "isInteger", "isRational", 
           "isReal", "isSet", "isTuple", "Join", "Length", "Less", 
           "LessEqual", "Let", "Max", "MaximumElementSet", "MaximumOf", "Min",
            "MinimumElementSet", "MinimumOf", "Minus", "Module", 
           "MultInverse", "Not", "Or", "Plus", "Power", "PowerSet", "Prepend",
            "ProductOf", "Radical", "RationalInterval", "RealInterval", 
           "Replace", "ReplacePart", "SetEqual", "Subscript", "Subset", 
           "SubsetEqual", "SumOf", "Superset", "SupersetEqual", "Switch", 
           "SymmetricDifference", "Times", "TupleEqual", "Union", "UnionOf", 
           "Which", "While", "\[DoubleStruckCapitalC]", 
           "\[DoubleStruckCapitalC]P"}, "CIContent"]}], 
       Button["Restore environment", 
        Theorema`Interface`GUI`Private`setCompEnv[{}, {{"AbsValue", True}, {
          "And", True}, {"AnElement", True}, {"Append", True}, {
          "Cardinality", True}, {"CartesianProduct", True}, {
          "CaseDistinction", True}, {"Componentwise", True}, {
          "Delete", True}, {"DeleteAt", True}, {"Difference", True}, {
          "Do", True}, {"Equal", True}, {"Exists", True}, {
          "Factorial", True}, {"For", True}, {"Forall", True}, {
          "Greater", True}, {"GreaterEqual", True}, {"Iff", True}, {
          "Implies", True}, {"Insert", True}, {"IntegerInterval", True}, {
          "IntegerQuotientRing", True}, {"IntegerQuotientRingPM", True}, {
          "Intersection", True}, {"IntersectionOf", True}, {
          "isComplex", True}, {"isComplexP", True}, {"IsElement", True}, {
          "isInteger", True}, {"isRational", True}, {"isReal", True}, {
          "isSet", True}, {"isTuple", True}, {"Join", True}, {
          "Length", True}, {"Less", True}, {"LessEqual", True}, {
          "Let", True}, {"Max", True}, {"MaximumElementSet", True}, {
          "MaximumOf", True}, {"Min", True}, {"MinimumElementSet", True}, {
          "MinimumOf", True}, {"Minus", True}, {"Module", True}, {
          "MultInverse", True}, {"Not", True}, {"Or", True}, {"Plus", True}, {
          "Power", True}, {"PowerSet", True}, {"Prepend", True}, {
          "ProductOf", True}, {"Radical", True}, {"RationalInterval", True}, {
          "RealInterval", True}, {"Replace", True}, {"ReplacePart", True}, {
          "SetEqual", True}, {"Subscript", True}, {"Subset", True}, {
          "SubsetEqual", True}, {"SumOf", True}, {"Superset", True}, {
          "SupersetEqual", True}, {"Switch", True}, {
          "SymmetricDifference", True}, {"Times", True}, {
          "TupleEqual", True}, {"Union", True}, {"UnionOf", True}, {
          "Which", True}, {"While", True}, {
          "\[DoubleStruckCapitalC]", True}, {
          "\[DoubleStruckCapitalC]P", True}}], ImageSize -> Automatic]}]}, 
    False]],
  DynamicModuleValues:>{}]], "ComputationInfo",
 CellChangeTimes->{3.59930179884542*^9},
 CellID->173168754],

Cell[BoxData[
 FormBox[
  RowBox[{"left", 
   OverscriptBox["<", 
    RowBox[{"1", ",", "2", ",", "3"}]], "right"}], 
  TheoremaForm]], "ComputationResult",
 CellChangeTimes->{3.599301798884368*^9},
 CellID->1565154760]
}, Open  ]],

Cell["\<\
Annotations can be nested arbitrarily deep:\
\>", "Text",
 CellChangeTimes->{{3.599301855721173*^9, 3.599301874855179*^9}},
 CellID->1200053661],

Cell[CellGroupData[{

Cell[BoxData[
 SuperscriptBox[
  OverscriptBox[
   SubscriptBox["\[CircleDot]", 
    RowBox[{"a", ",", "b", ",", "c"}]], 
   RowBox[{"1", ",", "2"}]], 
  RowBox[{
   RowBox[{
    TagBox["(",
     "AutoParentheses"], 
    TagBox["+",
     Identity], 
    TagBox[")",
     "AutoParentheses"]}], ",", 
   RowBox[{
    TagBox["(",
     "AutoParentheses"], 
    TagBox["-",
     Identity], 
    TagBox[")",
     "AutoParentheses"]}], ",", 
   RowBox[{
    TagBox["(",
     "AutoParentheses"], 
    TagBox["\[Times]",
     Identity], 
    TagBox[")",
     "AutoParentheses"]}]}]]], "Computation",
 CellChangeTimes->{{3.599301881673466*^9, 3.599301927930346*^9}},
 CellID->1503278322],

Cell[BoxData[
 DynamicModuleBox[{Typeset`var$$ = False}, 
  InterpretationBox[
   StyleBox[
    PaneSelectorBox[{False->GridBox[{
       {
        OpenerBox[Dynamic[Typeset`var$$],
         Appearance->Automatic,
         AutoAction->False,
         ContinuousAction->False,
         Enabled->Automatic], "\<\"\"\>"}
      },
      AutoDelete->False,
      BaselinePosition->{1, 1},
      GridBoxAlignment->{"Columns" -> {{Left}}},
      GridBoxBackground->{"Columns" -> {{Automatic}}},
      GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
      GridBoxSpacings->{"Columns" -> {{0.2}}, "Rows" -> {{0.5}}}], True->
     GridBox[{
       {
        OpenerBox[Dynamic[Typeset`var$$],
         Appearance->Automatic,
         AutoAction->False,
         ContinuousAction->False,
         Enabled->Automatic], "\<\"\"\>"},
       {"", 
        PaneBox[
         TagBox[GridBox[{
            {
             TagBox[
              DynamicModuleBox[{Typeset`var$$ = False}, 
               InterpretationBox[
                StyleBox[
                 PaneSelectorBox[{False->GridBox[{
                    {
                    OpenerBox[Dynamic[Typeset`var$$],
                    Appearance->Automatic,
                    AutoAction->False,
                    ContinuousAction->False,
                    Enabled->Automatic], 
                    
                    StyleBox["\<\"Knowledge used in computation\"\>", 
                    "CIContent",
                    StripOnInput->False]}
                   },
                   AutoDelete->False,
                   BaselinePosition->{1, 1},
                   GridBoxAlignment->{"Columns" -> {{Left}}},
                   GridBoxBackground->{"Columns" -> {{Automatic}}},
                   
                   GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
                   
                   GridBoxSpacings->{
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}], True->
                  GridBox[{
                    {
                    OpenerBox[Dynamic[Typeset`var$$],
                    Appearance->Automatic,
                    AutoAction->False,
                    ContinuousAction->False,
                    Enabled->Automatic], 
                    
                    StyleBox["\<\"Knowledge used in computation\"\>", 
                    "CIContent",
                    StripOnInput->False]},
                    {"", 
                    PaneBox[
                    StyleBox[
                    RowBox[{"{", "}"}], "CIContent",
                    StripOnInput->False],
                    ImageMargins->0]}
                   },
                   AutoDelete->False,
                   BaselinePosition->{1, 1},
                   GridBoxAlignment->{"Columns" -> {{Left}}},
                   GridBoxBackground->{"Columns" -> {{Automatic}}},
                   
                   GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
                   
                   GridBoxSpacings->{
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}]}, Dynamic[
                  Typeset`var$$],
                  Alignment->Automatic,
                  BaselinePosition->Baseline,
                  DefaultBaseStyle->"OpenerView",
                  ImageMargins->0,
                  ImageSize->Automatic],
                 Deployed->False,
                 StripOnInput->False],
                OpenerView[{
                  Style["Knowledge used in computation", "CIContent"], 
                  Style[{}, "CIContent"]}, False]],
               DynamicModuleValues:>Automatic],
              Setting[#, {0}]& ]},
            {
             TagBox[
              DynamicModuleBox[{Typeset`var$$ = False}, 
               InterpretationBox[
                StyleBox[
                 PaneSelectorBox[{False->GridBox[{
                    {
                    OpenerBox[Dynamic[Typeset`var$$],
                    Appearance->Automatic,
                    AutoAction->False,
                    ContinuousAction->False,
                    Enabled->Automatic], 
                    
                    StyleBox["\<\"Builtins used in computation\"\>", 
                    "CIContent",
                    StripOnInput->False]}
                   },
                   AutoDelete->False,
                   BaselinePosition->{1, 1},
                   GridBoxAlignment->{"Columns" -> {{Left}}},
                   GridBoxBackground->{"Columns" -> {{Automatic}}},
                   
                   GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
                   
                   GridBoxSpacings->{
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}], True->
                  GridBox[{
                    {
                    OpenerBox[Dynamic[Typeset`var$$],
                    Appearance->Automatic,
                    AutoAction->False,
                    ContinuousAction->False,
                    Enabled->Automatic], 
                    
                    StyleBox["\<\"Builtins used in computation\"\>", 
                    "CIContent",
                    StripOnInput->False]},
                    {"", 
                    PaneBox[
                    StyleBox[
                    RowBox[{"{", 
                    
                    RowBox[{"\<\"AbsValue\"\>", ",", "\<\"And\"\>", 
                    ",", "\<\"AnElement\"\>", ",", "\<\"Append\"\>", 
                    ",", "\<\"Cardinality\"\>", 
                    ",", "\<\"CartesianProduct\"\>", 
                    ",", "\<\"CaseDistinction\"\>", 
                    ",", "\<\"Componentwise\"\>", ",", "\<\"Delete\"\>", 
                    ",", "\<\"DeleteAt\"\>", ",", "\<\"Difference\"\>", 
                    ",", "\<\"Do\"\>", ",", "\<\"Equal\"\>", 
                    ",", "\<\"Exists\"\>", ",", "\<\"Factorial\"\>", 
                    ",", "\<\"For\"\>", ",", "\<\"Forall\"\>", 
                    ",", "\<\"Greater\"\>", ",", "\<\"GreaterEqual\"\>", 
                    ",", "\<\"Iff\"\>", ",", "\<\"Implies\"\>", 
                    ",", "\<\"Insert\"\>", ",", "\<\"IntegerInterval\"\>", 
                    ",", "\<\"IntegerQuotientRing\"\>", 
                    ",", "\<\"IntegerQuotientRingPM\"\>", 
                    ",", "\<\"Intersection\"\>", 
                    ",", "\<\"IntersectionOf\"\>", ",", "\<\"isComplex\"\>", 
                    ",", "\<\"isComplexP\"\>", ",", "\<\"IsElement\"\>", 
                    ",", "\<\"isInteger\"\>", ",", "\<\"isRational\"\>", 
                    ",", "\<\"isReal\"\>", ",", "\<\"isSet\"\>", 
                    ",", "\<\"isTuple\"\>", ",", "\<\"Join\"\>", 
                    ",", "\<\"Length\"\>", ",", "\<\"Less\"\>", 
                    ",", "\<\"LessEqual\"\>", ",", "\<\"Let\"\>", 
                    ",", "\<\"Max\"\>", ",", "\<\"MaximumElementSet\"\>", 
                    ",", "\<\"MaximumOf\"\>", ",", "\<\"Min\"\>", 
                    ",", "\<\"MinimumElementSet\"\>", 
                    ",", "\<\"MinimumOf\"\>", ",", "\<\"Minus\"\>", 
                    ",", "\<\"Module\"\>", ",", "\<\"MultInverse\"\>", 
                    ",", "\<\"Not\"\>", ",", "\<\"Or\"\>", 
                    ",", "\<\"Plus\"\>", ",", "\<\"Power\"\>", 
                    ",", "\<\"PowerSet\"\>", ",", "\<\"Prepend\"\>", 
                    ",", "\<\"ProductOf\"\>", ",", "\<\"Radical\"\>", 
                    ",", "\<\"RationalInterval\"\>", 
                    ",", "\<\"RealInterval\"\>", ",", "\<\"Replace\"\>", 
                    ",", "\<\"ReplacePart\"\>", ",", "\<\"SetEqual\"\>", 
                    ",", "\<\"Subscript\"\>", ",", "\<\"Subset\"\>", 
                    ",", "\<\"SubsetEqual\"\>", ",", "\<\"SumOf\"\>", 
                    ",", "\<\"Superset\"\>", ",", "\<\"SupersetEqual\"\>", 
                    ",", "\<\"Switch\"\>", ",", "\<\"SymmetricDifference\"\>",
                     ",", "\<\"Times\"\>", ",", "\<\"TupleEqual\"\>", 
                    ",", "\<\"Union\"\>", ",", "\<\"UnionOf\"\>", 
                    ",", "\<\"Which\"\>", ",", "\<\"While\"\>", 
                    ",", "\<\"\[DoubleStruckCapitalC]\"\>", 
                    ",", "\<\"\[DoubleStruckCapitalC]P\"\>"}], "}"}], 
                    "CIContent",
                    StripOnInput->False],
                    ImageMargins->0]}
                   },
                   AutoDelete->False,
                   BaselinePosition->{1, 1},
                   GridBoxAlignment->{"Columns" -> {{Left}}},
                   GridBoxBackground->{"Columns" -> {{Automatic}}},
                   
                   GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
                   
                   GridBoxSpacings->{
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}]}, Dynamic[
                  Typeset`var$$],
                  Alignment->Automatic,
                  BaselinePosition->Baseline,
                  DefaultBaseStyle->"OpenerView",
                  ImageMargins->0,
                  ImageSize->Automatic],
                 Deployed->False,
                 StripOnInput->False],
                OpenerView[{
                  Style["Builtins used in computation", "CIContent"], 
                  
                  Style[{"AbsValue", "And", "AnElement", "Append", 
                    "Cardinality", "CartesianProduct", "CaseDistinction", 
                    "Componentwise", "Delete", "DeleteAt", "Difference", "Do",
                     "Equal", "Exists", "Factorial", "For", "Forall", 
                    "Greater", "GreaterEqual", "Iff", "Implies", "Insert", 
                    "IntegerInterval", "IntegerQuotientRing", 
                    "IntegerQuotientRingPM", "Intersection", "IntersectionOf",
                     "isComplex", "isComplexP", "IsElement", "isInteger", 
                    "isRational", "isReal", "isSet", "isTuple", "Join", 
                    "Length", "Less", "LessEqual", "Let", "Max", 
                    "MaximumElementSet", "MaximumOf", "Min", 
                    "MinimumElementSet", "MinimumOf", "Minus", "Module", 
                    "MultInverse", "Not", "Or", "Plus", "Power", "PowerSet", 
                    "Prepend", "ProductOf", "Radical", "RationalInterval", 
                    "RealInterval", "Replace", "ReplacePart", "SetEqual", 
                    "Subscript", "Subset", "SubsetEqual", "SumOf", "Superset",
                     "SupersetEqual", "Switch", "SymmetricDifference", 
                    "Times", "TupleEqual", "Union", "UnionOf", "Which", 
                    "While", "\[DoubleStruckCapitalC]", 
                    "\[DoubleStruckCapitalC]P"}, "CIContent"]}, False]],
               DynamicModuleValues:>Automatic],
              Setting[#, {0}]& ]},
            {
             ButtonBox["\<\"Restore environment\"\>",
              Appearance->Automatic,
              
              ButtonFunction:>
               Theorema`Interface`GUI`Private`setCompEnv[{}, {{
                 "AbsValue", True}, {"And", True}, {"AnElement", True}, {
                 "Append", True}, {"Cardinality", True}, {
                 "CartesianProduct", True}, {"CaseDistinction", True}, {
                 "Componentwise", True}, {"Delete", True}, {
                 "DeleteAt", True}, {"Difference", True}, {"Do", True}, {
                 "Equal", True}, {"Exists", True}, {"Factorial", True}, {
                 "For", True}, {"Forall", True}, {"Greater", True}, {
                 "GreaterEqual", True}, {"Iff", True}, {"Implies", True}, {
                 "Insert", True}, {"IntegerInterval", True}, {
                 "IntegerQuotientRing", True}, {
                 "IntegerQuotientRingPM", True}, {"Intersection", True}, {
                 "IntersectionOf", True}, {"isComplex", True}, {
                 "isComplexP", True}, {"IsElement", True}, {
                 "isInteger", True}, {"isRational", True}, {"isReal", True}, {
                 "isSet", True}, {"isTuple", True}, {"Join", True}, {
                 "Length", True}, {"Less", True}, {"LessEqual", True}, {
                 "Let", True}, {"Max", True}, {"MaximumElementSet", True}, {
                 "MaximumOf", True}, {"Min", True}, {
                 "MinimumElementSet", True}, {"MinimumOf", True}, {
                 "Minus", True}, {"Module", True}, {"MultInverse", True}, {
                 "Not", True}, {"Or", True}, {"Plus", True}, {
                 "Power", True}, {"PowerSet", True}, {"Prepend", True}, {
                 "ProductOf", True}, {"Radical", True}, {
                 "RationalInterval", True}, {"RealInterval", True}, {
                 "Replace", True}, {"ReplacePart", True}, {
                 "SetEqual", True}, {"Subscript", True}, {"Subset", True}, {
                 "SubsetEqual", True}, {"SumOf", True}, {"Superset", True}, {
                 "SupersetEqual", True}, {"Switch", True}, {
                 "SymmetricDifference", True}, {"Times", True}, {
                 "TupleEqual", True}, {"Union", True}, {"UnionOf", True}, {
                 "Which", True}, {"While", True}, {
                 "\[DoubleStruckCapitalC]", True}, {
                 "\[DoubleStruckCapitalC]P", True}}],
              Evaluator->Automatic,
              ImageSize->Automatic,
              Method->"Preemptive"]}
           },
           DefaultBaseStyle->"Column",
           GridBoxAlignment->{"Columns" -> {{Left}}},
           
           GridBoxItemSize->{
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
          "Column"],
         ImageMargins->0]}
      },
      AutoDelete->False,
      BaselinePosition->{1, 1},
      GridBoxAlignment->{"Columns" -> {{Left}}},
      GridBoxBackground->{"Columns" -> {{Automatic}}},
      GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
      GridBoxSpacings->{"Columns" -> {{0.2}}, "Rows" -> {{0.5}}}]}, Dynamic[
     Typeset`var$$],
     Alignment->Automatic,
     BaselinePosition->Baseline,
     DefaultBaseStyle->"OpenerView",
     ImageMargins->0,
     ImageSize->Automatic],
    Deployed->False,
    StripOnInput->False],
   OpenerView[{"", 
     Column[{
       OpenerView[{
         Style["Knowledge used in computation", "CIContent"], 
         Style[{}, "CIContent"]}], 
       OpenerView[{
         Style["Builtins used in computation", "CIContent"], 
         Style[{
          "AbsValue", "And", "AnElement", "Append", "Cardinality", 
           "CartesianProduct", "CaseDistinction", "Componentwise", "Delete", 
           "DeleteAt", "Difference", "Do", "Equal", "Exists", "Factorial", 
           "For", "Forall", "Greater", "GreaterEqual", "Iff", "Implies", 
           "Insert", "IntegerInterval", "IntegerQuotientRing", 
           "IntegerQuotientRingPM", "Intersection", "IntersectionOf", 
           "isComplex", "isComplexP", "IsElement", "isInteger", "isRational", 
           "isReal", "isSet", "isTuple", "Join", "Length", "Less", 
           "LessEqual", "Let", "Max", "MaximumElementSet", "MaximumOf", "Min",
            "MinimumElementSet", "MinimumOf", "Minus", "Module", 
           "MultInverse", "Not", "Or", "Plus", "Power", "PowerSet", "Prepend",
            "ProductOf", "Radical", "RationalInterval", "RealInterval", 
           "Replace", "ReplacePart", "SetEqual", "Subscript", "Subset", 
           "SubsetEqual", "SumOf", "Superset", "SupersetEqual", "Switch", 
           "SymmetricDifference", "Times", "TupleEqual", "Union", "UnionOf", 
           "Which", "While", "\[DoubleStruckCapitalC]", 
           "\[DoubleStruckCapitalC]P"}, "CIContent"]}], 
       Button["Restore environment", 
        Theorema`Interface`GUI`Private`setCompEnv[{}, {{"AbsValue", True}, {
          "And", True}, {"AnElement", True}, {"Append", True}, {
          "Cardinality", True}, {"CartesianProduct", True}, {
          "CaseDistinction", True}, {"Componentwise", True}, {
          "Delete", True}, {"DeleteAt", True}, {"Difference", True}, {
          "Do", True}, {"Equal", True}, {"Exists", True}, {
          "Factorial", True}, {"For", True}, {"Forall", True}, {
          "Greater", True}, {"GreaterEqual", True}, {"Iff", True}, {
          "Implies", True}, {"Insert", True}, {"IntegerInterval", True}, {
          "IntegerQuotientRing", True}, {"IntegerQuotientRingPM", True}, {
          "Intersection", True}, {"IntersectionOf", True}, {
          "isComplex", True}, {"isComplexP", True}, {"IsElement", True}, {
          "isInteger", True}, {"isRational", True}, {"isReal", True}, {
          "isSet", True}, {"isTuple", True}, {"Join", True}, {
          "Length", True}, {"Less", True}, {"LessEqual", True}, {
          "Let", True}, {"Max", True}, {"MaximumElementSet", True}, {
          "MaximumOf", True}, {"Min", True}, {"MinimumElementSet", True}, {
          "MinimumOf", True}, {"Minus", True}, {"Module", True}, {
          "MultInverse", True}, {"Not", True}, {"Or", True}, {"Plus", True}, {
          "Power", True}, {"PowerSet", True}, {"Prepend", True}, {
          "ProductOf", True}, {"Radical", True}, {"RationalInterval", True}, {
          "RealInterval", True}, {"Replace", True}, {"ReplacePart", True}, {
          "SetEqual", True}, {"Subscript", True}, {"Subset", True}, {
          "SubsetEqual", True}, {"SumOf", True}, {"Superset", True}, {
          "SupersetEqual", True}, {"Switch", True}, {
          "SymmetricDifference", True}, {"Times", True}, {
          "TupleEqual", True}, {"Union", True}, {"UnionOf", True}, {
          "Which", True}, {"While", True}, {
          "\[DoubleStruckCapitalC]", True}, {
          "\[DoubleStruckCapitalC]P", True}}], ImageSize -> Automatic]}]}, 
    False]],
  DynamicModuleValues:>{}]], "ComputationInfo",
 CellChangeTimes->{3.599301928687362*^9},
 CellID->1938319905],

Cell[BoxData[
 FormBox[
  SuperscriptBox[
   OverscriptBox[
    SubscriptBox["\[CircleDot]", 
     RowBox[{"a", ",", "b", ",", "c"}]], 
    RowBox[{"1", ",", "2"}]], 
   RowBox[{"+", ",", "-", ",", "*"}]], TheoremaForm]], "ComputationResult",
 CellChangeTimes->{3.599301928725976*^9},
 CellID->2115659732]
}, Open  ]],

Cell[TextData[{
 StyleBox["Attention",
  FontWeight->"Bold"],
 "! Annotation only works for operator symbols, not for all symbols! In \
particular, the following is ",
 StyleBox["no",
  FontWeight->"Bold"],
 " annotated operator (although it looks like one):"
}], "Text",
 CellChangeTimes->{{3.599302143509157*^9, 3.599302174860947*^9}, {
  3.599302208774674*^9, 3.599302217117207*^9}},
 CellID->812755896],

Cell[CellGroupData[{

Cell[BoxData[
 OverscriptBox[
  SubscriptBox["f", 
   RowBox[{"1", ",", "2"}]], 
  RowBox[{"a", ",", "b"}]]], "Computation",
 CellChangeTimes->{{3.59930218029499*^9, 3.599302192907537*^9}},
 CellID->2103096200],

Cell[BoxData[
 DynamicModuleBox[{Typeset`var$$ = False}, 
  InterpretationBox[
   StyleBox[
    PaneSelectorBox[{False->GridBox[{
       {
        OpenerBox[Dynamic[Typeset`var$$],
         Appearance->Automatic,
         AutoAction->False,
         ContinuousAction->False,
         Enabled->Automatic], "\<\"\"\>"}
      },
      AutoDelete->False,
      BaselinePosition->{1, 1},
      GridBoxAlignment->{"Columns" -> {{Left}}},
      GridBoxBackground->{"Columns" -> {{Automatic}}},
      GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
      GridBoxSpacings->{"Columns" -> {{0.2}}, "Rows" -> {{0.5}}}], True->
     GridBox[{
       {
        OpenerBox[Dynamic[Typeset`var$$],
         Appearance->Automatic,
         AutoAction->False,
         ContinuousAction->False,
         Enabled->Automatic], "\<\"\"\>"},
       {"", 
        PaneBox[
         TagBox[GridBox[{
            {
             TagBox[
              DynamicModuleBox[{Typeset`var$$ = False}, 
               InterpretationBox[
                StyleBox[
                 PaneSelectorBox[{False->GridBox[{
                    {
                    OpenerBox[Dynamic[Typeset`var$$],
                    Appearance->Automatic,
                    AutoAction->False,
                    ContinuousAction->False,
                    Enabled->Automatic], 
                    
                    StyleBox["\<\"Knowledge used in computation\"\>", 
                    "CIContent",
                    StripOnInput->False]}
                   },
                   AutoDelete->False,
                   BaselinePosition->{1, 1},
                   GridBoxAlignment->{"Columns" -> {{Left}}},
                   GridBoxBackground->{"Columns" -> {{Automatic}}},
                   
                   GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
                   
                   GridBoxSpacings->{
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}], True->
                  GridBox[{
                    {
                    OpenerBox[Dynamic[Typeset`var$$],
                    Appearance->Automatic,
                    AutoAction->False,
                    ContinuousAction->False,
                    Enabled->Automatic], 
                    
                    StyleBox["\<\"Knowledge used in computation\"\>", 
                    "CIContent",
                    StripOnInput->False]},
                    {"", 
                    PaneBox[
                    StyleBox[
                    RowBox[{"{", "}"}], "CIContent",
                    StripOnInput->False],
                    ImageMargins->0]}
                   },
                   AutoDelete->False,
                   BaselinePosition->{1, 1},
                   GridBoxAlignment->{"Columns" -> {{Left}}},
                   GridBoxBackground->{"Columns" -> {{Automatic}}},
                   
                   GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
                   
                   GridBoxSpacings->{
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}]}, Dynamic[
                  Typeset`var$$],
                  Alignment->Automatic,
                  BaselinePosition->Baseline,
                  DefaultBaseStyle->"OpenerView",
                  ImageMargins->0,
                  ImageSize->Automatic],
                 Deployed->False,
                 StripOnInput->False],
                OpenerView[{
                  Style["Knowledge used in computation", "CIContent"], 
                  Style[{}, "CIContent"]}, False]],
               DynamicModuleValues:>Automatic],
              Setting[#, {0}]& ]},
            {
             TagBox[
              DynamicModuleBox[{Typeset`var$$ = False}, 
               InterpretationBox[
                StyleBox[
                 PaneSelectorBox[{False->GridBox[{
                    {
                    OpenerBox[Dynamic[Typeset`var$$],
                    Appearance->Automatic,
                    AutoAction->False,
                    ContinuousAction->False,
                    Enabled->Automatic], 
                    
                    StyleBox["\<\"Builtins used in computation\"\>", 
                    "CIContent",
                    StripOnInput->False]}
                   },
                   AutoDelete->False,
                   BaselinePosition->{1, 1},
                   GridBoxAlignment->{"Columns" -> {{Left}}},
                   GridBoxBackground->{"Columns" -> {{Automatic}}},
                   
                   GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
                   
                   GridBoxSpacings->{
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}], True->
                  GridBox[{
                    {
                    OpenerBox[Dynamic[Typeset`var$$],
                    Appearance->Automatic,
                    AutoAction->False,
                    ContinuousAction->False,
                    Enabled->Automatic], 
                    
                    StyleBox["\<\"Builtins used in computation\"\>", 
                    "CIContent",
                    StripOnInput->False]},
                    {"", 
                    PaneBox[
                    StyleBox[
                    RowBox[{"{", 
                    
                    RowBox[{"\<\"AbsValue\"\>", ",", "\<\"And\"\>", 
                    ",", "\<\"AnElement\"\>", ",", "\<\"Append\"\>", 
                    ",", "\<\"Cardinality\"\>", 
                    ",", "\<\"CartesianProduct\"\>", 
                    ",", "\<\"CaseDistinction\"\>", 
                    ",", "\<\"Componentwise\"\>", ",", "\<\"Delete\"\>", 
                    ",", "\<\"DeleteAt\"\>", ",", "\<\"Difference\"\>", 
                    ",", "\<\"Do\"\>", ",", "\<\"Equal\"\>", 
                    ",", "\<\"Exists\"\>", ",", "\<\"Factorial\"\>", 
                    ",", "\<\"For\"\>", ",", "\<\"Forall\"\>", 
                    ",", "\<\"Greater\"\>", ",", "\<\"GreaterEqual\"\>", 
                    ",", "\<\"Iff\"\>", ",", "\<\"Implies\"\>", 
                    ",", "\<\"Insert\"\>", ",", "\<\"IntegerInterval\"\>", 
                    ",", "\<\"IntegerQuotientRing\"\>", 
                    ",", "\<\"IntegerQuotientRingPM\"\>", 
                    ",", "\<\"Intersection\"\>", 
                    ",", "\<\"IntersectionOf\"\>", ",", "\<\"isComplex\"\>", 
                    ",", "\<\"isComplexP\"\>", ",", "\<\"IsElement\"\>", 
                    ",", "\<\"isInteger\"\>", ",", "\<\"isRational\"\>", 
                    ",", "\<\"isReal\"\>", ",", "\<\"isSet\"\>", 
                    ",", "\<\"isTuple\"\>", ",", "\<\"Join\"\>", 
                    ",", "\<\"Length\"\>", ",", "\<\"Less\"\>", 
                    ",", "\<\"LessEqual\"\>", ",", "\<\"Let\"\>", 
                    ",", "\<\"Max\"\>", ",", "\<\"MaximumElementSet\"\>", 
                    ",", "\<\"MaximumOf\"\>", ",", "\<\"Min\"\>", 
                    ",", "\<\"MinimumElementSet\"\>", 
                    ",", "\<\"MinimumOf\"\>", ",", "\<\"Minus\"\>", 
                    ",", "\<\"Module\"\>", ",", "\<\"MultInverse\"\>", 
                    ",", "\<\"Not\"\>", ",", "\<\"Or\"\>", 
                    ",", "\<\"Plus\"\>", ",", "\<\"Power\"\>", 
                    ",", "\<\"PowerSet\"\>", ",", "\<\"Prepend\"\>", 
                    ",", "\<\"ProductOf\"\>", ",", "\<\"Radical\"\>", 
                    ",", "\<\"RationalInterval\"\>", 
                    ",", "\<\"RealInterval\"\>", ",", "\<\"Replace\"\>", 
                    ",", "\<\"ReplacePart\"\>", ",", "\<\"SetEqual\"\>", 
                    ",", "\<\"Subscript\"\>", ",", "\<\"Subset\"\>", 
                    ",", "\<\"SubsetEqual\"\>", ",", "\<\"SumOf\"\>", 
                    ",", "\<\"Superset\"\>", ",", "\<\"SupersetEqual\"\>", 
                    ",", "\<\"Switch\"\>", ",", "\<\"SymmetricDifference\"\>",
                     ",", "\<\"Times\"\>", ",", "\<\"TupleEqual\"\>", 
                    ",", "\<\"Union\"\>", ",", "\<\"UnionOf\"\>", 
                    ",", "\<\"Which\"\>", ",", "\<\"While\"\>", 
                    ",", "\<\"\[DoubleStruckCapitalC]\"\>", 
                    ",", "\<\"\[DoubleStruckCapitalC]P\"\>"}], "}"}], 
                    "CIContent",
                    StripOnInput->False],
                    ImageMargins->0]}
                   },
                   AutoDelete->False,
                   BaselinePosition->{1, 1},
                   GridBoxAlignment->{"Columns" -> {{Left}}},
                   GridBoxBackground->{"Columns" -> {{Automatic}}},
                   
                   GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
                   
                   GridBoxSpacings->{
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}]}, Dynamic[
                  Typeset`var$$],
                  Alignment->Automatic,
                  BaselinePosition->Baseline,
                  DefaultBaseStyle->"OpenerView",
                  ImageMargins->0,
                  ImageSize->Automatic],
                 Deployed->False,
                 StripOnInput->False],
                OpenerView[{
                  Style["Builtins used in computation", "CIContent"], 
                  
                  Style[{"AbsValue", "And", "AnElement", "Append", 
                    "Cardinality", "CartesianProduct", "CaseDistinction", 
                    "Componentwise", "Delete", "DeleteAt", "Difference", "Do",
                     "Equal", "Exists", "Factorial", "For", "Forall", 
                    "Greater", "GreaterEqual", "Iff", "Implies", "Insert", 
                    "IntegerInterval", "IntegerQuotientRing", 
                    "IntegerQuotientRingPM", "Intersection", "IntersectionOf",
                     "isComplex", "isComplexP", "IsElement", "isInteger", 
                    "isRational", "isReal", "isSet", "isTuple", "Join", 
                    "Length", "Less", "LessEqual", "Let", "Max", 
                    "MaximumElementSet", "MaximumOf", "Min", 
                    "MinimumElementSet", "MinimumOf", "Minus", "Module", 
                    "MultInverse", "Not", "Or", "Plus", "Power", "PowerSet", 
                    "Prepend", "ProductOf", "Radical", "RationalInterval", 
                    "RealInterval", "Replace", "ReplacePart", "SetEqual", 
                    "Subscript", "Subset", "SubsetEqual", "SumOf", "Superset",
                     "SupersetEqual", "Switch", "SymmetricDifference", 
                    "Times", "TupleEqual", "Union", "UnionOf", "Which", 
                    "While", "\[DoubleStruckCapitalC]", 
                    "\[DoubleStruckCapitalC]P"}, "CIContent"]}, False]],
               DynamicModuleValues:>Automatic],
              Setting[#, {0}]& ]},
            {
             ButtonBox["\<\"Restore environment\"\>",
              Appearance->Automatic,
              
              ButtonFunction:>
               Theorema`Interface`GUI`Private`setCompEnv[{}, {{
                 "AbsValue", True}, {"And", True}, {"AnElement", True}, {
                 "Append", True}, {"Cardinality", True}, {
                 "CartesianProduct", True}, {"CaseDistinction", True}, {
                 "Componentwise", True}, {"Delete", True}, {
                 "DeleteAt", True}, {"Difference", True}, {"Do", True}, {
                 "Equal", True}, {"Exists", True}, {"Factorial", True}, {
                 "For", True}, {"Forall", True}, {"Greater", True}, {
                 "GreaterEqual", True}, {"Iff", True}, {"Implies", True}, {
                 "Insert", True}, {"IntegerInterval", True}, {
                 "IntegerQuotientRing", True}, {
                 "IntegerQuotientRingPM", True}, {"Intersection", True}, {
                 "IntersectionOf", True}, {"isComplex", True}, {
                 "isComplexP", True}, {"IsElement", True}, {
                 "isInteger", True}, {"isRational", True}, {"isReal", True}, {
                 "isSet", True}, {"isTuple", True}, {"Join", True}, {
                 "Length", True}, {"Less", True}, {"LessEqual", True}, {
                 "Let", True}, {"Max", True}, {"MaximumElementSet", True}, {
                 "MaximumOf", True}, {"Min", True}, {
                 "MinimumElementSet", True}, {"MinimumOf", True}, {
                 "Minus", True}, {"Module", True}, {"MultInverse", True}, {
                 "Not", True}, {"Or", True}, {"Plus", True}, {
                 "Power", True}, {"PowerSet", True}, {"Prepend", True}, {
                 "ProductOf", True}, {"Radical", True}, {
                 "RationalInterval", True}, {"RealInterval", True}, {
                 "Replace", True}, {"ReplacePart", True}, {
                 "SetEqual", True}, {"Subscript", True}, {"Subset", True}, {
                 "SubsetEqual", True}, {"SumOf", True}, {"Superset", True}, {
                 "SupersetEqual", True}, {"Switch", True}, {
                 "SymmetricDifference", True}, {"Times", True}, {
                 "TupleEqual", True}, {"Union", True}, {"UnionOf", True}, {
                 "Which", True}, {"While", True}, {
                 "\[DoubleStruckCapitalC]", True}, {
                 "\[DoubleStruckCapitalC]P", True}}],
              Evaluator->Automatic,
              ImageSize->Automatic,
              Method->"Preemptive"]}
           },
           DefaultBaseStyle->"Column",
           GridBoxAlignment->{"Columns" -> {{Left}}},
           
           GridBoxItemSize->{
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
          "Column"],
         ImageMargins->0]}
      },
      AutoDelete->False,
      BaselinePosition->{1, 1},
      GridBoxAlignment->{"Columns" -> {{Left}}},
      GridBoxBackground->{"Columns" -> {{Automatic}}},
      GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
      GridBoxSpacings->{"Columns" -> {{0.2}}, "Rows" -> {{0.5}}}]}, Dynamic[
     Typeset`var$$],
     Alignment->Automatic,
     BaselinePosition->Baseline,
     DefaultBaseStyle->"OpenerView",
     ImageMargins->0,
     ImageSize->Automatic],
    Deployed->False,
    StripOnInput->False],
   OpenerView[{"", 
     Column[{
       OpenerView[{
         Style["Knowledge used in computation", "CIContent"], 
         Style[{}, "CIContent"]}], 
       OpenerView[{
         Style["Builtins used in computation", "CIContent"], 
         Style[{
          "AbsValue", "And", "AnElement", "Append", "Cardinality", 
           "CartesianProduct", "CaseDistinction", "Componentwise", "Delete", 
           "DeleteAt", "Difference", "Do", "Equal", "Exists", "Factorial", 
           "For", "Forall", "Greater", "GreaterEqual", "Iff", "Implies", 
           "Insert", "IntegerInterval", "IntegerQuotientRing", 
           "IntegerQuotientRingPM", "Intersection", "IntersectionOf", 
           "isComplex", "isComplexP", "IsElement", "isInteger", "isRational", 
           "isReal", "isSet", "isTuple", "Join", "Length", "Less", 
           "LessEqual", "Let", "Max", "MaximumElementSet", "MaximumOf", "Min",
            "MinimumElementSet", "MinimumOf", "Minus", "Module", 
           "MultInverse", "Not", "Or", "Plus", "Power", "PowerSet", "Prepend",
            "ProductOf", "Radical", "RationalInterval", "RealInterval", 
           "Replace", "ReplacePart", "SetEqual", "Subscript", "Subset", 
           "SubsetEqual", "SumOf", "Superset", "SupersetEqual", "Switch", 
           "SymmetricDifference", "Times", "TupleEqual", "Union", "UnionOf", 
           "Which", "While", "\[DoubleStruckCapitalC]", 
           "\[DoubleStruckCapitalC]P"}, "CIContent"]}], 
       Button["Restore environment", 
        Theorema`Interface`GUI`Private`setCompEnv[{}, {{"AbsValue", True}, {
          "And", True}, {"AnElement", True}, {"Append", True}, {
          "Cardinality", True}, {"CartesianProduct", True}, {
          "CaseDistinction", True}, {"Componentwise", True}, {
          "Delete", True}, {"DeleteAt", True}, {"Difference", True}, {
          "Do", True}, {"Equal", True}, {"Exists", True}, {
          "Factorial", True}, {"For", True}, {"Forall", True}, {
          "Greater", True}, {"GreaterEqual", True}, {"Iff", True}, {
          "Implies", True}, {"Insert", True}, {"IntegerInterval", True}, {
          "IntegerQuotientRing", True}, {"IntegerQuotientRingPM", True}, {
          "Intersection", True}, {"IntersectionOf", True}, {
          "isComplex", True}, {"isComplexP", True}, {"IsElement", True}, {
          "isInteger", True}, {"isRational", True}, {"isReal", True}, {
          "isSet", True}, {"isTuple", True}, {"Join", True}, {
          "Length", True}, {"Less", True}, {"LessEqual", True}, {
          "Let", True}, {"Max", True}, {"MaximumElementSet", True}, {
          "MaximumOf", True}, {"Min", True}, {"MinimumElementSet", True}, {
          "MinimumOf", True}, {"Minus", True}, {"Module", True}, {
          "MultInverse", True}, {"Not", True}, {"Or", True}, {"Plus", True}, {
          "Power", True}, {"PowerSet", True}, {"Prepend", True}, {
          "ProductOf", True}, {"Radical", True}, {"RationalInterval", True}, {
          "RealInterval", True}, {"Replace", True}, {"ReplacePart", True}, {
          "SetEqual", True}, {"Subscript", True}, {"Subset", True}, {
          "SubsetEqual", True}, {"SumOf", True}, {"Superset", True}, {
          "SupersetEqual", True}, {"Switch", True}, {
          "SymmetricDifference", True}, {"Times", True}, {
          "TupleEqual", True}, {"Union", True}, {"UnionOf", True}, {
          "Which", True}, {"While", True}, {
          "\[DoubleStruckCapitalC]", True}, {
          "\[DoubleStruckCapitalC]P", True}}], ImageSize -> Automatic]}]}, 
    False]],
  DynamicModuleValues:>{}]], "ComputationInfo",
 CellChangeTimes->{3.599302193621087*^9},
 CellID->144821867],

Cell[BoxData[
 OverscriptBox[
  RowBox[{
   TagBox["(",
    "AutoParentheses"], 
   SubscriptBox["f", 
    RowBox[{"1", ",", "2"}]], 
   TagBox[")",
    "AutoParentheses"]}], 
  RowBox[{"a", ",", "b"}]]], "ComputationResult",
 CellChangeTimes->{3.599302193676689*^9},
 CellID->1669621635]
}, Open  ]],

Cell[CellGroupData[{

Cell["Internal Representation", "Subsubsection",
 CellChangeTimes->{{3.599301946482949*^9, 3.599301952063996*^9}},
 CellID->1474555549],

Cell["\<\
Internally, annotated operators are represented as\
\>", "Text",
 CellChangeTimes->{{3.599301956622193*^9, 3.599302071478635*^9}, {
  3.599302118695158*^9, 3.599302123267325*^9}},
 CellID->687839967],

Cell[TextData[Cell[BoxData[
 FormBox[
  RowBox[{"Annotated$TM", "[", 
   RowBox[{"op", ",", 
    RowBox[{"SubScript$TM", "[", 
     RowBox[{
      SubscriptBox["s", "1"], ",", 
      SubscriptBox["s", "2"], ",", 
      SubscriptBox["s", "3"], ",", "..."}], "]"}], ",", 
    RowBox[{"SuperScript$TM", "[", 
     RowBox[{
      SubscriptBox["p", "1"], ",", 
      SubscriptBox["p", "2"], ",", 
      SubscriptBox["p", "3"], ",", "..."}], "]"}], ",", 
    RowBox[{"OverScript$TM", "[", 
     RowBox[{
      SubscriptBox["o", "1"], ",", 
      SubscriptBox["o", "2"], ",", 
      SubscriptBox["o", "3"], ",", "..."}], "]"}]}], "]"}], TraditionalForm]],
 
 FormatType->"TraditionalForm"]], "Text",
 CellChangeTimes->{3.599302075068911*^9},
 CellID->204276250],

Cell["\<\
Note the upper-case \[OpenCurlyDoubleQuote]S\[CloseCurlyDoubleQuote] in each \
\[OpenCurlyDoubleQuote]...Script$TM\[CloseCurlyDoubleQuote]! All script \
positions which are not used for annotations do not appear in the internal \
representation, i.e. the operator\
\>", "Text",
 CellChangeTimes->{{3.599302083645521*^9, 3.599302107611099*^9}, {
  3.599302247553839*^9, 3.599302292372905*^9}},
 CellID->1484144757],

Cell[CellGroupData[{

Cell[BoxData[
 SubscriptBox["+", "\[Rule]"]], "Computation",
 CellChangeTimes->{{3.599302294477143*^9, 3.599302298100354*^9}},
 CellID->213686899],

Cell[BoxData[
 DynamicModuleBox[{Typeset`var$$ = False}, 
  InterpretationBox[
   StyleBox[
    PaneSelectorBox[{False->GridBox[{
       {
        OpenerBox[Dynamic[Typeset`var$$],
         Appearance->Automatic,
         AutoAction->False,
         ContinuousAction->False,
         Enabled->Automatic], "\<\"\"\>"}
      },
      AutoDelete->False,
      BaselinePosition->{1, 1},
      GridBoxAlignment->{"Columns" -> {{Left}}},
      GridBoxBackground->{"Columns" -> {{Automatic}}},
      GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
      GridBoxSpacings->{"Columns" -> {{0.2}}, "Rows" -> {{0.5}}}], True->
     GridBox[{
       {
        OpenerBox[Dynamic[Typeset`var$$],
         Appearance->Automatic,
         AutoAction->False,
         ContinuousAction->False,
         Enabled->Automatic], "\<\"\"\>"},
       {"", 
        PaneBox[
         TagBox[GridBox[{
            {
             TagBox[
              DynamicModuleBox[{Typeset`var$$ = False}, 
               InterpretationBox[
                StyleBox[
                 PaneSelectorBox[{False->GridBox[{
                    {
                    OpenerBox[Dynamic[Typeset`var$$],
                    Appearance->Automatic,
                    AutoAction->False,
                    ContinuousAction->False,
                    Enabled->Automatic], 
                    
                    StyleBox["\<\"Knowledge used in computation\"\>", 
                    "CIContent",
                    StripOnInput->False]}
                   },
                   AutoDelete->False,
                   BaselinePosition->{1, 1},
                   GridBoxAlignment->{"Columns" -> {{Left}}},
                   GridBoxBackground->{"Columns" -> {{Automatic}}},
                   
                   GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
                   
                   GridBoxSpacings->{
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}], True->
                  GridBox[{
                    {
                    OpenerBox[Dynamic[Typeset`var$$],
                    Appearance->Automatic,
                    AutoAction->False,
                    ContinuousAction->False,
                    Enabled->Automatic], 
                    
                    StyleBox["\<\"Knowledge used in computation\"\>", 
                    "CIContent",
                    StripOnInput->False]},
                    {"", 
                    PaneBox[
                    StyleBox[
                    RowBox[{"{", "}"}], "CIContent",
                    StripOnInput->False],
                    ImageMargins->0]}
                   },
                   AutoDelete->False,
                   BaselinePosition->{1, 1},
                   GridBoxAlignment->{"Columns" -> {{Left}}},
                   GridBoxBackground->{"Columns" -> {{Automatic}}},
                   
                   GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
                   
                   GridBoxSpacings->{
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}]}, Dynamic[
                  Typeset`var$$],
                  Alignment->Automatic,
                  BaselinePosition->Baseline,
                  DefaultBaseStyle->"OpenerView",
                  ImageMargins->0,
                  ImageSize->Automatic],
                 Deployed->False,
                 StripOnInput->False],
                OpenerView[{
                  Style["Knowledge used in computation", "CIContent"], 
                  Style[{}, "CIContent"]}, False]],
               DynamicModuleValues:>Automatic],
              Setting[#, {0}]& ]},
            {
             TagBox[
              DynamicModuleBox[{Typeset`var$$ = False}, 
               InterpretationBox[
                StyleBox[
                 PaneSelectorBox[{False->GridBox[{
                    {
                    OpenerBox[Dynamic[Typeset`var$$],
                    Appearance->Automatic,
                    AutoAction->False,
                    ContinuousAction->False,
                    Enabled->Automatic], 
                    
                    StyleBox["\<\"Builtins used in computation\"\>", 
                    "CIContent",
                    StripOnInput->False]}
                   },
                   AutoDelete->False,
                   BaselinePosition->{1, 1},
                   GridBoxAlignment->{"Columns" -> {{Left}}},
                   GridBoxBackground->{"Columns" -> {{Automatic}}},
                   
                   GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
                   
                   GridBoxSpacings->{
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}], True->
                  GridBox[{
                    {
                    OpenerBox[Dynamic[Typeset`var$$],
                    Appearance->Automatic,
                    AutoAction->False,
                    ContinuousAction->False,
                    Enabled->Automatic], 
                    
                    StyleBox["\<\"Builtins used in computation\"\>", 
                    "CIContent",
                    StripOnInput->False]},
                    {"", 
                    PaneBox[
                    StyleBox[
                    RowBox[{"{", 
                    
                    RowBox[{"\<\"AbsValue\"\>", ",", "\<\"And\"\>", 
                    ",", "\<\"AnElement\"\>", ",", "\<\"Append\"\>", 
                    ",", "\<\"Cardinality\"\>", 
                    ",", "\<\"CartesianProduct\"\>", 
                    ",", "\<\"CaseDistinction\"\>", 
                    ",", "\<\"Componentwise\"\>", ",", "\<\"Delete\"\>", 
                    ",", "\<\"DeleteAt\"\>", ",", "\<\"Difference\"\>", 
                    ",", "\<\"Do\"\>", ",", "\<\"Equal\"\>", 
                    ",", "\<\"Exists\"\>", ",", "\<\"Factorial\"\>", 
                    ",", "\<\"For\"\>", ",", "\<\"Forall\"\>", 
                    ",", "\<\"Greater\"\>", ",", "\<\"GreaterEqual\"\>", 
                    ",", "\<\"Iff\"\>", ",", "\<\"Implies\"\>", 
                    ",", "\<\"Insert\"\>", ",", "\<\"IntegerInterval\"\>", 
                    ",", "\<\"IntegerQuotientRing\"\>", 
                    ",", "\<\"IntegerQuotientRingPM\"\>", 
                    ",", "\<\"Intersection\"\>", 
                    ",", "\<\"IntersectionOf\"\>", ",", "\<\"isComplex\"\>", 
                    ",", "\<\"isComplexP\"\>", ",", "\<\"IsElement\"\>", 
                    ",", "\<\"isInteger\"\>", ",", "\<\"isRational\"\>", 
                    ",", "\<\"isReal\"\>", ",", "\<\"isSet\"\>", 
                    ",", "\<\"isTuple\"\>", ",", "\<\"Join\"\>", 
                    ",", "\<\"Length\"\>", ",", "\<\"Less\"\>", 
                    ",", "\<\"LessEqual\"\>", ",", "\<\"Let\"\>", 
                    ",", "\<\"Max\"\>", ",", "\<\"MaximumElementSet\"\>", 
                    ",", "\<\"MaximumOf\"\>", ",", "\<\"Min\"\>", 
                    ",", "\<\"MinimumElementSet\"\>", 
                    ",", "\<\"MinimumOf\"\>", ",", "\<\"Minus\"\>", 
                    ",", "\<\"Module\"\>", ",", "\<\"MultInverse\"\>", 
                    ",", "\<\"Not\"\>", ",", "\<\"Or\"\>", 
                    ",", "\<\"Plus\"\>", ",", "\<\"Power\"\>", 
                    ",", "\<\"PowerSet\"\>", ",", "\<\"Prepend\"\>", 
                    ",", "\<\"ProductOf\"\>", ",", "\<\"Radical\"\>", 
                    ",", "\<\"RationalInterval\"\>", 
                    ",", "\<\"RealInterval\"\>", ",", "\<\"Replace\"\>", 
                    ",", "\<\"ReplacePart\"\>", ",", "\<\"SetEqual\"\>", 
                    ",", "\<\"Subscript\"\>", ",", "\<\"Subset\"\>", 
                    ",", "\<\"SubsetEqual\"\>", ",", "\<\"SumOf\"\>", 
                    ",", "\<\"Superset\"\>", ",", "\<\"SupersetEqual\"\>", 
                    ",", "\<\"Switch\"\>", ",", "\<\"SymmetricDifference\"\>",
                     ",", "\<\"Times\"\>", ",", "\<\"TupleEqual\"\>", 
                    ",", "\<\"Union\"\>", ",", "\<\"UnionOf\"\>", 
                    ",", "\<\"Which\"\>", ",", "\<\"While\"\>", 
                    ",", "\<\"\[DoubleStruckCapitalC]\"\>", 
                    ",", "\<\"\[DoubleStruckCapitalC]P\"\>"}], "}"}], 
                    "CIContent",
                    StripOnInput->False],
                    ImageMargins->0]}
                   },
                   AutoDelete->False,
                   BaselinePosition->{1, 1},
                   GridBoxAlignment->{"Columns" -> {{Left}}},
                   GridBoxBackground->{"Columns" -> {{Automatic}}},
                   
                   GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
                   
                   GridBoxSpacings->{
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}]}, Dynamic[
                  Typeset`var$$],
                  Alignment->Automatic,
                  BaselinePosition->Baseline,
                  DefaultBaseStyle->"OpenerView",
                  ImageMargins->0,
                  ImageSize->Automatic],
                 Deployed->False,
                 StripOnInput->False],
                OpenerView[{
                  Style["Builtins used in computation", "CIContent"], 
                  
                  Style[{"AbsValue", "And", "AnElement", "Append", 
                    "Cardinality", "CartesianProduct", "CaseDistinction", 
                    "Componentwise", "Delete", "DeleteAt", "Difference", "Do",
                     "Equal", "Exists", "Factorial", "For", "Forall", 
                    "Greater", "GreaterEqual", "Iff", "Implies", "Insert", 
                    "IntegerInterval", "IntegerQuotientRing", 
                    "IntegerQuotientRingPM", "Intersection", "IntersectionOf",
                     "isComplex", "isComplexP", "IsElement", "isInteger", 
                    "isRational", "isReal", "isSet", "isTuple", "Join", 
                    "Length", "Less", "LessEqual", "Let", "Max", 
                    "MaximumElementSet", "MaximumOf", "Min", 
                    "MinimumElementSet", "MinimumOf", "Minus", "Module", 
                    "MultInverse", "Not", "Or", "Plus", "Power", "PowerSet", 
                    "Prepend", "ProductOf", "Radical", "RationalInterval", 
                    "RealInterval", "Replace", "ReplacePart", "SetEqual", 
                    "Subscript", "Subset", "SubsetEqual", "SumOf", "Superset",
                     "SupersetEqual", "Switch", "SymmetricDifference", 
                    "Times", "TupleEqual", "Union", "UnionOf", "Which", 
                    "While", "\[DoubleStruckCapitalC]", 
                    "\[DoubleStruckCapitalC]P"}, "CIContent"]}, False]],
               DynamicModuleValues:>Automatic],
              Setting[#, {0}]& ]},
            {
             ButtonBox["\<\"Restore environment\"\>",
              Appearance->Automatic,
              
              ButtonFunction:>
               Theorema`Interface`GUI`Private`setCompEnv[{}, {{
                 "AbsValue", True}, {"And", True}, {"AnElement", True}, {
                 "Append", True}, {"Cardinality", True}, {
                 "CartesianProduct", True}, {"CaseDistinction", True}, {
                 "Componentwise", True}, {"Delete", True}, {
                 "DeleteAt", True}, {"Difference", True}, {"Do", True}, {
                 "Equal", True}, {"Exists", True}, {"Factorial", True}, {
                 "For", True}, {"Forall", True}, {"Greater", True}, {
                 "GreaterEqual", True}, {"Iff", True}, {"Implies", True}, {
                 "Insert", True}, {"IntegerInterval", True}, {
                 "IntegerQuotientRing", True}, {
                 "IntegerQuotientRingPM", True}, {"Intersection", True}, {
                 "IntersectionOf", True}, {"isComplex", True}, {
                 "isComplexP", True}, {"IsElement", True}, {
                 "isInteger", True}, {"isRational", True}, {"isReal", True}, {
                 "isSet", True}, {"isTuple", True}, {"Join", True}, {
                 "Length", True}, {"Less", True}, {"LessEqual", True}, {
                 "Let", True}, {"Max", True}, {"MaximumElementSet", True}, {
                 "MaximumOf", True}, {"Min", True}, {
                 "MinimumElementSet", True}, {"MinimumOf", True}, {
                 "Minus", True}, {"Module", True}, {"MultInverse", True}, {
                 "Not", True}, {"Or", True}, {"Plus", True}, {
                 "Power", True}, {"PowerSet", True}, {"Prepend", True}, {
                 "ProductOf", True}, {"Radical", True}, {
                 "RationalInterval", True}, {"RealInterval", True}, {
                 "Replace", True}, {"ReplacePart", True}, {
                 "SetEqual", True}, {"Subscript", True}, {"Subset", True}, {
                 "SubsetEqual", True}, {"SumOf", True}, {"Superset", True}, {
                 "SupersetEqual", True}, {"Switch", True}, {
                 "SymmetricDifference", True}, {"Times", True}, {
                 "TupleEqual", True}, {"Union", True}, {"UnionOf", True}, {
                 "Which", True}, {"While", True}, {
                 "\[DoubleStruckCapitalC]", True}, {
                 "\[DoubleStruckCapitalC]P", True}}],
              Evaluator->Automatic,
              ImageSize->Automatic,
              Method->"Preemptive"]}
           },
           DefaultBaseStyle->"Column",
           GridBoxAlignment->{"Columns" -> {{Left}}},
           
           GridBoxItemSize->{
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
          "Column"],
         ImageMargins->0]}
      },
      AutoDelete->False,
      BaselinePosition->{1, 1},
      GridBoxAlignment->{"Columns" -> {{Left}}},
      GridBoxBackground->{"Columns" -> {{Automatic}}},
      GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
      GridBoxSpacings->{"Columns" -> {{0.2}}, "Rows" -> {{0.5}}}]}, Dynamic[
     Typeset`var$$],
     Alignment->Automatic,
     BaselinePosition->Baseline,
     DefaultBaseStyle->"OpenerView",
     ImageMargins->0,
     ImageSize->Automatic],
    Deployed->False,
    StripOnInput->False],
   OpenerView[{"", 
     Column[{
       OpenerView[{
         Style["Knowledge used in computation", "CIContent"], 
         Style[{}, "CIContent"]}], 
       OpenerView[{
         Style["Builtins used in computation", "CIContent"], 
         Style[{
          "AbsValue", "And", "AnElement", "Append", "Cardinality", 
           "CartesianProduct", "CaseDistinction", "Componentwise", "Delete", 
           "DeleteAt", "Difference", "Do", "Equal", "Exists", "Factorial", 
           "For", "Forall", "Greater", "GreaterEqual", "Iff", "Implies", 
           "Insert", "IntegerInterval", "IntegerQuotientRing", 
           "IntegerQuotientRingPM", "Intersection", "IntersectionOf", 
           "isComplex", "isComplexP", "IsElement", "isInteger", "isRational", 
           "isReal", "isSet", "isTuple", "Join", "Length", "Less", 
           "LessEqual", "Let", "Max", "MaximumElementSet", "MaximumOf", "Min",
            "MinimumElementSet", "MinimumOf", "Minus", "Module", 
           "MultInverse", "Not", "Or", "Plus", "Power", "PowerSet", "Prepend",
            "ProductOf", "Radical", "RationalInterval", "RealInterval", 
           "Replace", "ReplacePart", "SetEqual", "Subscript", "Subset", 
           "SubsetEqual", "SumOf", "Superset", "SupersetEqual", "Switch", 
           "SymmetricDifference", "Times", "TupleEqual", "Union", "UnionOf", 
           "Which", "While", "\[DoubleStruckCapitalC]", 
           "\[DoubleStruckCapitalC]P"}, "CIContent"]}], 
       Button["Restore environment", 
        Theorema`Interface`GUI`Private`setCompEnv[{}, {{"AbsValue", True}, {
          "And", True}, {"AnElement", True}, {"Append", True}, {
          "Cardinality", True}, {"CartesianProduct", True}, {
          "CaseDistinction", True}, {"Componentwise", True}, {
          "Delete", True}, {"DeleteAt", True}, {"Difference", True}, {
          "Do", True}, {"Equal", True}, {"Exists", True}, {
          "Factorial", True}, {"For", True}, {"Forall", True}, {
          "Greater", True}, {"GreaterEqual", True}, {"Iff", True}, {
          "Implies", True}, {"Insert", True}, {"IntegerInterval", True}, {
          "IntegerQuotientRing", True}, {"IntegerQuotientRingPM", True}, {
          "Intersection", True}, {"IntersectionOf", True}, {
          "isComplex", True}, {"isComplexP", True}, {"IsElement", True}, {
          "isInteger", True}, {"isRational", True}, {"isReal", True}, {
          "isSet", True}, {"isTuple", True}, {"Join", True}, {
          "Length", True}, {"Less", True}, {"LessEqual", True}, {
          "Let", True}, {"Max", True}, {"MaximumElementSet", True}, {
          "MaximumOf", True}, {"Min", True}, {"MinimumElementSet", True}, {
          "MinimumOf", True}, {"Minus", True}, {"Module", True}, {
          "MultInverse", True}, {"Not", True}, {"Or", True}, {"Plus", True}, {
          "Power", True}, {"PowerSet", True}, {"Prepend", True}, {
          "ProductOf", True}, {"Radical", True}, {"RationalInterval", True}, {
          "RealInterval", True}, {"Replace", True}, {"ReplacePart", True}, {
          "SetEqual", True}, {"Subscript", True}, {"Subset", True}, {
          "SubsetEqual", True}, {"SumOf", True}, {"Superset", True}, {
          "SupersetEqual", True}, {"Switch", True}, {
          "SymmetricDifference", True}, {"Times", True}, {
          "TupleEqual", True}, {"Union", True}, {"UnionOf", True}, {
          "Which", True}, {"While", True}, {
          "\[DoubleStruckCapitalC]", True}, {
          "\[DoubleStruckCapitalC]P", True}}], ImageSize -> Automatic]}]}, 
    False]],
  DynamicModuleValues:>{}]], "ComputationInfo",
 CellChangeTimes->{3.599302298821672*^9},
 CellID->44267110],

Cell[BoxData[
 FormBox[
  SubscriptBox["+", "\[Rule]"], TheoremaForm]], "ComputationResult",
 CellChangeTimes->{3.599302298865816*^9},
 CellID->1831925414]
}, Open  ]],

Cell["is simply represented as", "Text",
 CellChangeTimes->{{3.599302303804064*^9, 3.599302308214557*^9}},
 CellID->1141780532],

Cell[TextData[Cell[BoxData[
 FormBox[
  RowBox[{"Annotated$TM", "[", 
   RowBox[{"Plus$TM", ",", 
    RowBox[{"SubScript$TM", "[", "Rule$TM", "]"}]}], "]"}], 
  TraditionalForm]]]], "Text",
 CellChangeTimes->{{3.599302315074594*^9, 3.599302330775799*^9}},
 CellID->2110834023]
}, Closed]]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell["More Examples", "Section",
 CellChangeTimes->{{3.599301075684513*^9, 3.599301076966636*^9}, {
  3.599301804017532*^9, 3.599301804652312*^9}},
 CellID->397934377],

Cell["\<\
All the notations described in this document work both in \
\[OpenCurlyDoubleQuote]FormalTextInputFormula\[CloseCurlyDoubleQuote]-cells \
and in \[OpenCurlyDoubleQuote]Computation\[CloseCurlyDoubleQuote]-cells.\
\>", "Text",
 CellChangeTimes->{{3.599301382035194*^9, 3.599301433462297*^9}},
 CellID->1676143495],

Cell[CellGroupData[{

Cell["FormalTextInputFormula-Cells", "Subsection",
 CellChangeTimes->{{3.599300817357506*^9, 3.59930085031816*^9}, {
  3.599301438841746*^9, 3.599301450351151*^9}},
 CellID->1574104947],

Cell["", "OpenEnvironment",
 CellChangeTimes->{3.59930133998348*^9},
 CellID->915606070],

Cell[CellGroupData[{

Cell["Definition", "EnvironmentHeader",
 CellFrameLabels->{{None, 
    Cell[
     BoxData[
      ButtonBox[
      "\[Times]", Evaluator -> Automatic, Appearance -> None, ButtonFunction :> 
       Theorema`Language`Session`Private`removeEnvironment[
         ButtonNotebook[]]]]]}, {None, None}},
 CellID->2118760874],

Cell[BoxData[
 RowBox[{
  UnderscriptBox["\[ForAll]", 
   RowBox[{
    RowBox[{
     TagBox["(",
      "AutoParentheses"], 
     TagBox["\[SmallCircle]",
      Identity], 
     TagBox[")",
      "AutoParentheses"]}], ",", 
    RowBox[{
     TagBox["(",
      "AutoParentheses"], 
     TagBox["+",
      Identity], 
     TagBox[")",
      "AutoParentheses"]}]}]], 
  RowBox[{
   TagBox["(",
    "AutoParentheses"], 
   RowBox[{
    RowBox[{"a", 
     TagBox["+",
      Identity], "b"}], ":=", 
    RowBox[{"c", 
     TagBox["\[SmallCircle]",
      Identity], "d"}]}], 
   TagBox[")",
    "AutoParentheses"]}]}]], "FormalTextInputFormula",
 CellFrameLabels->{{None, 
    Cell[
     BoxData[
      RowBox[{
        StyleBox["(8)", "FrameLabel"], "  ", 
        ButtonBox[
        "\[Times]", Evaluator -> Automatic, Appearance -> None, 
         ButtonFunction :> 
         Theorema`Language`Session`Private`removeFormula[{
           "ID:897003710", 
            "Source:/home/amaletzk/WolframWorkspaces/Base/Theorema/Operators.\
nb"}]]}]]]}, {None, None}},
 ShowCellTags->False,
 CellChangeTimes->{3.599301292495489*^9},
 CellTags->{
  "ID:897003710", 
   "Source:/home/amaletzk/WolframWorkspaces/Base/Theorema/Operators.nb", "8"},
 
 CellID->897003710],

Cell[BoxData[
 RowBox[{
  RowBox[{
   TagBox["(",
    "AutoParentheses"], 
   TagBox["\[CircleDot]",
    Identity], 
   TagBox[")",
    "AutoParentheses"]}], ":=", 
  RowBox[{
   TagBox["(",
    "AutoParentheses"], 
   TagBox["\[SmallCircle]",
    Identity], 
   TagBox[")",
    "AutoParentheses"]}]}]], "FormalTextInputFormula",
 CellFrameLabels->{{None, 
    Cell[
     BoxData[
      RowBox[{
        StyleBox["(9)", "FrameLabel"], "  ", 
        ButtonBox[
        "\[Times]", Evaluator -> Automatic, Appearance -> None, 
         ButtonFunction :> 
         Theorema`Language`Session`Private`removeFormula[{
           "ID:796304789", 
            "Source:/home/amaletzk/WolframWorkspaces/Base/Theorema/Operators.\
nb"}]]}]]]}, {None, None}},
 ShowCellTags->False,
 CellChangeTimes->{3.599301297882995*^9},
 CellTags->{
  "ID:796304789", 
   "Source:/home/amaletzk/WolframWorkspaces/Base/Theorema/Operators.nb", "9"},
 
 CellID->796304789],

Cell[BoxData[
 RowBox[{"x", 
  SubscriptBox[
   UnderscriptBox["\[SmallCircle]", "D"], "z"], 
  "y"}]], "FormalTextInputFormula",
 CellFrameLabels->{{None, 
    Cell[
     BoxData[
      RowBox[{
        StyleBox["(10)", "FrameLabel"], "  ", 
        ButtonBox[
        "\[Times]", Evaluator -> Automatic, Appearance -> None, 
         ButtonFunction :> 
         Theorema`Language`Session`Private`removeFormula[{
           "ID:608479645", 
            "Source:/home/amaletzk/WolframWorkspaces/Base/Theorema/Operators.\
nb"}]]}]]]}, {None, None}},
 ShowCellTags->False,
 CellChangeTimes->{3.599301306948218*^9},
 CellTags->{
  "ID:608479645", 
   "Source:/home/amaletzk/WolframWorkspaces/Base/Theorema/Operators.nb", "10"},
 CellID->608479645],

Cell[BoxData[
 SubscriptBox["\[SmallCircle]", "+"]], "FormalTextInputFormula",
 CellFrameLabels->{{None, 
    Cell[
     BoxData[
      RowBox[{
        StyleBox["(11)", "FrameLabel"], "  ", 
        ButtonBox[
        "\[Times]", Evaluator -> Automatic, Appearance -> None, 
         ButtonFunction :> 
         Theorema`Language`Session`Private`removeFormula[{
           "ID:923389678", 
            "Source:/home/amaletzk/WolframWorkspaces/Base/Theorema/Operators.\
nb"}]]}]]]}, {None, None}},
 ShowCellTags->False,
 CellChangeTimes->{3.599301310565199*^9},
 CellTags->{
  "ID:923389678", 
   "Source:/home/amaletzk/WolframWorkspaces/Base/Theorema/Operators.nb", "11"},
 CellID->923389678],

Cell[BoxData[
 RowBox[{"a", 
  SuperscriptBox[
   OverscriptBox["\[CircleDot]", 
    RowBox[{"1", ",", "2", ",", "3"}]], "0"], "b"}]], "FormalTextInputFormula",\

 CellFrameLabels->{{None, 
    Cell[
     BoxData[
      RowBox[{
        StyleBox["(12)", "FrameLabel"], "  ", 
        ButtonBox[
        "\[Times]", Evaluator -> Automatic, Appearance -> None, 
         ButtonFunction :> 
         Theorema`Language`Session`Private`removeFormula[{
           "ID:808160758", 
            "Source:/home/amaletzk/WolframWorkspaces/Base/Theorema/Operators.\
nb"}]]}]]]}, {None, None}},
 ShowCellTags->False,
 CellChangeTimes->{3.599301314218054*^9},
 CellTags->{
  "ID:808160758", 
   "Source:/home/amaletzk/WolframWorkspaces/Base/Theorema/Operators.nb", "12"},
 CellID->808160758],

Cell[BoxData[
 RowBox[{
  UnderscriptBox["\[ForAll]", "D"], 
  RowBox[{"a", 
   UnderscriptBox[
    SubsuperscriptBox["+", 
     RowBox[{"1", ",", "2", ",", "3"}], 
     RowBox[{"x", ",", "y", ",", "z"}]], "D"], 
   "b"}]}]], "FormalTextInputFormula",
 CellFrameLabels->{{None, 
    Cell[
     BoxData[
      RowBox[{
        StyleBox["(13)", "FrameLabel"], "  ", 
        ButtonBox[
        "\[Times]", Evaluator -> Automatic, Appearance -> None, 
         ButtonFunction :> 
         Theorema`Language`Session`Private`removeFormula[{
           "ID:856865739", 
            "Source:/home/amaletzk/WolframWorkspaces/Base/Theorema/Operators.\
nb"}]]}]]]}, {None, None}},
 ShowCellTags->False,
 CellChangeTimes->{3.599301318826851*^9},
 CellTags->{
  "ID:856865739", 
   "Source:/home/amaletzk/WolframWorkspaces/Base/Theorema/Operators.nb", "13"},
 CellID->856865739],

Cell[BoxData[
 RowBox[{"a", 
  UnderscriptBox[
   SubscriptBox[
    OverscriptBox["+", 
     RowBox[{"x", ",", "y", ",", "z"}]], 
    RowBox[{"1", ",", "2", ",", "3"}]], "D"], "b"}]], "FormalTextInputFormula",\

 CellFrameLabels->{{None, 
    Cell[
     BoxData[
      RowBox[{
        StyleBox["(14)", "FrameLabel"], "  ", 
        ButtonBox[
        "\[Times]", Evaluator -> Automatic, Appearance -> None, 
         ButtonFunction :> 
         Theorema`Language`Session`Private`removeFormula[{
           "ID:258074347", 
            "Source:/home/amaletzk/WolframWorkspaces/Base/Theorema/Operators.\
nb"}]]}]]]}, {None, None}},
 ShowCellTags->False,
 CellChangeTimes->{3.599301323439076*^9},
 CellTags->{
  "ID:258074347", 
   "Source:/home/amaletzk/WolframWorkspaces/Base/Theorema/Operators.nb", "14"},
 CellID->258074347],

Cell[BoxData[
 RowBox[{
  SubsuperscriptBox["\[Square]", "bla", "bla"], 
  "a"}]], "FormalTextInputFormula",
 CellFrameLabels->{{None, 
    Cell[
     BoxData[
      RowBox[{
        StyleBox["(15)", "FrameLabel"], "  ", 
        ButtonBox[
        "\[Times]", Evaluator -> Automatic, Appearance -> None, 
         ButtonFunction :> 
         Theorema`Language`Session`Private`removeFormula[{
           "ID:2046928891", 
            "Source:/home/amaletzk/WolframWorkspaces/Base/Theorema/Operators.\
nb"}]]}]]]}, {None, None}},
 ShowCellTags->False,
 CellChangeTimes->{3.599301326758198*^9},
 CellTags->{
  "ID:2046928891", 
   "Source:/home/amaletzk/WolframWorkspaces/Base/Theorema/Operators.nb", "15"},
 CellID->2046928891],

Cell[BoxData[
 RowBox[{"a", 
  UnderoverscriptBox["!!", "0", "1"]}]], "FormalTextInputFormula",
 CellFrameLabels->{{None, 
    Cell[
     BoxData[
      RowBox[{
        StyleBox["(16)", "FrameLabel"], "  ", 
        ButtonBox[
        "\[Times]", Evaluator -> Automatic, Appearance -> None, 
         ButtonFunction :> 
         Theorema`Language`Session`Private`removeFormula[{
           "ID:162303779", 
            "Source:/home/amaletzk/WolframWorkspaces/Base/Theorema/Operators.\
nb"}]]}]]]}, {None, None}},
 ShowCellTags->False,
 CellChangeTimes->{3.599301330036603*^9},
 CellTags->{
  "ID:162303779", 
   "Source:/home/amaletzk/WolframWorkspaces/Base/Theorema/Operators.nb", "16"},
 CellID->162303779],

Cell["\[GraySquare]", "EndEnvironmentMarker",
 CellID->236100166]
}, Open  ]],

Cell["", "CloseEnvironment",
 CellID->2066566912]
}, Closed]],

Cell[CellGroupData[{

Cell["Computation-Cells", "Subsection",
 CellChangeTimes->{{3.599300835831883*^9, 3.599300838785553*^9}, 
   3.599301453411006*^9},
 CellID->1915999289],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"a", 
  UnderscriptBox[
   SubscriptBox[
    OverscriptBox["+", 
     RowBox[{"x", ",", "y", ",", "z"}]], 
    RowBox[{"1", ",", "2", ",", "3"}]], "D"], "b"}]], "Computation",
 CellChangeTimes->{
  3.592655568721556*^9, {3.59271569316495*^9, 3.592715702068404*^9}},
 CellID->969904702],

Cell[BoxData[
 DynamicModuleBox[{Typeset`var$$ = False}, 
  InterpretationBox[
   StyleBox[
    PaneSelectorBox[{False->GridBox[{
       {
        OpenerBox[Dynamic[Typeset`var$$],
         Appearance->Automatic,
         AutoAction->False,
         ContinuousAction->False,
         Enabled->Automatic], "\<\"\"\>"}
      },
      AutoDelete->False,
      BaselinePosition->{1, 1},
      GridBoxAlignment->{"Columns" -> {{Left}}},
      GridBoxBackground->{"Columns" -> {{Automatic}}},
      GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
      GridBoxSpacings->{"Columns" -> {{0.2}}, "Rows" -> {{0.5}}}], True->
     GridBox[{
       {
        OpenerBox[Dynamic[Typeset`var$$],
         Appearance->Automatic,
         AutoAction->False,
         ContinuousAction->False,
         Enabled->Automatic], "\<\"\"\>"},
       {"", 
        PaneBox[
         TagBox[GridBox[{
            {
             TagBox[
              DynamicModuleBox[{Typeset`var$$ = False}, 
               InterpretationBox[
                StyleBox[
                 PaneSelectorBox[{False->GridBox[{
                    {
                    OpenerBox[Dynamic[Typeset`var$$],
                    Appearance->Automatic,
                    AutoAction->False,
                    ContinuousAction->False,
                    Enabled->Automatic], 
                    
                    StyleBox["\<\"Knowledge used in computation\"\>", 
                    "CIContent",
                    StripOnInput->False]}
                   },
                   AutoDelete->False,
                   BaselinePosition->{1, 1},
                   GridBoxAlignment->{"Columns" -> {{Left}}},
                   GridBoxBackground->{"Columns" -> {{Automatic}}},
                   
                   GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
                   
                   GridBoxSpacings->{
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}], True->
                  GridBox[{
                    {
                    OpenerBox[Dynamic[Typeset`var$$],
                    Appearance->Automatic,
                    AutoAction->False,
                    ContinuousAction->False,
                    Enabled->Automatic], 
                    
                    StyleBox["\<\"Knowledge used in computation\"\>", 
                    "CIContent",
                    StripOnInput->False]},
                    {"", 
                    PaneBox[
                    StyleBox[
                    RowBox[{"{", "}"}], "CIContent",
                    StripOnInput->False],
                    ImageMargins->0]}
                   },
                   AutoDelete->False,
                   BaselinePosition->{1, 1},
                   GridBoxAlignment->{"Columns" -> {{Left}}},
                   GridBoxBackground->{"Columns" -> {{Automatic}}},
                   
                   GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
                   
                   GridBoxSpacings->{
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}]}, Dynamic[
                  Typeset`var$$],
                  Alignment->Automatic,
                  BaselinePosition->Baseline,
                  DefaultBaseStyle->"OpenerView",
                  ImageMargins->0,
                  ImageSize->Automatic],
                 Deployed->False,
                 StripOnInput->False],
                OpenerView[{
                  Style["Knowledge used in computation", "CIContent"], 
                  Style[{}, "CIContent"]}, False]],
               DynamicModuleValues:>Automatic],
              Setting[#, {0}]& ]},
            {
             TagBox[
              DynamicModuleBox[{Typeset`var$$ = False}, 
               InterpretationBox[
                StyleBox[
                 PaneSelectorBox[{False->GridBox[{
                    {
                    OpenerBox[Dynamic[Typeset`var$$],
                    Appearance->Automatic,
                    AutoAction->False,
                    ContinuousAction->False,
                    Enabled->Automatic], 
                    
                    StyleBox["\<\"Builtins used in computation\"\>", 
                    "CIContent",
                    StripOnInput->False]}
                   },
                   AutoDelete->False,
                   BaselinePosition->{1, 1},
                   GridBoxAlignment->{"Columns" -> {{Left}}},
                   GridBoxBackground->{"Columns" -> {{Automatic}}},
                   
                   GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
                   
                   GridBoxSpacings->{
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}], True->
                  GridBox[{
                    {
                    OpenerBox[Dynamic[Typeset`var$$],
                    Appearance->Automatic,
                    AutoAction->False,
                    ContinuousAction->False,
                    Enabled->Automatic], 
                    
                    StyleBox["\<\"Builtins used in computation\"\>", 
                    "CIContent",
                    StripOnInput->False]},
                    {"", 
                    PaneBox[
                    StyleBox[
                    RowBox[{"{", 
                    
                    RowBox[{"\<\"AbsValue\"\>", ",", "\<\"And\"\>", 
                    ",", "\<\"Append\"\>", ",", "\<\"Cardinality\"\>", 
                    ",", "\<\"CartesianProduct\"\>", 
                    ",", "\<\"CaseDistinction\"\>", ",", "\<\"Delete\"\>", 
                    ",", "\<\"DeleteAt\"\>", ",", "\<\"Difference\"\>", 
                    ",", "\<\"Divide\"\>", ",", "\<\"Do\"\>", 
                    ",", "\<\"Exists\"\>", ",", "\<\"For\"\>", 
                    ",", "\<\"Forall\"\>", ",", "\<\"Greater\"\>", 
                    ",", "\<\"GreaterEqual\"\>", ",", "\<\"Iff\"\>", 
                    ",", "\<\"Implies\"\>", ",", "\<\"Insert\"\>", 
                    ",", "\<\"IntegerQR\"\>", ",", "\<\"IntegerRange\"\>", 
                    ",", "\<\"Intersection\"\>", ",", "\<\"isComplex\"\>", 
                    ",", "\<\"isComplexP\"\>", ",", "\<\"IsElement\"\>", 
                    ",", "\<\"isInteger\"\>", ",", "\<\"isRational\"\>", 
                    ",", "\<\"isReal\"\>", ",", "\<\"isSet\"\>", 
                    ",", "\<\"isTuple\"\>", ",", "\<\"Join\"\>", 
                    ",", "\<\"Length\"\>", ",", "\<\"Less\"\>", 
                    ",", "\<\"LessEqual\"\>", ",", "\<\"Let\"\>", 
                    ",", "\<\"Max\"\>", ",", "\<\"MaximumElementSet\"\>", 
                    ",", "\<\"Min\"\>", ",", "\<\"MinimumElementSet\"\>", 
                    ",", "\<\"Module\"\>", ",", "\<\"Not\"\>", 
                    ",", "\<\"Or\"\>", ",", "\<\"Plus\"\>", 
                    ",", "\<\"Power\"\>", ",", "\<\"PowerSet\"\>", 
                    ",", "\<\"Prepend\"\>", ",", "\<\"ProductOf\"\>", 
                    ",", "\<\"Radical\"\>", ",", "\<\"RationalRange\"\>", 
                    ",", "\<\"RealRange\"\>", ",", "\<\"Replace\"\>", 
                    ",", "\<\"ReplacePart\"\>", ",", "\<\"SetEqual\"\>", 
                    ",", "\<\"Subscript\"\>", ",", "\<\"Subset\"\>", 
                    ",", "\<\"SubsetEqual\"\>", ",", "\<\"Subtract\"\>", 
                    ",", "\<\"SumOf\"\>", ",", "\<\"Superset\"\>", 
                    ",", "\<\"SupersetEqual\"\>", ",", "\<\"Switch\"\>", 
                    ",", "\<\"SymmetricDifference\"\>", ",", "\<\"Times\"\>", 
                    ",", "\<\"TupleEqual\"\>", ",", "\<\"Union\"\>", 
                    ",", "\<\"Which\"\>", ",", "\<\"While\"\>", 
                    ",", "\<\"\[DoubleStruckCapitalC]\"\>", 
                    ",", "\<\"\[DoubleStruckCapitalC]P\"\>"}], "}"}], 
                    "CIContent",
                    StripOnInput->False],
                    ImageMargins->0]}
                   },
                   AutoDelete->False,
                   BaselinePosition->{1, 1},
                   GridBoxAlignment->{"Columns" -> {{Left}}},
                   GridBoxBackground->{"Columns" -> {{Automatic}}},
                   
                   GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
                   
                   GridBoxSpacings->{
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}]}, Dynamic[
                  Typeset`var$$],
                  Alignment->Automatic,
                  BaselinePosition->Baseline,
                  DefaultBaseStyle->"OpenerView",
                  ImageMargins->0,
                  ImageSize->Automatic],
                 Deployed->False,
                 StripOnInput->False],
                OpenerView[{
                  Style["Builtins used in computation", "CIContent"], 
                  
                  Style[{"AbsValue", "And", "Append", "Cardinality", 
                    "CartesianProduct", "CaseDistinction", "Delete", 
                    "DeleteAt", "Difference", "Divide", "Do", "Exists", "For",
                     "Forall", "Greater", "GreaterEqual", "Iff", "Implies", 
                    "Insert", "IntegerQR", "IntegerRange", "Intersection", 
                    "isComplex", "isComplexP", "IsElement", "isInteger", 
                    "isRational", "isReal", "isSet", "isTuple", "Join", 
                    "Length", "Less", "LessEqual", "Let", "Max", 
                    "MaximumElementSet", "Min", "MinimumElementSet", "Module",
                     "Not", "Or", "Plus", "Power", "PowerSet", "Prepend", 
                    "ProductOf", "Radical", "RationalRange", "RealRange", 
                    "Replace", "ReplacePart", "SetEqual", "Subscript", 
                    "Subset", "SubsetEqual", "Subtract", "SumOf", "Superset", 
                    "SupersetEqual", "Switch", "SymmetricDifference", "Times",
                     "TupleEqual", "Union", "Which", "While", 
                    "\[DoubleStruckCapitalC]", "\[DoubleStruckCapitalC]P"}, 
                   "CIContent"]}, False]],
               DynamicModuleValues:>Automatic],
              Setting[#, {0}]& ]},
            {
             ButtonBox["\<\"Restore environment\"\>",
              Appearance->Automatic,
              
              ButtonFunction:>
               Theorema`Interface`GUI`Private`setCompEnv[{}, {{
                 "AbsValue", True}, {"And", True}, {"Append", True}, {
                 "Cardinality", True}, {"CartesianProduct", True}, {
                 "CaseDistinction", True}, {"Delete", True}, {
                 "DeleteAt", True}, {"Difference", True}, {"Divide", True}, {
                 "Do", True}, {"Equal", False}, {"Exists", True}, {
                 "For", True}, {"Forall", True}, {"Greater", True}, {
                 "GreaterEqual", True}, {"Iff", True}, {"Implies", True}, {
                 "Insert", True}, {"IntegerQR", True}, {
                 "IntegerRange", True}, {"Intersection", True}, {
                 "isComplex", True}, {"isComplexP", True}, {
                 "IsElement", True}, {"isInteger", True}, {
                 "isRational", True}, {"isReal", True}, {"isSet", True}, {
                 "isTuple", True}, {"Join", True}, {"Length", True}, {
                 "Less", True}, {"LessEqual", True}, {"Let", True}, {
                 "Max", True}, {"MaximumElementSet", True}, {"Min", True}, {
                 "MinimumElementSet", True}, {"Module", True}, {
                 "Not", True}, {"Or", True}, {"Plus", True}, {
                 "Power", True}, {"PowerSet", True}, {"Prepend", True}, {
                 "ProductOf", True}, {"Radical", True}, {
                 "RationalRange", True}, {"RealRange", True}, {
                 "Replace", True}, {"ReplacePart", True}, {
                 "SetEqual", True}, {"Subscript", True}, {"Subset", True}, {
                 "SubsetEqual", True}, {"Subtract", True}, {"SumOf", True}, {
                 "Superset", True}, {"SupersetEqual", True}, {
                 "Switch", True}, {"SymmetricDifference", True}, {
                 "Times", True}, {"TupleEqual", True}, {"Union", True}, {
                 "Which", True}, {"While", True}, {
                 "\[DoubleStruckCapitalC]", True}, {
                 "\[DoubleStruckCapitalC]P", True}}],
              Evaluator->Automatic,
              ImageSize->Automatic,
              Method->"Preemptive"]}
           },
           DefaultBaseStyle->"Column",
           GridBoxAlignment->{"Columns" -> {{Left}}},
           
           GridBoxItemSize->{
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
          "Column"],
         ImageMargins->0]}
      },
      AutoDelete->False,
      BaselinePosition->{1, 1},
      GridBoxAlignment->{"Columns" -> {{Left}}},
      GridBoxBackground->{"Columns" -> {{Automatic}}},
      GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
      GridBoxSpacings->{"Columns" -> {{0.2}}, "Rows" -> {{0.5}}}]}, Dynamic[
     Typeset`var$$],
     Alignment->Automatic,
     BaselinePosition->Baseline,
     DefaultBaseStyle->"OpenerView",
     ImageMargins->0,
     ImageSize->Automatic],
    Deployed->False,
    StripOnInput->False],
   OpenerView[{"", 
     Column[{
       OpenerView[{
         Style["Knowledge used in computation", "CIContent"], 
         Style[{}, "CIContent"]}], 
       OpenerView[{
         Style["Builtins used in computation", "CIContent"], 
         Style[{
          "AbsValue", "And", "Append", "Cardinality", "CartesianProduct", 
           "CaseDistinction", "Delete", "DeleteAt", "Difference", "Divide", 
           "Do", "Exists", "For", "Forall", "Greater", "GreaterEqual", "Iff", 
           "Implies", "Insert", "IntegerQR", "IntegerRange", "Intersection", 
           "isComplex", "isComplexP", "IsElement", "isInteger", "isRational", 
           "isReal", "isSet", "isTuple", "Join", "Length", "Less", 
           "LessEqual", "Let", "Max", "MaximumElementSet", "Min", 
           "MinimumElementSet", "Module", "Not", "Or", "Plus", "Power", 
           "PowerSet", "Prepend", "ProductOf", "Radical", "RationalRange", 
           "RealRange", "Replace", "ReplacePart", "SetEqual", "Subscript", 
           "Subset", "SubsetEqual", "Subtract", "SumOf", "Superset", 
           "SupersetEqual", "Switch", "SymmetricDifference", "Times", 
           "TupleEqual", "Union", "Which", "While", "\[DoubleStruckCapitalC]",
            "\[DoubleStruckCapitalC]P"}, "CIContent"]}], 
       Button["Restore environment", 
        Theorema`Interface`GUI`Private`setCompEnv[{}, {{"AbsValue", True}, {
          "And", True}, {"Append", True}, {"Cardinality", True}, {
          "CartesianProduct", True}, {"CaseDistinction", True}, {
          "Delete", True}, {"DeleteAt", True}, {"Difference", True}, {
          "Divide", True}, {"Do", True}, {"Equal", False}, {"Exists", True}, {
          "For", True}, {"Forall", True}, {"Greater", True}, {
          "GreaterEqual", True}, {"Iff", True}, {"Implies", True}, {
          "Insert", True}, {"IntegerQR", True}, {"IntegerRange", True}, {
          "Intersection", True}, {"isComplex", True}, {"isComplexP", True}, {
          "IsElement", True}, {"isInteger", True}, {"isRational", True}, {
          "isReal", True}, {"isSet", True}, {"isTuple", True}, {
          "Join", True}, {"Length", True}, {"Less", True}, {
          "LessEqual", True}, {"Let", True}, {"Max", True}, {
          "MaximumElementSet", True}, {"Min", True}, {
          "MinimumElementSet", True}, {"Module", True}, {"Not", True}, {
          "Or", True}, {"Plus", True}, {"Power", True}, {"PowerSet", True}, {
          "Prepend", True}, {"ProductOf", True}, {"Radical", True}, {
          "RationalRange", True}, {"RealRange", True}, {"Replace", True}, {
          "ReplacePart", True}, {"SetEqual", True}, {"Subscript", True}, {
          "Subset", True}, {"SubsetEqual", True}, {"Subtract", True}, {
          "SumOf", True}, {"Superset", True}, {"SupersetEqual", True}, {
          "Switch", True}, {"SymmetricDifference", True}, {"Times", True}, {
          "TupleEqual", True}, {"Union", True}, {"Which", True}, {
          "While", True}, {"\[DoubleStruckCapitalC]", True}, {
          "\[DoubleStruckCapitalC]P", True}}], ImageSize -> Automatic]}]}, 
    False]],
  DynamicModuleValues:>{}]], "ComputationInfo",
 CellChangeTimes->{3.593237937085595*^9},
 CellID->39175054],

Cell[BoxData[
 FormBox[
  RowBox[{"a", 
   UnderscriptBox[
    SubscriptBox[
     OverscriptBox["+", 
      RowBox[{"x", ",", "y", ",", "z"}]], 
     RowBox[{"1", ",", "2", ",", "3"}]], "D"], "b"}], 
  TheoremaForm]], "ComputationResult",
 CellChangeTimes->{3.592655570888229*^9, 3.592655644737882*^9, 
  3.592713751693005*^9, 3.592715072899998*^9, 3.592715661012105*^9, 
  3.592715703817518*^9, 3.593237937107265*^9},
 CellID->200612129]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"a", 
  SubscriptBox[
   OverscriptBox["\[Rule]", 
    RowBox[{"x", ",", "y", ",", "z"}]], 
   RowBox[{"c", ",", "d"}]], "b"}]], "Computation",
 CellChangeTimes->{{3.58987701028805*^9, 3.58987702283804*^9}, {
   3.59020934751224*^9, 3.590209351333336*^9}, {3.590209390059717*^9, 
   3.590209392510951*^9}, {3.590898922660445*^9, 3.590899006765491*^9}, {
   3.590900710871041*^9, 3.590900714622643*^9}, 3.590900759256432*^9, {
   3.590902155455038*^9, 3.59090223556559*^9}, {3.59134789927052*^9, 
   3.591347905205235*^9}, {3.591358185559294*^9, 3.591358196753856*^9}, {
   3.591358244265079*^9, 3.591358387681394*^9}, {3.591358523923908*^9, 
   3.591358525812188*^9}, {3.591358615273637*^9, 3.591358654996728*^9}, {
   3.591359968697*^9, 3.59135999118266*^9}, {3.591414294626421*^9, 
   3.591414301835961*^9}, {3.592641971371407*^9, 3.592641998105008*^9}},
 CellID->1659676471],

Cell[BoxData[
 DynamicModuleBox[{Typeset`var$$ = False}, 
  InterpretationBox[
   StyleBox[
    PaneSelectorBox[{False->GridBox[{
       {
        OpenerBox[Dynamic[Typeset`var$$],
         Appearance->Automatic,
         AutoAction->False,
         ContinuousAction->False,
         Enabled->Automatic], "\<\"\"\>"}
      },
      AutoDelete->False,
      BaselinePosition->{1, 1},
      GridBoxAlignment->{"Columns" -> {{Left}}},
      GridBoxBackground->{"Columns" -> {{Automatic}}},
      GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
      GridBoxSpacings->{"Columns" -> {{0.2}}, "Rows" -> {{0.5}}}], True->
     GridBox[{
       {
        OpenerBox[Dynamic[Typeset`var$$],
         Appearance->Automatic,
         AutoAction->False,
         ContinuousAction->False,
         Enabled->Automatic], "\<\"\"\>"},
       {"", 
        PaneBox[
         TagBox[GridBox[{
            {
             TagBox[
              DynamicModuleBox[{Typeset`var$$ = False}, 
               InterpretationBox[
                StyleBox[
                 PaneSelectorBox[{False->GridBox[{
                    {
                    OpenerBox[Dynamic[Typeset`var$$],
                    Appearance->Automatic,
                    AutoAction->False,
                    ContinuousAction->False,
                    Enabled->Automatic], 
                    
                    StyleBox["\<\"Knowledge used in computation\"\>", 
                    "CIContent",
                    StripOnInput->False]}
                   },
                   AutoDelete->False,
                   BaselinePosition->{1, 1},
                   GridBoxAlignment->{"Columns" -> {{Left}}},
                   GridBoxBackground->{"Columns" -> {{Automatic}}},
                   
                   GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
                   
                   GridBoxSpacings->{
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}], True->
                  GridBox[{
                    {
                    OpenerBox[Dynamic[Typeset`var$$],
                    Appearance->Automatic,
                    AutoAction->False,
                    ContinuousAction->False,
                    Enabled->Automatic], 
                    
                    StyleBox["\<\"Knowledge used in computation\"\>", 
                    "CIContent",
                    StripOnInput->False]},
                    {"", 
                    PaneBox[
                    StyleBox[
                    RowBox[{"{", "}"}], "CIContent",
                    StripOnInput->False],
                    ImageMargins->0]}
                   },
                   AutoDelete->False,
                   BaselinePosition->{1, 1},
                   GridBoxAlignment->{"Columns" -> {{Left}}},
                   GridBoxBackground->{"Columns" -> {{Automatic}}},
                   
                   GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
                   
                   GridBoxSpacings->{
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}]}, Dynamic[
                  Typeset`var$$],
                  Alignment->Automatic,
                  BaselinePosition->Baseline,
                  DefaultBaseStyle->"OpenerView",
                  ImageMargins->0,
                  ImageSize->Automatic],
                 Deployed->False,
                 StripOnInput->False],
                OpenerView[{
                  Style["Knowledge used in computation", "CIContent"], 
                  Style[{}, "CIContent"]}, False]],
               DynamicModuleValues:>Automatic],
              Setting[#, {0}]& ]},
            {
             TagBox[
              DynamicModuleBox[{Typeset`var$$ = False}, 
               InterpretationBox[
                StyleBox[
                 PaneSelectorBox[{False->GridBox[{
                    {
                    OpenerBox[Dynamic[Typeset`var$$],
                    Appearance->Automatic,
                    AutoAction->False,
                    ContinuousAction->False,
                    Enabled->Automatic], 
                    
                    StyleBox["\<\"Builtins used in computation\"\>", 
                    "CIContent",
                    StripOnInput->False]}
                   },
                   AutoDelete->False,
                   BaselinePosition->{1, 1},
                   GridBoxAlignment->{"Columns" -> {{Left}}},
                   GridBoxBackground->{"Columns" -> {{Automatic}}},
                   
                   GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
                   
                   GridBoxSpacings->{
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}], True->
                  GridBox[{
                    {
                    OpenerBox[Dynamic[Typeset`var$$],
                    Appearance->Automatic,
                    AutoAction->False,
                    ContinuousAction->False,
                    Enabled->Automatic], 
                    
                    StyleBox["\<\"Builtins used in computation\"\>", 
                    "CIContent",
                    StripOnInput->False]},
                    {"", 
                    PaneBox[
                    StyleBox[
                    RowBox[{"{", 
                    
                    RowBox[{"\<\"AbsValue\"\>", ",", "\<\"And\"\>", 
                    ",", "\<\"Append\"\>", ",", "\<\"Cardinality\"\>", 
                    ",", "\<\"CartesianProduct\"\>", 
                    ",", "\<\"CaseDistinction\"\>", ",", "\<\"Delete\"\>", 
                    ",", "\<\"DeleteAt\"\>", ",", "\<\"Difference\"\>", 
                    ",", "\<\"Divide\"\>", ",", "\<\"Do\"\>", 
                    ",", "\<\"Exists\"\>", ",", "\<\"For\"\>", 
                    ",", "\<\"Forall\"\>", ",", "\<\"Greater\"\>", 
                    ",", "\<\"GreaterEqual\"\>", ",", "\<\"Iff\"\>", 
                    ",", "\<\"Implies\"\>", ",", "\<\"Insert\"\>", 
                    ",", "\<\"IntegerQR\"\>", ",", "\<\"IntegerRange\"\>", 
                    ",", "\<\"Intersection\"\>", ",", "\<\"isComplex\"\>", 
                    ",", "\<\"isComplexP\"\>", ",", "\<\"IsElement\"\>", 
                    ",", "\<\"isInteger\"\>", ",", "\<\"isRational\"\>", 
                    ",", "\<\"isReal\"\>", ",", "\<\"isSet\"\>", 
                    ",", "\<\"isTuple\"\>", ",", "\<\"Join\"\>", 
                    ",", "\<\"Length\"\>", ",", "\<\"Less\"\>", 
                    ",", "\<\"LessEqual\"\>", ",", "\<\"Let\"\>", 
                    ",", "\<\"Max\"\>", ",", "\<\"MaximumElementSet\"\>", 
                    ",", "\<\"Min\"\>", ",", "\<\"MinimumElementSet\"\>", 
                    ",", "\<\"Module\"\>", ",", "\<\"Not\"\>", 
                    ",", "\<\"Or\"\>", ",", "\<\"Plus\"\>", 
                    ",", "\<\"Power\"\>", ",", "\<\"PowerSet\"\>", 
                    ",", "\<\"Prepend\"\>", ",", "\<\"ProductOf\"\>", 
                    ",", "\<\"Radical\"\>", ",", "\<\"RationalRange\"\>", 
                    ",", "\<\"RealRange\"\>", ",", "\<\"Replace\"\>", 
                    ",", "\<\"ReplacePart\"\>", ",", "\<\"SetEqual\"\>", 
                    ",", "\<\"Subscript\"\>", ",", "\<\"Subset\"\>", 
                    ",", "\<\"SubsetEqual\"\>", ",", "\<\"Subtract\"\>", 
                    ",", "\<\"SumOf\"\>", ",", "\<\"Superset\"\>", 
                    ",", "\<\"SupersetEqual\"\>", ",", "\<\"Switch\"\>", 
                    ",", "\<\"SymmetricDifference\"\>", ",", "\<\"Times\"\>", 
                    ",", "\<\"TupleEqual\"\>", ",", "\<\"Union\"\>", 
                    ",", "\<\"Which\"\>", ",", "\<\"While\"\>", 
                    ",", "\<\"\[DoubleStruckCapitalC]\"\>", 
                    ",", "\<\"\[DoubleStruckCapitalC]P\"\>"}], "}"}], 
                    "CIContent",
                    StripOnInput->False],
                    ImageMargins->0]}
                   },
                   AutoDelete->False,
                   BaselinePosition->{1, 1},
                   GridBoxAlignment->{"Columns" -> {{Left}}},
                   GridBoxBackground->{"Columns" -> {{Automatic}}},
                   
                   GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
                   
                   GridBoxSpacings->{
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}]}, Dynamic[
                  Typeset`var$$],
                  Alignment->Automatic,
                  BaselinePosition->Baseline,
                  DefaultBaseStyle->"OpenerView",
                  ImageMargins->0,
                  ImageSize->Automatic],
                 Deployed->False,
                 StripOnInput->False],
                OpenerView[{
                  Style["Builtins used in computation", "CIContent"], 
                  
                  Style[{"AbsValue", "And", "Append", "Cardinality", 
                    "CartesianProduct", "CaseDistinction", "Delete", 
                    "DeleteAt", "Difference", "Divide", "Do", "Exists", "For",
                     "Forall", "Greater", "GreaterEqual", "Iff", "Implies", 
                    "Insert", "IntegerQR", "IntegerRange", "Intersection", 
                    "isComplex", "isComplexP", "IsElement", "isInteger", 
                    "isRational", "isReal", "isSet", "isTuple", "Join", 
                    "Length", "Less", "LessEqual", "Let", "Max", 
                    "MaximumElementSet", "Min", "MinimumElementSet", "Module",
                     "Not", "Or", "Plus", "Power", "PowerSet", "Prepend", 
                    "ProductOf", "Radical", "RationalRange", "RealRange", 
                    "Replace", "ReplacePart", "SetEqual", "Subscript", 
                    "Subset", "SubsetEqual", "Subtract", "SumOf", "Superset", 
                    "SupersetEqual", "Switch", "SymmetricDifference", "Times",
                     "TupleEqual", "Union", "Which", "While", 
                    "\[DoubleStruckCapitalC]", "\[DoubleStruckCapitalC]P"}, 
                   "CIContent"]}, False]],
               DynamicModuleValues:>Automatic],
              Setting[#, {0}]& ]},
            {
             ButtonBox["\<\"Restore environment\"\>",
              Appearance->Automatic,
              
              ButtonFunction:>
               Theorema`Interface`GUI`Private`setCompEnv[{}, {{
                 "AbsValue", True}, {"And", True}, {"Append", True}, {
                 "Cardinality", True}, {"CartesianProduct", True}, {
                 "CaseDistinction", True}, {"Delete", True}, {
                 "DeleteAt", True}, {"Difference", True}, {"Divide", True}, {
                 "Do", True}, {"Equal", False}, {"Exists", True}, {
                 "For", True}, {"Forall", True}, {"Greater", True}, {
                 "GreaterEqual", True}, {"Iff", True}, {"Implies", True}, {
                 "Insert", True}, {"IntegerQR", True}, {
                 "IntegerRange", True}, {"Intersection", True}, {
                 "isComplex", True}, {"isComplexP", True}, {
                 "IsElement", True}, {"isInteger", True}, {
                 "isRational", True}, {"isReal", True}, {"isSet", True}, {
                 "isTuple", True}, {"Join", True}, {"Length", True}, {
                 "Less", True}, {"LessEqual", True}, {"Let", True}, {
                 "Max", True}, {"MaximumElementSet", True}, {"Min", True}, {
                 "MinimumElementSet", True}, {"Module", True}, {
                 "Not", True}, {"Or", True}, {"Plus", True}, {
                 "Power", True}, {"PowerSet", True}, {"Prepend", True}, {
                 "ProductOf", True}, {"Radical", True}, {
                 "RationalRange", True}, {"RealRange", True}, {
                 "Replace", True}, {"ReplacePart", True}, {
                 "SetEqual", True}, {"Subscript", True}, {"Subset", True}, {
                 "SubsetEqual", True}, {"Subtract", True}, {"SumOf", True}, {
                 "Superset", True}, {"SupersetEqual", True}, {
                 "Switch", True}, {"SymmetricDifference", True}, {
                 "Times", True}, {"TupleEqual", True}, {"Union", True}, {
                 "Which", True}, {"While", True}, {
                 "\[DoubleStruckCapitalC]", True}, {
                 "\[DoubleStruckCapitalC]P", True}}],
              Evaluator->Automatic,
              ImageSize->Automatic,
              Method->"Preemptive"]}
           },
           DefaultBaseStyle->"Column",
           GridBoxAlignment->{"Columns" -> {{Left}}},
           
           GridBoxItemSize->{
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
          "Column"],
         ImageMargins->0]}
      },
      AutoDelete->False,
      BaselinePosition->{1, 1},
      GridBoxAlignment->{"Columns" -> {{Left}}},
      GridBoxBackground->{"Columns" -> {{Automatic}}},
      GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
      GridBoxSpacings->{"Columns" -> {{0.2}}, "Rows" -> {{0.5}}}]}, Dynamic[
     Typeset`var$$],
     Alignment->Automatic,
     BaselinePosition->Baseline,
     DefaultBaseStyle->"OpenerView",
     ImageMargins->0,
     ImageSize->Automatic],
    Deployed->False,
    StripOnInput->False],
   OpenerView[{"", 
     Column[{
       OpenerView[{
         Style["Knowledge used in computation", "CIContent"], 
         Style[{}, "CIContent"]}], 
       OpenerView[{
         Style["Builtins used in computation", "CIContent"], 
         Style[{
          "AbsValue", "And", "Append", "Cardinality", "CartesianProduct", 
           "CaseDistinction", "Delete", "DeleteAt", "Difference", "Divide", 
           "Do", "Exists", "For", "Forall", "Greater", "GreaterEqual", "Iff", 
           "Implies", "Insert", "IntegerQR", "IntegerRange", "Intersection", 
           "isComplex", "isComplexP", "IsElement", "isInteger", "isRational", 
           "isReal", "isSet", "isTuple", "Join", "Length", "Less", 
           "LessEqual", "Let", "Max", "MaximumElementSet", "Min", 
           "MinimumElementSet", "Module", "Not", "Or", "Plus", "Power", 
           "PowerSet", "Prepend", "ProductOf", "Radical", "RationalRange", 
           "RealRange", "Replace", "ReplacePart", "SetEqual", "Subscript", 
           "Subset", "SubsetEqual", "Subtract", "SumOf", "Superset", 
           "SupersetEqual", "Switch", "SymmetricDifference", "Times", 
           "TupleEqual", "Union", "Which", "While", "\[DoubleStruckCapitalC]",
            "\[DoubleStruckCapitalC]P"}, "CIContent"]}], 
       Button["Restore environment", 
        Theorema`Interface`GUI`Private`setCompEnv[{}, {{"AbsValue", True}, {
          "And", True}, {"Append", True}, {"Cardinality", True}, {
          "CartesianProduct", True}, {"CaseDistinction", True}, {
          "Delete", True}, {"DeleteAt", True}, {"Difference", True}, {
          "Divide", True}, {"Do", True}, {"Equal", False}, {"Exists", True}, {
          "For", True}, {"Forall", True}, {"Greater", True}, {
          "GreaterEqual", True}, {"Iff", True}, {"Implies", True}, {
          "Insert", True}, {"IntegerQR", True}, {"IntegerRange", True}, {
          "Intersection", True}, {"isComplex", True}, {"isComplexP", True}, {
          "IsElement", True}, {"isInteger", True}, {"isRational", True}, {
          "isReal", True}, {"isSet", True}, {"isTuple", True}, {
          "Join", True}, {"Length", True}, {"Less", True}, {
          "LessEqual", True}, {"Let", True}, {"Max", True}, {
          "MaximumElementSet", True}, {"Min", True}, {
          "MinimumElementSet", True}, {"Module", True}, {"Not", True}, {
          "Or", True}, {"Plus", True}, {"Power", True}, {"PowerSet", True}, {
          "Prepend", True}, {"ProductOf", True}, {"Radical", True}, {
          "RationalRange", True}, {"RealRange", True}, {"Replace", True}, {
          "ReplacePart", True}, {"SetEqual", True}, {"Subscript", True}, {
          "Subset", True}, {"SubsetEqual", True}, {"Subtract", True}, {
          "SumOf", True}, {"Superset", True}, {"SupersetEqual", True}, {
          "Switch", True}, {"SymmetricDifference", True}, {"Times", True}, {
          "TupleEqual", True}, {"Union", True}, {"Which", True}, {
          "While", True}, {"\[DoubleStruckCapitalC]", True}, {
          "\[DoubleStruckCapitalC]P", True}}], ImageSize -> Automatic]}]}, 
    False]],
  DynamicModuleValues:>{}]], "ComputationInfo",
 CellChangeTimes->{3.59323788361843*^9},
 CellID->1414223919],

Cell[BoxData[
 FormBox[
  RowBox[{"a", 
   SubscriptBox[
    OverscriptBox["\[Rule]", 
     RowBox[{"x", ",", "y", ",", "z"}]], 
    RowBox[{"c", ",", "d"}]], "b"}], TheoremaForm]], "ComputationResult",
 CellChangeTimes->{{3.591414290054601*^9, 3.591414302915184*^9}, 
   3.591424618483805*^9, 3.592136963371498*^9, 3.592634574531698*^9, 
   3.592634771710118*^9, 3.592642002710894*^9, 3.592644251171551*^9, 
   3.592650136320369*^9, 3.592715744970946*^9, 3.593237702157065*^9, 
   3.593237883638135*^9},
 CellID->1911387542]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"a", 
  SubscriptBox[
   UnderscriptBox["\[Rule]", "D"], "c"], "b"}]], "Computation",
 CellChangeTimes->{{3.591424624093245*^9, 3.591424648786692*^9}, 
   3.591427341409483*^9, {3.591427725245184*^9, 3.59142774343072*^9}, {
   3.592642019162129*^9, 3.592642032129268*^9}},
 CellID->1885210448],

Cell[BoxData[
 DynamicModuleBox[{Typeset`var$$ = False}, 
  InterpretationBox[
   StyleBox[
    PaneSelectorBox[{False->GridBox[{
       {
        OpenerBox[Dynamic[Typeset`var$$],
         Appearance->Automatic,
         AutoAction->False,
         ContinuousAction->False,
         Enabled->Automatic], "\<\"\"\>"}
      },
      AutoDelete->False,
      BaselinePosition->{1, 1},
      GridBoxAlignment->{"Columns" -> {{Left}}},
      GridBoxBackground->{"Columns" -> {{Automatic}}},
      GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
      GridBoxSpacings->{"Columns" -> {{0.2}}, "Rows" -> {{0.5}}}], True->
     GridBox[{
       {
        OpenerBox[Dynamic[Typeset`var$$],
         Appearance->Automatic,
         AutoAction->False,
         ContinuousAction->False,
         Enabled->Automatic], "\<\"\"\>"},
       {"", 
        PaneBox[
         TagBox[GridBox[{
            {
             TagBox[
              DynamicModuleBox[{Typeset`var$$ = False}, 
               InterpretationBox[
                StyleBox[
                 PaneSelectorBox[{False->GridBox[{
                    {
                    OpenerBox[Dynamic[Typeset`var$$],
                    Appearance->Automatic,
                    AutoAction->False,
                    ContinuousAction->False,
                    Enabled->Automatic], 
                    
                    StyleBox["\<\"Knowledge used in computation\"\>", 
                    "CIContent",
                    StripOnInput->False]}
                   },
                   AutoDelete->False,
                   BaselinePosition->{1, 1},
                   GridBoxAlignment->{"Columns" -> {{Left}}},
                   GridBoxBackground->{"Columns" -> {{Automatic}}},
                   
                   GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
                   
                   GridBoxSpacings->{
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}], True->
                  GridBox[{
                    {
                    OpenerBox[Dynamic[Typeset`var$$],
                    Appearance->Automatic,
                    AutoAction->False,
                    ContinuousAction->False,
                    Enabled->Automatic], 
                    
                    StyleBox["\<\"Knowledge used in computation\"\>", 
                    "CIContent",
                    StripOnInput->False]},
                    {"", 
                    PaneBox[
                    StyleBox[
                    RowBox[{"{", "}"}], "CIContent",
                    StripOnInput->False],
                    ImageMargins->0]}
                   },
                   AutoDelete->False,
                   BaselinePosition->{1, 1},
                   GridBoxAlignment->{"Columns" -> {{Left}}},
                   GridBoxBackground->{"Columns" -> {{Automatic}}},
                   
                   GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
                   
                   GridBoxSpacings->{
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}]}, Dynamic[
                  Typeset`var$$],
                  Alignment->Automatic,
                  BaselinePosition->Baseline,
                  DefaultBaseStyle->"OpenerView",
                  ImageMargins->0,
                  ImageSize->Automatic],
                 Deployed->False,
                 StripOnInput->False],
                OpenerView[{
                  Style["Knowledge used in computation", "CIContent"], 
                  Style[{}, "CIContent"]}, False]],
               DynamicModuleValues:>Automatic],
              Setting[#, {0}]& ]},
            {
             TagBox[
              DynamicModuleBox[{Typeset`var$$ = False}, 
               InterpretationBox[
                StyleBox[
                 PaneSelectorBox[{False->GridBox[{
                    {
                    OpenerBox[Dynamic[Typeset`var$$],
                    Appearance->Automatic,
                    AutoAction->False,
                    ContinuousAction->False,
                    Enabled->Automatic], 
                    
                    StyleBox["\<\"Builtins used in computation\"\>", 
                    "CIContent",
                    StripOnInput->False]}
                   },
                   AutoDelete->False,
                   BaselinePosition->{1, 1},
                   GridBoxAlignment->{"Columns" -> {{Left}}},
                   GridBoxBackground->{"Columns" -> {{Automatic}}},
                   
                   GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
                   
                   GridBoxSpacings->{
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}], True->
                  GridBox[{
                    {
                    OpenerBox[Dynamic[Typeset`var$$],
                    Appearance->Automatic,
                    AutoAction->False,
                    ContinuousAction->False,
                    Enabled->Automatic], 
                    
                    StyleBox["\<\"Builtins used in computation\"\>", 
                    "CIContent",
                    StripOnInput->False]},
                    {"", 
                    PaneBox[
                    StyleBox[
                    RowBox[{"{", 
                    
                    RowBox[{"\<\"AbsValue\"\>", ",", "\<\"And\"\>", 
                    ",", "\<\"Append\"\>", ",", "\<\"Cardinality\"\>", 
                    ",", "\<\"CartesianProduct\"\>", 
                    ",", "\<\"CaseDistinction\"\>", ",", "\<\"Delete\"\>", 
                    ",", "\<\"DeleteAt\"\>", ",", "\<\"Difference\"\>", 
                    ",", "\<\"Divide\"\>", ",", "\<\"Do\"\>", 
                    ",", "\<\"Exists\"\>", ",", "\<\"For\"\>", 
                    ",", "\<\"Forall\"\>", ",", "\<\"Greater\"\>", 
                    ",", "\<\"GreaterEqual\"\>", ",", "\<\"Iff\"\>", 
                    ",", "\<\"Implies\"\>", ",", "\<\"Insert\"\>", 
                    ",", "\<\"IntegerQR\"\>", ",", "\<\"IntegerRange\"\>", 
                    ",", "\<\"Intersection\"\>", ",", "\<\"isComplex\"\>", 
                    ",", "\<\"isComplexP\"\>", ",", "\<\"IsElement\"\>", 
                    ",", "\<\"isInteger\"\>", ",", "\<\"isRational\"\>", 
                    ",", "\<\"isReal\"\>", ",", "\<\"isSet\"\>", 
                    ",", "\<\"isTuple\"\>", ",", "\<\"Join\"\>", 
                    ",", "\<\"Length\"\>", ",", "\<\"Less\"\>", 
                    ",", "\<\"LessEqual\"\>", ",", "\<\"Let\"\>", 
                    ",", "\<\"Max\"\>", ",", "\<\"MaximumElementSet\"\>", 
                    ",", "\<\"Min\"\>", ",", "\<\"MinimumElementSet\"\>", 
                    ",", "\<\"Module\"\>", ",", "\<\"Not\"\>", 
                    ",", "\<\"Or\"\>", ",", "\<\"Plus\"\>", 
                    ",", "\<\"Power\"\>", ",", "\<\"PowerSet\"\>", 
                    ",", "\<\"Prepend\"\>", ",", "\<\"ProductOf\"\>", 
                    ",", "\<\"Radical\"\>", ",", "\<\"RationalRange\"\>", 
                    ",", "\<\"RealRange\"\>", ",", "\<\"Replace\"\>", 
                    ",", "\<\"ReplacePart\"\>", ",", "\<\"SetEqual\"\>", 
                    ",", "\<\"Subscript\"\>", ",", "\<\"Subset\"\>", 
                    ",", "\<\"SubsetEqual\"\>", ",", "\<\"Subtract\"\>", 
                    ",", "\<\"SumOf\"\>", ",", "\<\"Superset\"\>", 
                    ",", "\<\"SupersetEqual\"\>", ",", "\<\"Switch\"\>", 
                    ",", "\<\"SymmetricDifference\"\>", ",", "\<\"Times\"\>", 
                    ",", "\<\"TupleEqual\"\>", ",", "\<\"Union\"\>", 
                    ",", "\<\"Which\"\>", ",", "\<\"While\"\>", 
                    ",", "\<\"\[DoubleStruckCapitalC]\"\>", 
                    ",", "\<\"\[DoubleStruckCapitalC]P\"\>"}], "}"}], 
                    "CIContent",
                    StripOnInput->False],
                    ImageMargins->0]}
                   },
                   AutoDelete->False,
                   BaselinePosition->{1, 1},
                   GridBoxAlignment->{"Columns" -> {{Left}}},
                   GridBoxBackground->{"Columns" -> {{Automatic}}},
                   
                   GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
                   
                   GridBoxSpacings->{
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}]}, Dynamic[
                  Typeset`var$$],
                  Alignment->Automatic,
                  BaselinePosition->Baseline,
                  DefaultBaseStyle->"OpenerView",
                  ImageMargins->0,
                  ImageSize->Automatic],
                 Deployed->False,
                 StripOnInput->False],
                OpenerView[{
                  Style["Builtins used in computation", "CIContent"], 
                  
                  Style[{"AbsValue", "And", "Append", "Cardinality", 
                    "CartesianProduct", "CaseDistinction", "Delete", 
                    "DeleteAt", "Difference", "Divide", "Do", "Exists", "For",
                     "Forall", "Greater", "GreaterEqual", "Iff", "Implies", 
                    "Insert", "IntegerQR", "IntegerRange", "Intersection", 
                    "isComplex", "isComplexP", "IsElement", "isInteger", 
                    "isRational", "isReal", "isSet", "isTuple", "Join", 
                    "Length", "Less", "LessEqual", "Let", "Max", 
                    "MaximumElementSet", "Min", "MinimumElementSet", "Module",
                     "Not", "Or", "Plus", "Power", "PowerSet", "Prepend", 
                    "ProductOf", "Radical", "RationalRange", "RealRange", 
                    "Replace", "ReplacePart", "SetEqual", "Subscript", 
                    "Subset", "SubsetEqual", "Subtract", "SumOf", "Superset", 
                    "SupersetEqual", "Switch", "SymmetricDifference", "Times",
                     "TupleEqual", "Union", "Which", "While", 
                    "\[DoubleStruckCapitalC]", "\[DoubleStruckCapitalC]P"}, 
                   "CIContent"]}, False]],
               DynamicModuleValues:>Automatic],
              Setting[#, {0}]& ]},
            {
             ButtonBox["\<\"Restore environment\"\>",
              Appearance->Automatic,
              
              ButtonFunction:>
               Theorema`Interface`GUI`Private`setCompEnv[{}, {{
                 "AbsValue", True}, {"And", True}, {"Append", True}, {
                 "Cardinality", True}, {"CartesianProduct", True}, {
                 "CaseDistinction", True}, {"Delete", True}, {
                 "DeleteAt", True}, {"Difference", True}, {"Divide", True}, {
                 "Do", True}, {"Equal", False}, {"Exists", True}, {
                 "For", True}, {"Forall", True}, {"Greater", True}, {
                 "GreaterEqual", True}, {"Iff", True}, {"Implies", True}, {
                 "Insert", True}, {"IntegerQR", True}, {
                 "IntegerRange", True}, {"Intersection", True}, {
                 "isComplex", True}, {"isComplexP", True}, {
                 "IsElement", True}, {"isInteger", True}, {
                 "isRational", True}, {"isReal", True}, {"isSet", True}, {
                 "isTuple", True}, {"Join", True}, {"Length", True}, {
                 "Less", True}, {"LessEqual", True}, {"Let", True}, {
                 "Max", True}, {"MaximumElementSet", True}, {"Min", True}, {
                 "MinimumElementSet", True}, {"Module", True}, {
                 "Not", True}, {"Or", True}, {"Plus", True}, {
                 "Power", True}, {"PowerSet", True}, {"Prepend", True}, {
                 "ProductOf", True}, {"Radical", True}, {
                 "RationalRange", True}, {"RealRange", True}, {
                 "Replace", True}, {"ReplacePart", True}, {
                 "SetEqual", True}, {"Subscript", True}, {"Subset", True}, {
                 "SubsetEqual", True}, {"Subtract", True}, {"SumOf", True}, {
                 "Superset", True}, {"SupersetEqual", True}, {
                 "Switch", True}, {"SymmetricDifference", True}, {
                 "Times", True}, {"TupleEqual", True}, {"Union", True}, {
                 "Which", True}, {"While", True}, {
                 "\[DoubleStruckCapitalC]", True}, {
                 "\[DoubleStruckCapitalC]P", True}}],
              Evaluator->Automatic,
              ImageSize->Automatic,
              Method->"Preemptive"]}
           },
           DefaultBaseStyle->"Column",
           GridBoxAlignment->{"Columns" -> {{Left}}},
           
           GridBoxItemSize->{
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
          "Column"],
         ImageMargins->0]}
      },
      AutoDelete->False,
      BaselinePosition->{1, 1},
      GridBoxAlignment->{"Columns" -> {{Left}}},
      GridBoxBackground->{"Columns" -> {{Automatic}}},
      GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
      GridBoxSpacings->{"Columns" -> {{0.2}}, "Rows" -> {{0.5}}}]}, Dynamic[
     Typeset`var$$],
     Alignment->Automatic,
     BaselinePosition->Baseline,
     DefaultBaseStyle->"OpenerView",
     ImageMargins->0,
     ImageSize->Automatic],
    Deployed->False,
    StripOnInput->False],
   OpenerView[{"", 
     Column[{
       OpenerView[{
         Style["Knowledge used in computation", "CIContent"], 
         Style[{}, "CIContent"]}], 
       OpenerView[{
         Style["Builtins used in computation", "CIContent"], 
         Style[{
          "AbsValue", "And", "Append", "Cardinality", "CartesianProduct", 
           "CaseDistinction", "Delete", "DeleteAt", "Difference", "Divide", 
           "Do", "Exists", "For", "Forall", "Greater", "GreaterEqual", "Iff", 
           "Implies", "Insert", "IntegerQR", "IntegerRange", "Intersection", 
           "isComplex", "isComplexP", "IsElement", "isInteger", "isRational", 
           "isReal", "isSet", "isTuple", "Join", "Length", "Less", 
           "LessEqual", "Let", "Max", "MaximumElementSet", "Min", 
           "MinimumElementSet", "Module", "Not", "Or", "Plus", "Power", 
           "PowerSet", "Prepend", "ProductOf", "Radical", "RationalRange", 
           "RealRange", "Replace", "ReplacePart", "SetEqual", "Subscript", 
           "Subset", "SubsetEqual", "Subtract", "SumOf", "Superset", 
           "SupersetEqual", "Switch", "SymmetricDifference", "Times", 
           "TupleEqual", "Union", "Which", "While", "\[DoubleStruckCapitalC]",
            "\[DoubleStruckCapitalC]P"}, "CIContent"]}], 
       Button["Restore environment", 
        Theorema`Interface`GUI`Private`setCompEnv[{}, {{"AbsValue", True}, {
          "And", True}, {"Append", True}, {"Cardinality", True}, {
          "CartesianProduct", True}, {"CaseDistinction", True}, {
          "Delete", True}, {"DeleteAt", True}, {"Difference", True}, {
          "Divide", True}, {"Do", True}, {"Equal", False}, {"Exists", True}, {
          "For", True}, {"Forall", True}, {"Greater", True}, {
          "GreaterEqual", True}, {"Iff", True}, {"Implies", True}, {
          "Insert", True}, {"IntegerQR", True}, {"IntegerRange", True}, {
          "Intersection", True}, {"isComplex", True}, {"isComplexP", True}, {
          "IsElement", True}, {"isInteger", True}, {"isRational", True}, {
          "isReal", True}, {"isSet", True}, {"isTuple", True}, {
          "Join", True}, {"Length", True}, {"Less", True}, {
          "LessEqual", True}, {"Let", True}, {"Max", True}, {
          "MaximumElementSet", True}, {"Min", True}, {
          "MinimumElementSet", True}, {"Module", True}, {"Not", True}, {
          "Or", True}, {"Plus", True}, {"Power", True}, {"PowerSet", True}, {
          "Prepend", True}, {"ProductOf", True}, {"Radical", True}, {
          "RationalRange", True}, {"RealRange", True}, {"Replace", True}, {
          "ReplacePart", True}, {"SetEqual", True}, {"Subscript", True}, {
          "Subset", True}, {"SubsetEqual", True}, {"Subtract", True}, {
          "SumOf", True}, {"Superset", True}, {"SupersetEqual", True}, {
          "Switch", True}, {"SymmetricDifference", True}, {"Times", True}, {
          "TupleEqual", True}, {"Union", True}, {"Which", True}, {
          "While", True}, {"\[DoubleStruckCapitalC]", True}, {
          "\[DoubleStruckCapitalC]P", True}}], ImageSize -> Automatic]}]}, 
    False]],
  DynamicModuleValues:>{}]], "ComputationInfo",
 CellChangeTimes->{3.593237889049009*^9},
 CellID->667675291],

Cell[BoxData[
 FormBox[
  RowBox[{"a", 
   SubscriptBox[
    RowBox[{
     TagBox["(",
      "AutoParentheses"], 
     UnderscriptBox["\[Rule]", "D"], 
     TagBox[")",
      "AutoParentheses"]}], "c"], "b"}], TheoremaForm]], "ComputationResult",
 CellChangeTimes->{3.59142774524213*^9, 3.591428872244957*^9, 
  3.592136965939816*^9, 3.592137611313398*^9, 3.592634591617109*^9, 
  3.592634769423175*^9, 3.592634832156188*^9, 3.59264203374861*^9, 
  3.592644247656485*^9, 3.592650140526276*^9, 3.592715779418492*^9, 
  3.593237889069818*^9},
 CellID->1051433415]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"a", 
  SuperscriptBox["\[Rule]", "\[Times]"], "b"}]], "Computation",
 CellChangeTimes->{{3.5921370522646*^9, 3.592137057700138*^9}, {
  3.592198132410369*^9, 3.592198155673495*^9}, {3.592642036903838*^9, 
  3.592642044042927*^9}},
 CellID->808578877],

Cell[BoxData[
 DynamicModuleBox[{Typeset`var$$ = False}, 
  InterpretationBox[
   StyleBox[
    PaneSelectorBox[{False->GridBox[{
       {
        OpenerBox[Dynamic[Typeset`var$$],
         Appearance->Automatic,
         AutoAction->False,
         ContinuousAction->False,
         Enabled->Automatic], "\<\"\"\>"}
      },
      AutoDelete->False,
      BaselinePosition->{1, 1},
      GridBoxAlignment->{"Columns" -> {{Left}}},
      GridBoxBackground->{"Columns" -> {{Automatic}}},
      GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
      GridBoxSpacings->{"Columns" -> {{0.2}}, "Rows" -> {{0.5}}}], True->
     GridBox[{
       {
        OpenerBox[Dynamic[Typeset`var$$],
         Appearance->Automatic,
         AutoAction->False,
         ContinuousAction->False,
         Enabled->Automatic], "\<\"\"\>"},
       {"", 
        PaneBox[
         TagBox[GridBox[{
            {
             TagBox[
              DynamicModuleBox[{Typeset`var$$ = False}, 
               InterpretationBox[
                StyleBox[
                 PaneSelectorBox[{False->GridBox[{
                    {
                    OpenerBox[Dynamic[Typeset`var$$],
                    Appearance->Automatic,
                    AutoAction->False,
                    ContinuousAction->False,
                    Enabled->Automatic], 
                    
                    StyleBox["\<\"Knowledge used in computation\"\>", 
                    "CIContent",
                    StripOnInput->False]}
                   },
                   AutoDelete->False,
                   BaselinePosition->{1, 1},
                   GridBoxAlignment->{"Columns" -> {{Left}}},
                   GridBoxBackground->{"Columns" -> {{Automatic}}},
                   
                   GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
                   
                   GridBoxSpacings->{
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}], True->
                  GridBox[{
                    {
                    OpenerBox[Dynamic[Typeset`var$$],
                    Appearance->Automatic,
                    AutoAction->False,
                    ContinuousAction->False,
                    Enabled->Automatic], 
                    
                    StyleBox["\<\"Knowledge used in computation\"\>", 
                    "CIContent",
                    StripOnInput->False]},
                    {"", 
                    PaneBox[
                    StyleBox[
                    RowBox[{"{", "}"}], "CIContent",
                    StripOnInput->False],
                    ImageMargins->0]}
                   },
                   AutoDelete->False,
                   BaselinePosition->{1, 1},
                   GridBoxAlignment->{"Columns" -> {{Left}}},
                   GridBoxBackground->{"Columns" -> {{Automatic}}},
                   
                   GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
                   
                   GridBoxSpacings->{
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}]}, Dynamic[
                  Typeset`var$$],
                  Alignment->Automatic,
                  BaselinePosition->Baseline,
                  DefaultBaseStyle->"OpenerView",
                  ImageMargins->0,
                  ImageSize->Automatic],
                 Deployed->False,
                 StripOnInput->False],
                OpenerView[{
                  Style["Knowledge used in computation", "CIContent"], 
                  Style[{}, "CIContent"]}, False]],
               DynamicModuleValues:>Automatic],
              Setting[#, {0}]& ]},
            {
             TagBox[
              DynamicModuleBox[{Typeset`var$$ = False}, 
               InterpretationBox[
                StyleBox[
                 PaneSelectorBox[{False->GridBox[{
                    {
                    OpenerBox[Dynamic[Typeset`var$$],
                    Appearance->Automatic,
                    AutoAction->False,
                    ContinuousAction->False,
                    Enabled->Automatic], 
                    
                    StyleBox["\<\"Builtins used in computation\"\>", 
                    "CIContent",
                    StripOnInput->False]}
                   },
                   AutoDelete->False,
                   BaselinePosition->{1, 1},
                   GridBoxAlignment->{"Columns" -> {{Left}}},
                   GridBoxBackground->{"Columns" -> {{Automatic}}},
                   
                   GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
                   
                   GridBoxSpacings->{
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}], True->
                  GridBox[{
                    {
                    OpenerBox[Dynamic[Typeset`var$$],
                    Appearance->Automatic,
                    AutoAction->False,
                    ContinuousAction->False,
                    Enabled->Automatic], 
                    
                    StyleBox["\<\"Builtins used in computation\"\>", 
                    "CIContent",
                    StripOnInput->False]},
                    {"", 
                    PaneBox[
                    StyleBox[
                    RowBox[{"{", 
                    
                    RowBox[{"\<\"AbsValue\"\>", ",", "\<\"And\"\>", 
                    ",", "\<\"Append\"\>", ",", "\<\"Cardinality\"\>", 
                    ",", "\<\"CartesianProduct\"\>", 
                    ",", "\<\"CaseDistinction\"\>", ",", "\<\"Delete\"\>", 
                    ",", "\<\"DeleteAt\"\>", ",", "\<\"Difference\"\>", 
                    ",", "\<\"Divide\"\>", ",", "\<\"Do\"\>", 
                    ",", "\<\"Exists\"\>", ",", "\<\"For\"\>", 
                    ",", "\<\"Forall\"\>", ",", "\<\"Greater\"\>", 
                    ",", "\<\"GreaterEqual\"\>", ",", "\<\"Iff\"\>", 
                    ",", "\<\"Implies\"\>", ",", "\<\"Insert\"\>", 
                    ",", "\<\"IntegerQR\"\>", ",", "\<\"IntegerRange\"\>", 
                    ",", "\<\"Intersection\"\>", ",", "\<\"isComplex\"\>", 
                    ",", "\<\"isComplexP\"\>", ",", "\<\"IsElement\"\>", 
                    ",", "\<\"isInteger\"\>", ",", "\<\"isRational\"\>", 
                    ",", "\<\"isReal\"\>", ",", "\<\"isSet\"\>", 
                    ",", "\<\"isTuple\"\>", ",", "\<\"Join\"\>", 
                    ",", "\<\"Length\"\>", ",", "\<\"Less\"\>", 
                    ",", "\<\"LessEqual\"\>", ",", "\<\"Let\"\>", 
                    ",", "\<\"Max\"\>", ",", "\<\"MaximumElementSet\"\>", 
                    ",", "\<\"Min\"\>", ",", "\<\"MinimumElementSet\"\>", 
                    ",", "\<\"Module\"\>", ",", "\<\"Not\"\>", 
                    ",", "\<\"Or\"\>", ",", "\<\"Plus\"\>", 
                    ",", "\<\"Power\"\>", ",", "\<\"PowerSet\"\>", 
                    ",", "\<\"Prepend\"\>", ",", "\<\"ProductOf\"\>", 
                    ",", "\<\"Radical\"\>", ",", "\<\"RationalRange\"\>", 
                    ",", "\<\"RealRange\"\>", ",", "\<\"Replace\"\>", 
                    ",", "\<\"ReplacePart\"\>", ",", "\<\"SetEqual\"\>", 
                    ",", "\<\"Subscript\"\>", ",", "\<\"Subset\"\>", 
                    ",", "\<\"SubsetEqual\"\>", ",", "\<\"Subtract\"\>", 
                    ",", "\<\"SumOf\"\>", ",", "\<\"Superset\"\>", 
                    ",", "\<\"SupersetEqual\"\>", ",", "\<\"Switch\"\>", 
                    ",", "\<\"SymmetricDifference\"\>", ",", "\<\"Times\"\>", 
                    ",", "\<\"TupleEqual\"\>", ",", "\<\"Union\"\>", 
                    ",", "\<\"Which\"\>", ",", "\<\"While\"\>", 
                    ",", "\<\"\[DoubleStruckCapitalC]\"\>", 
                    ",", "\<\"\[DoubleStruckCapitalC]P\"\>"}], "}"}], 
                    "CIContent",
                    StripOnInput->False],
                    ImageMargins->0]}
                   },
                   AutoDelete->False,
                   BaselinePosition->{1, 1},
                   GridBoxAlignment->{"Columns" -> {{Left}}},
                   GridBoxBackground->{"Columns" -> {{Automatic}}},
                   
                   GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
                   
                   GridBoxSpacings->{
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}]}, Dynamic[
                  Typeset`var$$],
                  Alignment->Automatic,
                  BaselinePosition->Baseline,
                  DefaultBaseStyle->"OpenerView",
                  ImageMargins->0,
                  ImageSize->Automatic],
                 Deployed->False,
                 StripOnInput->False],
                OpenerView[{
                  Style["Builtins used in computation", "CIContent"], 
                  
                  Style[{"AbsValue", "And", "Append", "Cardinality", 
                    "CartesianProduct", "CaseDistinction", "Delete", 
                    "DeleteAt", "Difference", "Divide", "Do", "Exists", "For",
                     "Forall", "Greater", "GreaterEqual", "Iff", "Implies", 
                    "Insert", "IntegerQR", "IntegerRange", "Intersection", 
                    "isComplex", "isComplexP", "IsElement", "isInteger", 
                    "isRational", "isReal", "isSet", "isTuple", "Join", 
                    "Length", "Less", "LessEqual", "Let", "Max", 
                    "MaximumElementSet", "Min", "MinimumElementSet", "Module",
                     "Not", "Or", "Plus", "Power", "PowerSet", "Prepend", 
                    "ProductOf", "Radical", "RationalRange", "RealRange", 
                    "Replace", "ReplacePart", "SetEqual", "Subscript", 
                    "Subset", "SubsetEqual", "Subtract", "SumOf", "Superset", 
                    "SupersetEqual", "Switch", "SymmetricDifference", "Times",
                     "TupleEqual", "Union", "Which", "While", 
                    "\[DoubleStruckCapitalC]", "\[DoubleStruckCapitalC]P"}, 
                   "CIContent"]}, False]],
               DynamicModuleValues:>Automatic],
              Setting[#, {0}]& ]},
            {
             ButtonBox["\<\"Restore environment\"\>",
              Appearance->Automatic,
              
              ButtonFunction:>
               Theorema`Interface`GUI`Private`setCompEnv[{}, {{
                 "AbsValue", True}, {"And", True}, {"Append", True}, {
                 "Cardinality", True}, {"CartesianProduct", True}, {
                 "CaseDistinction", True}, {"Delete", True}, {
                 "DeleteAt", True}, {"Difference", True}, {"Divide", True}, {
                 "Do", True}, {"Equal", False}, {"Exists", True}, {
                 "For", True}, {"Forall", True}, {"Greater", True}, {
                 "GreaterEqual", True}, {"Iff", True}, {"Implies", True}, {
                 "Insert", True}, {"IntegerQR", True}, {
                 "IntegerRange", True}, {"Intersection", True}, {
                 "isComplex", True}, {"isComplexP", True}, {
                 "IsElement", True}, {"isInteger", True}, {
                 "isRational", True}, {"isReal", True}, {"isSet", True}, {
                 "isTuple", True}, {"Join", True}, {"Length", True}, {
                 "Less", True}, {"LessEqual", True}, {"Let", True}, {
                 "Max", True}, {"MaximumElementSet", True}, {"Min", True}, {
                 "MinimumElementSet", True}, {"Module", True}, {
                 "Not", True}, {"Or", True}, {"Plus", True}, {
                 "Power", True}, {"PowerSet", True}, {"Prepend", True}, {
                 "ProductOf", True}, {"Radical", True}, {
                 "RationalRange", True}, {"RealRange", True}, {
                 "Replace", True}, {"ReplacePart", True}, {
                 "SetEqual", True}, {"Subscript", True}, {"Subset", True}, {
                 "SubsetEqual", True}, {"Subtract", True}, {"SumOf", True}, {
                 "Superset", True}, {"SupersetEqual", True}, {
                 "Switch", True}, {"SymmetricDifference", True}, {
                 "Times", True}, {"TupleEqual", True}, {"Union", True}, {
                 "Which", True}, {"While", True}, {
                 "\[DoubleStruckCapitalC]", True}, {
                 "\[DoubleStruckCapitalC]P", True}}],
              Evaluator->Automatic,
              ImageSize->Automatic,
              Method->"Preemptive"]}
           },
           DefaultBaseStyle->"Column",
           GridBoxAlignment->{"Columns" -> {{Left}}},
           
           GridBoxItemSize->{
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
          "Column"],
         ImageMargins->0]}
      },
      AutoDelete->False,
      BaselinePosition->{1, 1},
      GridBoxAlignment->{"Columns" -> {{Left}}},
      GridBoxBackground->{"Columns" -> {{Automatic}}},
      GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
      GridBoxSpacings->{"Columns" -> {{0.2}}, "Rows" -> {{0.5}}}]}, Dynamic[
     Typeset`var$$],
     Alignment->Automatic,
     BaselinePosition->Baseline,
     DefaultBaseStyle->"OpenerView",
     ImageMargins->0,
     ImageSize->Automatic],
    Deployed->False,
    StripOnInput->False],
   OpenerView[{"", 
     Column[{
       OpenerView[{
         Style["Knowledge used in computation", "CIContent"], 
         Style[{}, "CIContent"]}], 
       OpenerView[{
         Style["Builtins used in computation", "CIContent"], 
         Style[{
          "AbsValue", "And", "Append", "Cardinality", "CartesianProduct", 
           "CaseDistinction", "Delete", "DeleteAt", "Difference", "Divide", 
           "Do", "Exists", "For", "Forall", "Greater", "GreaterEqual", "Iff", 
           "Implies", "Insert", "IntegerQR", "IntegerRange", "Intersection", 
           "isComplex", "isComplexP", "IsElement", "isInteger", "isRational", 
           "isReal", "isSet", "isTuple", "Join", "Length", "Less", 
           "LessEqual", "Let", "Max", "MaximumElementSet", "Min", 
           "MinimumElementSet", "Module", "Not", "Or", "Plus", "Power", 
           "PowerSet", "Prepend", "ProductOf", "Radical", "RationalRange", 
           "RealRange", "Replace", "ReplacePart", "SetEqual", "Subscript", 
           "Subset", "SubsetEqual", "Subtract", "SumOf", "Superset", 
           "SupersetEqual", "Switch", "SymmetricDifference", "Times", 
           "TupleEqual", "Union", "Which", "While", "\[DoubleStruckCapitalC]",
            "\[DoubleStruckCapitalC]P"}, "CIContent"]}], 
       Button["Restore environment", 
        Theorema`Interface`GUI`Private`setCompEnv[{}, {{"AbsValue", True}, {
          "And", True}, {"Append", True}, {"Cardinality", True}, {
          "CartesianProduct", True}, {"CaseDistinction", True}, {
          "Delete", True}, {"DeleteAt", True}, {"Difference", True}, {
          "Divide", True}, {"Do", True}, {"Equal", False}, {"Exists", True}, {
          "For", True}, {"Forall", True}, {"Greater", True}, {
          "GreaterEqual", True}, {"Iff", True}, {"Implies", True}, {
          "Insert", True}, {"IntegerQR", True}, {"IntegerRange", True}, {
          "Intersection", True}, {"isComplex", True}, {"isComplexP", True}, {
          "IsElement", True}, {"isInteger", True}, {"isRational", True}, {
          "isReal", True}, {"isSet", True}, {"isTuple", True}, {
          "Join", True}, {"Length", True}, {"Less", True}, {
          "LessEqual", True}, {"Let", True}, {"Max", True}, {
          "MaximumElementSet", True}, {"Min", True}, {
          "MinimumElementSet", True}, {"Module", True}, {"Not", True}, {
          "Or", True}, {"Plus", True}, {"Power", True}, {"PowerSet", True}, {
          "Prepend", True}, {"ProductOf", True}, {"Radical", True}, {
          "RationalRange", True}, {"RealRange", True}, {"Replace", True}, {
          "ReplacePart", True}, {"SetEqual", True}, {"Subscript", True}, {
          "Subset", True}, {"SubsetEqual", True}, {"Subtract", True}, {
          "SumOf", True}, {"Superset", True}, {"SupersetEqual", True}, {
          "Switch", True}, {"SymmetricDifference", True}, {"Times", True}, {
          "TupleEqual", True}, {"Union", True}, {"Which", True}, {
          "While", True}, {"\[DoubleStruckCapitalC]", True}, {
          "\[DoubleStruckCapitalC]P", True}}], ImageSize -> Automatic]}]}, 
    False]],
  DynamicModuleValues:>{}]], "ComputationInfo",
 CellChangeTimes->{3.593237892475248*^9},
 CellID->1628665526],

Cell[BoxData[
 FormBox[
  RowBox[{"a", 
   TemplateBox[{"\[Rule]","*"},
    "Superscript"], "b"}], TheoremaForm]], "ComputationResult",
 CellChangeTimes->{3.592198156563188*^9, 3.592198400145712*^9, 
  3.592634613520272*^9, 3.592634767105468*^9, 3.592642045544252*^9, 
  3.592650143203591*^9, 3.592715785438713*^9, 3.593237892491746*^9},
 CellID->1798898406]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 SuperscriptBox[
  UnderscriptBox["+", "D"], 
  RowBox[{
   RowBox[{
    TagBox["(",
     "AutoParentheses"], 
    TagBox["\[Times]",
     Identity], 
    TagBox[")",
     "AutoParentheses"]}], ",", "1", ",", 
   RowBox[{
    TagBox["(",
     "AutoParentheses"], 
    TagBox["+",
     Identity], 
    TagBox[")",
     "AutoParentheses"]}]}]]], "Computation",
 CellChangeTimes->{{3.592137541289874*^9, 3.592137542905607*^9}, {
  3.592137598306189*^9, 3.592137603868453*^9}, {3.592198054341407*^9, 
  3.592198063091416*^9}, {3.592198094403038*^9, 3.592198116773143*^9}, {
  3.592198428713355*^9, 3.59219849553948*^9}, {3.592634854422228*^9, 
  3.592634889838581*^9}, {3.592642055272813*^9, 3.592642089635988*^9}},
 CellID->99700712],

Cell[BoxData[
 DynamicModuleBox[{Typeset`var$$ = False}, 
  InterpretationBox[
   StyleBox[
    PaneSelectorBox[{False->GridBox[{
       {
        OpenerBox[Dynamic[Typeset`var$$],
         Appearance->Automatic,
         AutoAction->False,
         ContinuousAction->False,
         Enabled->Automatic], "\<\"\"\>"}
      },
      AutoDelete->False,
      BaselinePosition->{1, 1},
      GridBoxAlignment->{"Columns" -> {{Left}}},
      GridBoxBackground->{"Columns" -> {{Automatic}}},
      GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
      GridBoxSpacings->{"Columns" -> {{0.2}}, "Rows" -> {{0.5}}}], True->
     GridBox[{
       {
        OpenerBox[Dynamic[Typeset`var$$],
         Appearance->Automatic,
         AutoAction->False,
         ContinuousAction->False,
         Enabled->Automatic], "\<\"\"\>"},
       {"", 
        PaneBox[
         TagBox[GridBox[{
            {
             TagBox[
              DynamicModuleBox[{Typeset`var$$ = False}, 
               InterpretationBox[
                StyleBox[
                 PaneSelectorBox[{False->GridBox[{
                    {
                    OpenerBox[Dynamic[Typeset`var$$],
                    Appearance->Automatic,
                    AutoAction->False,
                    ContinuousAction->False,
                    Enabled->Automatic], 
                    
                    StyleBox["\<\"Knowledge used in computation\"\>", 
                    "CIContent",
                    StripOnInput->False]}
                   },
                   AutoDelete->False,
                   BaselinePosition->{1, 1},
                   GridBoxAlignment->{"Columns" -> {{Left}}},
                   GridBoxBackground->{"Columns" -> {{Automatic}}},
                   
                   GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
                   
                   GridBoxSpacings->{
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}], True->
                  GridBox[{
                    {
                    OpenerBox[Dynamic[Typeset`var$$],
                    Appearance->Automatic,
                    AutoAction->False,
                    ContinuousAction->False,
                    Enabled->Automatic], 
                    
                    StyleBox["\<\"Knowledge used in computation\"\>", 
                    "CIContent",
                    StripOnInput->False]},
                    {"", 
                    PaneBox[
                    StyleBox[
                    RowBox[{"{", "}"}], "CIContent",
                    StripOnInput->False],
                    ImageMargins->0]}
                   },
                   AutoDelete->False,
                   BaselinePosition->{1, 1},
                   GridBoxAlignment->{"Columns" -> {{Left}}},
                   GridBoxBackground->{"Columns" -> {{Automatic}}},
                   
                   GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
                   
                   GridBoxSpacings->{
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}]}, Dynamic[
                  Typeset`var$$],
                  Alignment->Automatic,
                  BaselinePosition->Baseline,
                  DefaultBaseStyle->"OpenerView",
                  ImageMargins->0,
                  ImageSize->Automatic],
                 Deployed->False,
                 StripOnInput->False],
                OpenerView[{
                  Style["Knowledge used in computation", "CIContent"], 
                  Style[{}, "CIContent"]}, False]],
               DynamicModuleValues:>Automatic],
              Setting[#, {0}]& ]},
            {
             TagBox[
              DynamicModuleBox[{Typeset`var$$ = False}, 
               InterpretationBox[
                StyleBox[
                 PaneSelectorBox[{False->GridBox[{
                    {
                    OpenerBox[Dynamic[Typeset`var$$],
                    Appearance->Automatic,
                    AutoAction->False,
                    ContinuousAction->False,
                    Enabled->Automatic], 
                    
                    StyleBox["\<\"Builtins used in computation\"\>", 
                    "CIContent",
                    StripOnInput->False]}
                   },
                   AutoDelete->False,
                   BaselinePosition->{1, 1},
                   GridBoxAlignment->{"Columns" -> {{Left}}},
                   GridBoxBackground->{"Columns" -> {{Automatic}}},
                   
                   GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
                   
                   GridBoxSpacings->{
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}], True->
                  GridBox[{
                    {
                    OpenerBox[Dynamic[Typeset`var$$],
                    Appearance->Automatic,
                    AutoAction->False,
                    ContinuousAction->False,
                    Enabled->Automatic], 
                    
                    StyleBox["\<\"Builtins used in computation\"\>", 
                    "CIContent",
                    StripOnInput->False]},
                    {"", 
                    PaneBox[
                    StyleBox[
                    RowBox[{"{", 
                    
                    RowBox[{"\<\"AbsValue\"\>", ",", "\<\"And\"\>", 
                    ",", "\<\"Append\"\>", ",", "\<\"Cardinality\"\>", 
                    ",", "\<\"CartesianProduct\"\>", 
                    ",", "\<\"CaseDistinction\"\>", ",", "\<\"Delete\"\>", 
                    ",", "\<\"DeleteAt\"\>", ",", "\<\"Difference\"\>", 
                    ",", "\<\"Divide\"\>", ",", "\<\"Do\"\>", 
                    ",", "\<\"Exists\"\>", ",", "\<\"For\"\>", 
                    ",", "\<\"Forall\"\>", ",", "\<\"Greater\"\>", 
                    ",", "\<\"GreaterEqual\"\>", ",", "\<\"Iff\"\>", 
                    ",", "\<\"Implies\"\>", ",", "\<\"Insert\"\>", 
                    ",", "\<\"IntegerQR\"\>", ",", "\<\"IntegerRange\"\>", 
                    ",", "\<\"Intersection\"\>", ",", "\<\"isComplex\"\>", 
                    ",", "\<\"isComplexP\"\>", ",", "\<\"IsElement\"\>", 
                    ",", "\<\"isInteger\"\>", ",", "\<\"isRational\"\>", 
                    ",", "\<\"isReal\"\>", ",", "\<\"isSet\"\>", 
                    ",", "\<\"isTuple\"\>", ",", "\<\"Join\"\>", 
                    ",", "\<\"Length\"\>", ",", "\<\"Less\"\>", 
                    ",", "\<\"LessEqual\"\>", ",", "\<\"Let\"\>", 
                    ",", "\<\"Max\"\>", ",", "\<\"MaximumElementSet\"\>", 
                    ",", "\<\"Min\"\>", ",", "\<\"MinimumElementSet\"\>", 
                    ",", "\<\"Module\"\>", ",", "\<\"Not\"\>", 
                    ",", "\<\"Or\"\>", ",", "\<\"Plus\"\>", 
                    ",", "\<\"Power\"\>", ",", "\<\"PowerSet\"\>", 
                    ",", "\<\"Prepend\"\>", ",", "\<\"ProductOf\"\>", 
                    ",", "\<\"Radical\"\>", ",", "\<\"RationalRange\"\>", 
                    ",", "\<\"RealRange\"\>", ",", "\<\"Replace\"\>", 
                    ",", "\<\"ReplacePart\"\>", ",", "\<\"SetEqual\"\>", 
                    ",", "\<\"Subscript\"\>", ",", "\<\"Subset\"\>", 
                    ",", "\<\"SubsetEqual\"\>", ",", "\<\"Subtract\"\>", 
                    ",", "\<\"SumOf\"\>", ",", "\<\"Superset\"\>", 
                    ",", "\<\"SupersetEqual\"\>", ",", "\<\"Switch\"\>", 
                    ",", "\<\"SymmetricDifference\"\>", ",", "\<\"Times\"\>", 
                    ",", "\<\"TupleEqual\"\>", ",", "\<\"Union\"\>", 
                    ",", "\<\"Which\"\>", ",", "\<\"While\"\>", 
                    ",", "\<\"\[DoubleStruckCapitalC]\"\>", 
                    ",", "\<\"\[DoubleStruckCapitalC]P\"\>"}], "}"}], 
                    "CIContent",
                    StripOnInput->False],
                    ImageMargins->0]}
                   },
                   AutoDelete->False,
                   BaselinePosition->{1, 1},
                   GridBoxAlignment->{"Columns" -> {{Left}}},
                   GridBoxBackground->{"Columns" -> {{Automatic}}},
                   
                   GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
                   
                   GridBoxSpacings->{
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}]}, Dynamic[
                  Typeset`var$$],
                  Alignment->Automatic,
                  BaselinePosition->Baseline,
                  DefaultBaseStyle->"OpenerView",
                  ImageMargins->0,
                  ImageSize->Automatic],
                 Deployed->False,
                 StripOnInput->False],
                OpenerView[{
                  Style["Builtins used in computation", "CIContent"], 
                  
                  Style[{"AbsValue", "And", "Append", "Cardinality", 
                    "CartesianProduct", "CaseDistinction", "Delete", 
                    "DeleteAt", "Difference", "Divide", "Do", "Exists", "For",
                     "Forall", "Greater", "GreaterEqual", "Iff", "Implies", 
                    "Insert", "IntegerQR", "IntegerRange", "Intersection", 
                    "isComplex", "isComplexP", "IsElement", "isInteger", 
                    "isRational", "isReal", "isSet", "isTuple", "Join", 
                    "Length", "Less", "LessEqual", "Let", "Max", 
                    "MaximumElementSet", "Min", "MinimumElementSet", "Module",
                     "Not", "Or", "Plus", "Power", "PowerSet", "Prepend", 
                    "ProductOf", "Radical", "RationalRange", "RealRange", 
                    "Replace", "ReplacePart", "SetEqual", "Subscript", 
                    "Subset", "SubsetEqual", "Subtract", "SumOf", "Superset", 
                    "SupersetEqual", "Switch", "SymmetricDifference", "Times",
                     "TupleEqual", "Union", "Which", "While", 
                    "\[DoubleStruckCapitalC]", "\[DoubleStruckCapitalC]P"}, 
                   "CIContent"]}, False]],
               DynamicModuleValues:>Automatic],
              Setting[#, {0}]& ]},
            {
             ButtonBox["\<\"Restore environment\"\>",
              Appearance->Automatic,
              
              ButtonFunction:>
               Theorema`Interface`GUI`Private`setCompEnv[{}, {{
                 "AbsValue", True}, {"And", True}, {"Append", True}, {
                 "Cardinality", True}, {"CartesianProduct", True}, {
                 "CaseDistinction", True}, {"Delete", True}, {
                 "DeleteAt", True}, {"Difference", True}, {"Divide", True}, {
                 "Do", True}, {"Equal", False}, {"Exists", True}, {
                 "For", True}, {"Forall", True}, {"Greater", True}, {
                 "GreaterEqual", True}, {"Iff", True}, {"Implies", True}, {
                 "Insert", True}, {"IntegerQR", True}, {
                 "IntegerRange", True}, {"Intersection", True}, {
                 "isComplex", True}, {"isComplexP", True}, {
                 "IsElement", True}, {"isInteger", True}, {
                 "isRational", True}, {"isReal", True}, {"isSet", True}, {
                 "isTuple", True}, {"Join", True}, {"Length", True}, {
                 "Less", True}, {"LessEqual", True}, {"Let", True}, {
                 "Max", True}, {"MaximumElementSet", True}, {"Min", True}, {
                 "MinimumElementSet", True}, {"Module", True}, {
                 "Not", True}, {"Or", True}, {"Plus", True}, {
                 "Power", True}, {"PowerSet", True}, {"Prepend", True}, {
                 "ProductOf", True}, {"Radical", True}, {
                 "RationalRange", True}, {"RealRange", True}, {
                 "Replace", True}, {"ReplacePart", True}, {
                 "SetEqual", True}, {"Subscript", True}, {"Subset", True}, {
                 "SubsetEqual", True}, {"Subtract", True}, {"SumOf", True}, {
                 "Superset", True}, {"SupersetEqual", True}, {
                 "Switch", True}, {"SymmetricDifference", True}, {
                 "Times", True}, {"TupleEqual", True}, {"Union", True}, {
                 "Which", True}, {"While", True}, {
                 "\[DoubleStruckCapitalC]", True}, {
                 "\[DoubleStruckCapitalC]P", True}}],
              Evaluator->Automatic,
              ImageSize->Automatic,
              Method->"Preemptive"]}
           },
           DefaultBaseStyle->"Column",
           GridBoxAlignment->{"Columns" -> {{Left}}},
           
           GridBoxItemSize->{
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
          "Column"],
         ImageMargins->0]}
      },
      AutoDelete->False,
      BaselinePosition->{1, 1},
      GridBoxAlignment->{"Columns" -> {{Left}}},
      GridBoxBackground->{"Columns" -> {{Automatic}}},
      GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
      GridBoxSpacings->{"Columns" -> {{0.2}}, "Rows" -> {{0.5}}}]}, Dynamic[
     Typeset`var$$],
     Alignment->Automatic,
     BaselinePosition->Baseline,
     DefaultBaseStyle->"OpenerView",
     ImageMargins->0,
     ImageSize->Automatic],
    Deployed->False,
    StripOnInput->False],
   OpenerView[{"", 
     Column[{
       OpenerView[{
         Style["Knowledge used in computation", "CIContent"], 
         Style[{}, "CIContent"]}], 
       OpenerView[{
         Style["Builtins used in computation", "CIContent"], 
         Style[{
          "AbsValue", "And", "Append", "Cardinality", "CartesianProduct", 
           "CaseDistinction", "Delete", "DeleteAt", "Difference", "Divide", 
           "Do", "Exists", "For", "Forall", "Greater", "GreaterEqual", "Iff", 
           "Implies", "Insert", "IntegerQR", "IntegerRange", "Intersection", 
           "isComplex", "isComplexP", "IsElement", "isInteger", "isRational", 
           "isReal", "isSet", "isTuple", "Join", "Length", "Less", 
           "LessEqual", "Let", "Max", "MaximumElementSet", "Min", 
           "MinimumElementSet", "Module", "Not", "Or", "Plus", "Power", 
           "PowerSet", "Prepend", "ProductOf", "Radical", "RationalRange", 
           "RealRange", "Replace", "ReplacePart", "SetEqual", "Subscript", 
           "Subset", "SubsetEqual", "Subtract", "SumOf", "Superset", 
           "SupersetEqual", "Switch", "SymmetricDifference", "Times", 
           "TupleEqual", "Union", "Which", "While", "\[DoubleStruckCapitalC]",
            "\[DoubleStruckCapitalC]P"}, "CIContent"]}], 
       Button["Restore environment", 
        Theorema`Interface`GUI`Private`setCompEnv[{}, {{"AbsValue", True}, {
          "And", True}, {"Append", True}, {"Cardinality", True}, {
          "CartesianProduct", True}, {"CaseDistinction", True}, {
          "Delete", True}, {"DeleteAt", True}, {"Difference", True}, {
          "Divide", True}, {"Do", True}, {"Equal", False}, {"Exists", True}, {
          "For", True}, {"Forall", True}, {"Greater", True}, {
          "GreaterEqual", True}, {"Iff", True}, {"Implies", True}, {
          "Insert", True}, {"IntegerQR", True}, {"IntegerRange", True}, {
          "Intersection", True}, {"isComplex", True}, {"isComplexP", True}, {
          "IsElement", True}, {"isInteger", True}, {"isRational", True}, {
          "isReal", True}, {"isSet", True}, {"isTuple", True}, {
          "Join", True}, {"Length", True}, {"Less", True}, {
          "LessEqual", True}, {"Let", True}, {"Max", True}, {
          "MaximumElementSet", True}, {"Min", True}, {
          "MinimumElementSet", True}, {"Module", True}, {"Not", True}, {
          "Or", True}, {"Plus", True}, {"Power", True}, {"PowerSet", True}, {
          "Prepend", True}, {"ProductOf", True}, {"Radical", True}, {
          "RationalRange", True}, {"RealRange", True}, {"Replace", True}, {
          "ReplacePart", True}, {"SetEqual", True}, {"Subscript", True}, {
          "Subset", True}, {"SubsetEqual", True}, {"Subtract", True}, {
          "SumOf", True}, {"Superset", True}, {"SupersetEqual", True}, {
          "Switch", True}, {"SymmetricDifference", True}, {"Times", True}, {
          "TupleEqual", True}, {"Union", True}, {"Which", True}, {
          "While", True}, {"\[DoubleStruckCapitalC]", True}, {
          "\[DoubleStruckCapitalC]P", True}}], ImageSize -> Automatic]}]}, 
    False]],
  DynamicModuleValues:>{}]], "ComputationInfo",
 CellChangeTimes->{3.592715792123234*^9},
 CellID->1720991765],

Cell[BoxData[
 FormBox[
  SuperscriptBox[
   RowBox[{
    TagBox["(",
     "AutoParentheses"], 
    UnderscriptBox["+", "D"], 
    TagBox[")",
     "AutoParentheses"]}], 
   RowBox[{"*", ",", "1", ",", "+"}]], TheoremaForm]], "ComputationResult",
 CellChangeTimes->{3.59263489103534*^9, 3.59264209153898*^9, 
  3.592644563651267*^9, 3.592650146980247*^9, 3.592715792140946*^9},
 CellID->1079149365]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  TagBox["(",
   "AutoParentheses"], 
  SubscriptBox[
   OverscriptBox["\[CircleDot]", "0"], "1"], 
  TagBox[")",
   "AutoParentheses"]}]], "Computation",
 CellChangeTimes->{{3.5926421098437*^9, 3.592642131812647*^9}},
 CellID->1285921573],

Cell[BoxData[
 DynamicModuleBox[{Typeset`var$$ = False}, 
  InterpretationBox[
   StyleBox[
    PaneSelectorBox[{False->GridBox[{
       {
        OpenerBox[Dynamic[Typeset`var$$],
         Appearance->Automatic,
         AutoAction->False,
         ContinuousAction->False,
         Enabled->Automatic], "\<\"\"\>"}
      },
      AutoDelete->False,
      BaselinePosition->{1, 1},
      GridBoxAlignment->{"Columns" -> {{Left}}},
      GridBoxBackground->{"Columns" -> {{Automatic}}},
      GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
      GridBoxSpacings->{"Columns" -> {{0.2}}, "Rows" -> {{0.5}}}], True->
     GridBox[{
       {
        OpenerBox[Dynamic[Typeset`var$$],
         Appearance->Automatic,
         AutoAction->False,
         ContinuousAction->False,
         Enabled->Automatic], "\<\"\"\>"},
       {"", 
        PaneBox[
         TagBox[GridBox[{
            {
             TagBox[
              DynamicModuleBox[{Typeset`var$$ = False}, 
               InterpretationBox[
                StyleBox[
                 PaneSelectorBox[{False->GridBox[{
                    {
                    OpenerBox[Dynamic[Typeset`var$$],
                    Appearance->Automatic,
                    AutoAction->False,
                    ContinuousAction->False,
                    Enabled->Automatic], 
                    
                    StyleBox["\<\"Knowledge used in computation\"\>", 
                    "CIContent",
                    StripOnInput->False]}
                   },
                   AutoDelete->False,
                   BaselinePosition->{1, 1},
                   GridBoxAlignment->{"Columns" -> {{Left}}},
                   GridBoxBackground->{"Columns" -> {{Automatic}}},
                   
                   GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
                   
                   GridBoxSpacings->{
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}], True->
                  GridBox[{
                    {
                    OpenerBox[Dynamic[Typeset`var$$],
                    Appearance->Automatic,
                    AutoAction->False,
                    ContinuousAction->False,
                    Enabled->Automatic], 
                    
                    StyleBox["\<\"Knowledge used in computation\"\>", 
                    "CIContent",
                    StripOnInput->False]},
                    {"", 
                    PaneBox[
                    StyleBox[
                    RowBox[{"{", "}"}], "CIContent",
                    StripOnInput->False],
                    ImageMargins->0]}
                   },
                   AutoDelete->False,
                   BaselinePosition->{1, 1},
                   GridBoxAlignment->{"Columns" -> {{Left}}},
                   GridBoxBackground->{"Columns" -> {{Automatic}}},
                   
                   GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
                   
                   GridBoxSpacings->{
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}]}, Dynamic[
                  Typeset`var$$],
                  Alignment->Automatic,
                  BaselinePosition->Baseline,
                  DefaultBaseStyle->"OpenerView",
                  ImageMargins->0,
                  ImageSize->Automatic],
                 Deployed->False,
                 StripOnInput->False],
                OpenerView[{
                  Style["Knowledge used in computation", "CIContent"], 
                  Style[{}, "CIContent"]}, False]],
               DynamicModuleValues:>Automatic],
              Setting[#, {0}]& ]},
            {
             TagBox[
              DynamicModuleBox[{Typeset`var$$ = False}, 
               InterpretationBox[
                StyleBox[
                 PaneSelectorBox[{False->GridBox[{
                    {
                    OpenerBox[Dynamic[Typeset`var$$],
                    Appearance->Automatic,
                    AutoAction->False,
                    ContinuousAction->False,
                    Enabled->Automatic], 
                    
                    StyleBox["\<\"Builtins used in computation\"\>", 
                    "CIContent",
                    StripOnInput->False]}
                   },
                   AutoDelete->False,
                   BaselinePosition->{1, 1},
                   GridBoxAlignment->{"Columns" -> {{Left}}},
                   GridBoxBackground->{"Columns" -> {{Automatic}}},
                   
                   GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
                   
                   GridBoxSpacings->{
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}], True->
                  GridBox[{
                    {
                    OpenerBox[Dynamic[Typeset`var$$],
                    Appearance->Automatic,
                    AutoAction->False,
                    ContinuousAction->False,
                    Enabled->Automatic], 
                    
                    StyleBox["\<\"Builtins used in computation\"\>", 
                    "CIContent",
                    StripOnInput->False]},
                    {"", 
                    PaneBox[
                    StyleBox[
                    RowBox[{"{", 
                    
                    RowBox[{"\<\"AbsValue\"\>", ",", "\<\"And\"\>", 
                    ",", "\<\"Append\"\>", ",", "\<\"Cardinality\"\>", 
                    ",", "\<\"CartesianProduct\"\>", 
                    ",", "\<\"CaseDistinction\"\>", ",", "\<\"Delete\"\>", 
                    ",", "\<\"DeleteAt\"\>", ",", "\<\"Difference\"\>", 
                    ",", "\<\"Divide\"\>", ",", "\<\"Do\"\>", 
                    ",", "\<\"Exists\"\>", ",", "\<\"For\"\>", 
                    ",", "\<\"Forall\"\>", ",", "\<\"Greater\"\>", 
                    ",", "\<\"GreaterEqual\"\>", ",", "\<\"Iff\"\>", 
                    ",", "\<\"Implies\"\>", ",", "\<\"Insert\"\>", 
                    ",", "\<\"IntegerQR\"\>", ",", "\<\"IntegerRange\"\>", 
                    ",", "\<\"Intersection\"\>", ",", "\<\"isComplex\"\>", 
                    ",", "\<\"isComplexP\"\>", ",", "\<\"IsElement\"\>", 
                    ",", "\<\"isInteger\"\>", ",", "\<\"isRational\"\>", 
                    ",", "\<\"isReal\"\>", ",", "\<\"isSet\"\>", 
                    ",", "\<\"isTuple\"\>", ",", "\<\"Join\"\>", 
                    ",", "\<\"Length\"\>", ",", "\<\"Less\"\>", 
                    ",", "\<\"LessEqual\"\>", ",", "\<\"Let\"\>", 
                    ",", "\<\"Max\"\>", ",", "\<\"MaximumElementSet\"\>", 
                    ",", "\<\"Min\"\>", ",", "\<\"MinimumElementSet\"\>", 
                    ",", "\<\"Module\"\>", ",", "\<\"Not\"\>", 
                    ",", "\<\"Or\"\>", ",", "\<\"Plus\"\>", 
                    ",", "\<\"Power\"\>", ",", "\<\"PowerSet\"\>", 
                    ",", "\<\"Prepend\"\>", ",", "\<\"ProductOf\"\>", 
                    ",", "\<\"Radical\"\>", ",", "\<\"RationalRange\"\>", 
                    ",", "\<\"RealRange\"\>", ",", "\<\"Replace\"\>", 
                    ",", "\<\"ReplacePart\"\>", ",", "\<\"SetEqual\"\>", 
                    ",", "\<\"Subscript\"\>", ",", "\<\"Subset\"\>", 
                    ",", "\<\"SubsetEqual\"\>", ",", "\<\"Subtract\"\>", 
                    ",", "\<\"SumOf\"\>", ",", "\<\"Superset\"\>", 
                    ",", "\<\"SupersetEqual\"\>", ",", "\<\"Switch\"\>", 
                    ",", "\<\"SymmetricDifference\"\>", ",", "\<\"Times\"\>", 
                    ",", "\<\"TupleEqual\"\>", ",", "\<\"Union\"\>", 
                    ",", "\<\"Which\"\>", ",", "\<\"While\"\>", 
                    ",", "\<\"\[DoubleStruckCapitalC]\"\>", 
                    ",", "\<\"\[DoubleStruckCapitalC]P\"\>"}], "}"}], 
                    "CIContent",
                    StripOnInput->False],
                    ImageMargins->0]}
                   },
                   AutoDelete->False,
                   BaselinePosition->{1, 1},
                   GridBoxAlignment->{"Columns" -> {{Left}}},
                   GridBoxBackground->{"Columns" -> {{Automatic}}},
                   
                   GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
                   
                   GridBoxSpacings->{
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}]}, Dynamic[
                  Typeset`var$$],
                  Alignment->Automatic,
                  BaselinePosition->Baseline,
                  DefaultBaseStyle->"OpenerView",
                  ImageMargins->0,
                  ImageSize->Automatic],
                 Deployed->False,
                 StripOnInput->False],
                OpenerView[{
                  Style["Builtins used in computation", "CIContent"], 
                  
                  Style[{"AbsValue", "And", "Append", "Cardinality", 
                    "CartesianProduct", "CaseDistinction", "Delete", 
                    "DeleteAt", "Difference", "Divide", "Do", "Exists", "For",
                     "Forall", "Greater", "GreaterEqual", "Iff", "Implies", 
                    "Insert", "IntegerQR", "IntegerRange", "Intersection", 
                    "isComplex", "isComplexP", "IsElement", "isInteger", 
                    "isRational", "isReal", "isSet", "isTuple", "Join", 
                    "Length", "Less", "LessEqual", "Let", "Max", 
                    "MaximumElementSet", "Min", "MinimumElementSet", "Module",
                     "Not", "Or", "Plus", "Power", "PowerSet", "Prepend", 
                    "ProductOf", "Radical", "RationalRange", "RealRange", 
                    "Replace", "ReplacePart", "SetEqual", "Subscript", 
                    "Subset", "SubsetEqual", "Subtract", "SumOf", "Superset", 
                    "SupersetEqual", "Switch", "SymmetricDifference", "Times",
                     "TupleEqual", "Union", "Which", "While", 
                    "\[DoubleStruckCapitalC]", "\[DoubleStruckCapitalC]P"}, 
                   "CIContent"]}, False]],
               DynamicModuleValues:>Automatic],
              Setting[#, {0}]& ]},
            {
             ButtonBox["\<\"Restore environment\"\>",
              Appearance->Automatic,
              
              ButtonFunction:>
               Theorema`Interface`GUI`Private`setCompEnv[{}, {{
                 "AbsValue", True}, {"And", True}, {"Append", True}, {
                 "Cardinality", True}, {"CartesianProduct", True}, {
                 "CaseDistinction", True}, {"Delete", True}, {
                 "DeleteAt", True}, {"Difference", True}, {"Divide", True}, {
                 "Do", True}, {"Equal", False}, {"Exists", True}, {
                 "For", True}, {"Forall", True}, {"Greater", True}, {
                 "GreaterEqual", True}, {"Iff", True}, {"Implies", True}, {
                 "Insert", True}, {"IntegerQR", True}, {
                 "IntegerRange", True}, {"Intersection", True}, {
                 "isComplex", True}, {"isComplexP", True}, {
                 "IsElement", True}, {"isInteger", True}, {
                 "isRational", True}, {"isReal", True}, {"isSet", True}, {
                 "isTuple", True}, {"Join", True}, {"Length", True}, {
                 "Less", True}, {"LessEqual", True}, {"Let", True}, {
                 "Max", True}, {"MaximumElementSet", True}, {"Min", True}, {
                 "MinimumElementSet", True}, {"Module", True}, {
                 "Not", True}, {"Or", True}, {"Plus", True}, {
                 "Power", True}, {"PowerSet", True}, {"Prepend", True}, {
                 "ProductOf", True}, {"Radical", True}, {
                 "RationalRange", True}, {"RealRange", True}, {
                 "Replace", True}, {"ReplacePart", True}, {
                 "SetEqual", True}, {"Subscript", True}, {"Subset", True}, {
                 "SubsetEqual", True}, {"Subtract", True}, {"SumOf", True}, {
                 "Superset", True}, {"SupersetEqual", True}, {
                 "Switch", True}, {"SymmetricDifference", True}, {
                 "Times", True}, {"TupleEqual", True}, {"Union", True}, {
                 "Which", True}, {"While", True}, {
                 "\[DoubleStruckCapitalC]", True}, {
                 "\[DoubleStruckCapitalC]P", True}}],
              Evaluator->Automatic,
              ImageSize->Automatic,
              Method->"Preemptive"]}
           },
           DefaultBaseStyle->"Column",
           GridBoxAlignment->{"Columns" -> {{Left}}},
           
           GridBoxItemSize->{
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
          "Column"],
         ImageMargins->0]}
      },
      AutoDelete->False,
      BaselinePosition->{1, 1},
      GridBoxAlignment->{"Columns" -> {{Left}}},
      GridBoxBackground->{"Columns" -> {{Automatic}}},
      GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
      GridBoxSpacings->{"Columns" -> {{0.2}}, "Rows" -> {{0.5}}}]}, Dynamic[
     Typeset`var$$],
     Alignment->Automatic,
     BaselinePosition->Baseline,
     DefaultBaseStyle->"OpenerView",
     ImageMargins->0,
     ImageSize->Automatic],
    Deployed->False,
    StripOnInput->False],
   OpenerView[{"", 
     Column[{
       OpenerView[{
         Style["Knowledge used in computation", "CIContent"], 
         Style[{}, "CIContent"]}], 
       OpenerView[{
         Style["Builtins used in computation", "CIContent"], 
         Style[{
          "AbsValue", "And", "Append", "Cardinality", "CartesianProduct", 
           "CaseDistinction", "Delete", "DeleteAt", "Difference", "Divide", 
           "Do", "Exists", "For", "Forall", "Greater", "GreaterEqual", "Iff", 
           "Implies", "Insert", "IntegerQR", "IntegerRange", "Intersection", 
           "isComplex", "isComplexP", "IsElement", "isInteger", "isRational", 
           "isReal", "isSet", "isTuple", "Join", "Length", "Less", 
           "LessEqual", "Let", "Max", "MaximumElementSet", "Min", 
           "MinimumElementSet", "Module", "Not", "Or", "Plus", "Power", 
           "PowerSet", "Prepend", "ProductOf", "Radical", "RationalRange", 
           "RealRange", "Replace", "ReplacePart", "SetEqual", "Subscript", 
           "Subset", "SubsetEqual", "Subtract", "SumOf", "Superset", 
           "SupersetEqual", "Switch", "SymmetricDifference", "Times", 
           "TupleEqual", "Union", "Which", "While", "\[DoubleStruckCapitalC]",
            "\[DoubleStruckCapitalC]P"}, "CIContent"]}], 
       Button["Restore environment", 
        Theorema`Interface`GUI`Private`setCompEnv[{}, {{"AbsValue", True}, {
          "And", True}, {"Append", True}, {"Cardinality", True}, {
          "CartesianProduct", True}, {"CaseDistinction", True}, {
          "Delete", True}, {"DeleteAt", True}, {"Difference", True}, {
          "Divide", True}, {"Do", True}, {"Equal", False}, {"Exists", True}, {
          "For", True}, {"Forall", True}, {"Greater", True}, {
          "GreaterEqual", True}, {"Iff", True}, {"Implies", True}, {
          "Insert", True}, {"IntegerQR", True}, {"IntegerRange", True}, {
          "Intersection", True}, {"isComplex", True}, {"isComplexP", True}, {
          "IsElement", True}, {"isInteger", True}, {"isRational", True}, {
          "isReal", True}, {"isSet", True}, {"isTuple", True}, {
          "Join", True}, {"Length", True}, {"Less", True}, {
          "LessEqual", True}, {"Let", True}, {"Max", True}, {
          "MaximumElementSet", True}, {"Min", True}, {
          "MinimumElementSet", True}, {"Module", True}, {"Not", True}, {
          "Or", True}, {"Plus", True}, {"Power", True}, {"PowerSet", True}, {
          "Prepend", True}, {"ProductOf", True}, {"Radical", True}, {
          "RationalRange", True}, {"RealRange", True}, {"Replace", True}, {
          "ReplacePart", True}, {"SetEqual", True}, {"Subscript", True}, {
          "Subset", True}, {"SubsetEqual", True}, {"Subtract", True}, {
          "SumOf", True}, {"Superset", True}, {"SupersetEqual", True}, {
          "Switch", True}, {"SymmetricDifference", True}, {"Times", True}, {
          "TupleEqual", True}, {"Union", True}, {"Which", True}, {
          "While", True}, {"\[DoubleStruckCapitalC]", True}, {
          "\[DoubleStruckCapitalC]P", True}}], ImageSize -> Automatic]}]}, 
    False]],
  DynamicModuleValues:>{}]], "ComputationInfo",
 CellChangeTimes->{3.592715797082326*^9},
 CellID->494647160],

Cell[BoxData[
 FormBox[
  SubscriptBox[
   OverscriptBox["\[CircleDot]", "0"], "1"], 
  TheoremaForm]], "ComputationResult",
 CellChangeTimes->{3.592642133078739*^9, 3.592650151493026*^9, 
  3.592715797250198*^9},
 CellID->1091497630]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  TagBox[
   UnderscriptBox["\[Square]", "\[DoubleStruckCapitalZ]"],
   Identity], "4"}]], "Computation",
 CellChangeTimes->{{3.592642524417408*^9, 3.592642535596766*^9}, {
  3.592642632618167*^9, 3.592642653202837*^9}, {3.592716224713788*^9, 
  3.592716227076996*^9}},
 CellID->1108750292],

Cell[BoxData[
 DynamicModuleBox[{Typeset`var$$ = False}, 
  InterpretationBox[
   StyleBox[
    PaneSelectorBox[{False->GridBox[{
       {
        OpenerBox[Dynamic[Typeset`var$$],
         Appearance->Automatic,
         AutoAction->False,
         ContinuousAction->False,
         Enabled->Automatic], "\<\"\"\>"}
      },
      AutoDelete->False,
      BaselinePosition->{1, 1},
      GridBoxAlignment->{"Columns" -> {{Left}}},
      GridBoxBackground->{"Columns" -> {{Automatic}}},
      GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
      GridBoxSpacings->{"Columns" -> {{0.2}}, "Rows" -> {{0.5}}}], True->
     GridBox[{
       {
        OpenerBox[Dynamic[Typeset`var$$],
         Appearance->Automatic,
         AutoAction->False,
         ContinuousAction->False,
         Enabled->Automatic], "\<\"\"\>"},
       {"", 
        PaneBox[
         TagBox[GridBox[{
            {
             TagBox[
              DynamicModuleBox[{Typeset`var$$ = False}, 
               InterpretationBox[
                StyleBox[
                 PaneSelectorBox[{False->GridBox[{
                    {
                    OpenerBox[Dynamic[Typeset`var$$],
                    Appearance->Automatic,
                    AutoAction->False,
                    ContinuousAction->False,
                    Enabled->Automatic], 
                    
                    StyleBox["\<\"Knowledge used in computation\"\>", 
                    "CIContent",
                    StripOnInput->False]}
                   },
                   AutoDelete->False,
                   BaselinePosition->{1, 1},
                   GridBoxAlignment->{"Columns" -> {{Left}}},
                   GridBoxBackground->{"Columns" -> {{Automatic}}},
                   
                   GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
                   
                   GridBoxSpacings->{
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}], True->
                  GridBox[{
                    {
                    OpenerBox[Dynamic[Typeset`var$$],
                    Appearance->Automatic,
                    AutoAction->False,
                    ContinuousAction->False,
                    Enabled->Automatic], 
                    
                    StyleBox["\<\"Knowledge used in computation\"\>", 
                    "CIContent",
                    StripOnInput->False]},
                    {"", 
                    PaneBox[
                    StyleBox[
                    RowBox[{"{", "}"}], "CIContent",
                    StripOnInput->False],
                    ImageMargins->0]}
                   },
                   AutoDelete->False,
                   BaselinePosition->{1, 1},
                   GridBoxAlignment->{"Columns" -> {{Left}}},
                   GridBoxBackground->{"Columns" -> {{Automatic}}},
                   
                   GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
                   
                   GridBoxSpacings->{
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}]}, Dynamic[
                  Typeset`var$$],
                  Alignment->Automatic,
                  BaselinePosition->Baseline,
                  DefaultBaseStyle->"OpenerView",
                  ImageMargins->0,
                  ImageSize->Automatic],
                 Deployed->False,
                 StripOnInput->False],
                OpenerView[{
                  Style["Knowledge used in computation", "CIContent"], 
                  Style[{}, "CIContent"]}, False]],
               DynamicModuleValues:>Automatic],
              Setting[#, {0}]& ]},
            {
             TagBox[
              DynamicModuleBox[{Typeset`var$$ = False}, 
               InterpretationBox[
                StyleBox[
                 PaneSelectorBox[{False->GridBox[{
                    {
                    OpenerBox[Dynamic[Typeset`var$$],
                    Appearance->Automatic,
                    AutoAction->False,
                    ContinuousAction->False,
                    Enabled->Automatic], 
                    
                    StyleBox["\<\"Builtins used in computation\"\>", 
                    "CIContent",
                    StripOnInput->False]}
                   },
                   AutoDelete->False,
                   BaselinePosition->{1, 1},
                   GridBoxAlignment->{"Columns" -> {{Left}}},
                   GridBoxBackground->{"Columns" -> {{Automatic}}},
                   
                   GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
                   
                   GridBoxSpacings->{
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}], True->
                  GridBox[{
                    {
                    OpenerBox[Dynamic[Typeset`var$$],
                    Appearance->Automatic,
                    AutoAction->False,
                    ContinuousAction->False,
                    Enabled->Automatic], 
                    
                    StyleBox["\<\"Builtins used in computation\"\>", 
                    "CIContent",
                    StripOnInput->False]},
                    {"", 
                    PaneBox[
                    StyleBox[
                    RowBox[{"{", 
                    
                    RowBox[{"\<\"AbsValue\"\>", ",", "\<\"And\"\>", 
                    ",", "\<\"Append\"\>", ",", "\<\"Cardinality\"\>", 
                    ",", "\<\"CartesianProduct\"\>", 
                    ",", "\<\"CaseDistinction\"\>", ",", "\<\"Delete\"\>", 
                    ",", "\<\"DeleteAt\"\>", ",", "\<\"Difference\"\>", 
                    ",", "\<\"Divide\"\>", ",", "\<\"Do\"\>", 
                    ",", "\<\"Exists\"\>", ",", "\<\"For\"\>", 
                    ",", "\<\"Forall\"\>", ",", "\<\"Greater\"\>", 
                    ",", "\<\"GreaterEqual\"\>", ",", "\<\"Iff\"\>", 
                    ",", "\<\"Implies\"\>", ",", "\<\"Insert\"\>", 
                    ",", "\<\"IntegerQR\"\>", ",", "\<\"IntegerRange\"\>", 
                    ",", "\<\"Intersection\"\>", ",", "\<\"isComplex\"\>", 
                    ",", "\<\"isComplexP\"\>", ",", "\<\"IsElement\"\>", 
                    ",", "\<\"isInteger\"\>", ",", "\<\"isRational\"\>", 
                    ",", "\<\"isReal\"\>", ",", "\<\"isSet\"\>", 
                    ",", "\<\"isTuple\"\>", ",", "\<\"Join\"\>", 
                    ",", "\<\"Length\"\>", ",", "\<\"Less\"\>", 
                    ",", "\<\"LessEqual\"\>", ",", "\<\"Let\"\>", 
                    ",", "\<\"Max\"\>", ",", "\<\"MaximumElementSet\"\>", 
                    ",", "\<\"Min\"\>", ",", "\<\"MinimumElementSet\"\>", 
                    ",", "\<\"Module\"\>", ",", "\<\"Not\"\>", 
                    ",", "\<\"Or\"\>", ",", "\<\"Plus\"\>", 
                    ",", "\<\"Power\"\>", ",", "\<\"PowerSet\"\>", 
                    ",", "\<\"Prepend\"\>", ",", "\<\"ProductOf\"\>", 
                    ",", "\<\"Radical\"\>", ",", "\<\"RationalRange\"\>", 
                    ",", "\<\"RealRange\"\>", ",", "\<\"Replace\"\>", 
                    ",", "\<\"ReplacePart\"\>", ",", "\<\"SetEqual\"\>", 
                    ",", "\<\"Subscript\"\>", ",", "\<\"Subset\"\>", 
                    ",", "\<\"SubsetEqual\"\>", ",", "\<\"Subtract\"\>", 
                    ",", "\<\"SumOf\"\>", ",", "\<\"Superset\"\>", 
                    ",", "\<\"SupersetEqual\"\>", ",", "\<\"Switch\"\>", 
                    ",", "\<\"SymmetricDifference\"\>", ",", "\<\"Times\"\>", 
                    ",", "\<\"TupleEqual\"\>", ",", "\<\"Union\"\>", 
                    ",", "\<\"Which\"\>", ",", "\<\"While\"\>", 
                    ",", "\<\"\[DoubleStruckCapitalC]\"\>", 
                    ",", "\<\"\[DoubleStruckCapitalC]P\"\>"}], "}"}], 
                    "CIContent",
                    StripOnInput->False],
                    ImageMargins->0]}
                   },
                   AutoDelete->False,
                   BaselinePosition->{1, 1},
                   GridBoxAlignment->{"Columns" -> {{Left}}},
                   GridBoxBackground->{"Columns" -> {{Automatic}}},
                   
                   GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
                   
                   GridBoxSpacings->{
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}]}, Dynamic[
                  Typeset`var$$],
                  Alignment->Automatic,
                  BaselinePosition->Baseline,
                  DefaultBaseStyle->"OpenerView",
                  ImageMargins->0,
                  ImageSize->Automatic],
                 Deployed->False,
                 StripOnInput->False],
                OpenerView[{
                  Style["Builtins used in computation", "CIContent"], 
                  
                  Style[{"AbsValue", "And", "Append", "Cardinality", 
                    "CartesianProduct", "CaseDistinction", "Delete", 
                    "DeleteAt", "Difference", "Divide", "Do", "Exists", "For",
                     "Forall", "Greater", "GreaterEqual", "Iff", "Implies", 
                    "Insert", "IntegerQR", "IntegerRange", "Intersection", 
                    "isComplex", "isComplexP", "IsElement", "isInteger", 
                    "isRational", "isReal", "isSet", "isTuple", "Join", 
                    "Length", "Less", "LessEqual", "Let", "Max", 
                    "MaximumElementSet", "Min", "MinimumElementSet", "Module",
                     "Not", "Or", "Plus", "Power", "PowerSet", "Prepend", 
                    "ProductOf", "Radical", "RationalRange", "RealRange", 
                    "Replace", "ReplacePart", "SetEqual", "Subscript", 
                    "Subset", "SubsetEqual", "Subtract", "SumOf", "Superset", 
                    "SupersetEqual", "Switch", "SymmetricDifference", "Times",
                     "TupleEqual", "Union", "Which", "While", 
                    "\[DoubleStruckCapitalC]", "\[DoubleStruckCapitalC]P"}, 
                   "CIContent"]}, False]],
               DynamicModuleValues:>Automatic],
              Setting[#, {0}]& ]},
            {
             ButtonBox["\<\"Restore environment\"\>",
              Appearance->Automatic,
              
              ButtonFunction:>
               Theorema`Interface`GUI`Private`setCompEnv[{}, {{
                 "AbsValue", True}, {"And", True}, {"Append", True}, {
                 "Cardinality", True}, {"CartesianProduct", True}, {
                 "CaseDistinction", True}, {"Delete", True}, {
                 "DeleteAt", True}, {"Difference", True}, {"Divide", True}, {
                 "Do", True}, {"Equal", False}, {"Exists", True}, {
                 "For", True}, {"Forall", True}, {"Greater", True}, {
                 "GreaterEqual", True}, {"Iff", True}, {"Implies", True}, {
                 "Insert", True}, {"IntegerQR", True}, {
                 "IntegerRange", True}, {"Intersection", True}, {
                 "isComplex", True}, {"isComplexP", True}, {
                 "IsElement", True}, {"isInteger", True}, {
                 "isRational", True}, {"isReal", True}, {"isSet", True}, {
                 "isTuple", True}, {"Join", True}, {"Length", True}, {
                 "Less", True}, {"LessEqual", True}, {"Let", True}, {
                 "Max", True}, {"MaximumElementSet", True}, {"Min", True}, {
                 "MinimumElementSet", True}, {"Module", True}, {
                 "Not", True}, {"Or", True}, {"Plus", True}, {
                 "Power", True}, {"PowerSet", True}, {"Prepend", True}, {
                 "ProductOf", True}, {"Radical", True}, {
                 "RationalRange", True}, {"RealRange", True}, {
                 "Replace", True}, {"ReplacePart", True}, {
                 "SetEqual", True}, {"Subscript", True}, {"Subset", True}, {
                 "SubsetEqual", True}, {"Subtract", True}, {"SumOf", True}, {
                 "Superset", True}, {"SupersetEqual", True}, {
                 "Switch", True}, {"SymmetricDifference", True}, {
                 "Times", True}, {"TupleEqual", True}, {"Union", True}, {
                 "Which", True}, {"While", True}, {
                 "\[DoubleStruckCapitalC]", True}, {
                 "\[DoubleStruckCapitalC]P", True}}],
              Evaluator->Automatic,
              ImageSize->Automatic,
              Method->"Preemptive"]}
           },
           DefaultBaseStyle->"Column",
           GridBoxAlignment->{"Columns" -> {{Left}}},
           
           GridBoxItemSize->{
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
          "Column"],
         ImageMargins->0]}
      },
      AutoDelete->False,
      BaselinePosition->{1, 1},
      GridBoxAlignment->{"Columns" -> {{Left}}},
      GridBoxBackground->{"Columns" -> {{Automatic}}},
      GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
      GridBoxSpacings->{"Columns" -> {{0.2}}, "Rows" -> {{0.5}}}]}, Dynamic[
     Typeset`var$$],
     Alignment->Automatic,
     BaselinePosition->Baseline,
     DefaultBaseStyle->"OpenerView",
     ImageMargins->0,
     ImageSize->Automatic],
    Deployed->False,
    StripOnInput->False],
   OpenerView[{"", 
     Column[{
       OpenerView[{
         Style["Knowledge used in computation", "CIContent"], 
         Style[{}, "CIContent"]}], 
       OpenerView[{
         Style["Builtins used in computation", "CIContent"], 
         Style[{
          "AbsValue", "And", "Append", "Cardinality", "CartesianProduct", 
           "CaseDistinction", "Delete", "DeleteAt", "Difference", "Divide", 
           "Do", "Exists", "For", "Forall", "Greater", "GreaterEqual", "Iff", 
           "Implies", "Insert", "IntegerQR", "IntegerRange", "Intersection", 
           "isComplex", "isComplexP", "IsElement", "isInteger", "isRational", 
           "isReal", "isSet", "isTuple", "Join", "Length", "Less", 
           "LessEqual", "Let", "Max", "MaximumElementSet", "Min", 
           "MinimumElementSet", "Module", "Not", "Or", "Plus", "Power", 
           "PowerSet", "Prepend", "ProductOf", "Radical", "RationalRange", 
           "RealRange", "Replace", "ReplacePart", "SetEqual", "Subscript", 
           "Subset", "SubsetEqual", "Subtract", "SumOf", "Superset", 
           "SupersetEqual", "Switch", "SymmetricDifference", "Times", 
           "TupleEqual", "Union", "Which", "While", "\[DoubleStruckCapitalC]",
            "\[DoubleStruckCapitalC]P"}, "CIContent"]}], 
       Button["Restore environment", 
        Theorema`Interface`GUI`Private`setCompEnv[{}, {{"AbsValue", True}, {
          "And", True}, {"Append", True}, {"Cardinality", True}, {
          "CartesianProduct", True}, {"CaseDistinction", True}, {
          "Delete", True}, {"DeleteAt", True}, {"Difference", True}, {
          "Divide", True}, {"Do", True}, {"Equal", False}, {"Exists", True}, {
          "For", True}, {"Forall", True}, {"Greater", True}, {
          "GreaterEqual", True}, {"Iff", True}, {"Implies", True}, {
          "Insert", True}, {"IntegerQR", True}, {"IntegerRange", True}, {
          "Intersection", True}, {"isComplex", True}, {"isComplexP", True}, {
          "IsElement", True}, {"isInteger", True}, {"isRational", True}, {
          "isReal", True}, {"isSet", True}, {"isTuple", True}, {
          "Join", True}, {"Length", True}, {"Less", True}, {
          "LessEqual", True}, {"Let", True}, {"Max", True}, {
          "MaximumElementSet", True}, {"Min", True}, {
          "MinimumElementSet", True}, {"Module", True}, {"Not", True}, {
          "Or", True}, {"Plus", True}, {"Power", True}, {"PowerSet", True}, {
          "Prepend", True}, {"ProductOf", True}, {"Radical", True}, {
          "RationalRange", True}, {"RealRange", True}, {"Replace", True}, {
          "ReplacePart", True}, {"SetEqual", True}, {"Subscript", True}, {
          "Subset", True}, {"SubsetEqual", True}, {"Subtract", True}, {
          "SumOf", True}, {"Superset", True}, {"SupersetEqual", True}, {
          "Switch", True}, {"SymmetricDifference", True}, {"Times", True}, {
          "TupleEqual", True}, {"Union", True}, {"Which", True}, {
          "While", True}, {"\[DoubleStruckCapitalC]", True}, {
          "\[DoubleStruckCapitalC]P", True}}], ImageSize -> Automatic]}]}, 
    False]],
  DynamicModuleValues:>{}]], "ComputationInfo",
 CellChangeTimes->{3.592716229723479*^9},
 CellID->1436278900],

Cell[BoxData[
 FormBox[
  RowBox[{
   UnderscriptBox["\[Square]", "\[DoubleStruckCapitalZ]"], "4"}], 
  TheoremaForm]], "ComputationResult",
 CellChangeTimes->{
  3.592642544443949*^9, {3.592642608230234*^9, 3.592642653968862*^9}, 
   3.592650154919827*^9, 3.592715800191082*^9, 3.592716229737481*^9},
 CellID->6199547]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"7", 
  TagBox["!!",
   Identity]}]], "Computation",
 CellChangeTimes->{{3.592642674502024*^9, 3.59264267974248*^9}},
 CellID->1833136318],

Cell[BoxData[
 DynamicModuleBox[{Typeset`var$$ = False}, 
  InterpretationBox[
   StyleBox[
    PaneSelectorBox[{False->GridBox[{
       {
        OpenerBox[Dynamic[Typeset`var$$],
         Appearance->Automatic,
         AutoAction->False,
         ContinuousAction->False,
         Enabled->Automatic], "\<\"\"\>"}
      },
      AutoDelete->False,
      BaselinePosition->{1, 1},
      GridBoxAlignment->{"Columns" -> {{Left}}},
      GridBoxBackground->{"Columns" -> {{Automatic}}},
      GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
      GridBoxSpacings->{"Columns" -> {{0.2}}, "Rows" -> {{0.5}}}], True->
     GridBox[{
       {
        OpenerBox[Dynamic[Typeset`var$$],
         Appearance->Automatic,
         AutoAction->False,
         ContinuousAction->False,
         Enabled->Automatic], "\<\"\"\>"},
       {"", 
        PaneBox[
         TagBox[GridBox[{
            {
             TagBox[
              DynamicModuleBox[{Typeset`var$$ = False}, 
               InterpretationBox[
                StyleBox[
                 PaneSelectorBox[{False->GridBox[{
                    {
                    OpenerBox[Dynamic[Typeset`var$$],
                    Appearance->Automatic,
                    AutoAction->False,
                    ContinuousAction->False,
                    Enabled->Automatic], 
                    
                    StyleBox["\<\"Knowledge used in computation\"\>", 
                    "CIContent",
                    StripOnInput->False]}
                   },
                   AutoDelete->False,
                   BaselinePosition->{1, 1},
                   GridBoxAlignment->{"Columns" -> {{Left}}},
                   GridBoxBackground->{"Columns" -> {{Automatic}}},
                   
                   GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
                   
                   GridBoxSpacings->{
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}], True->
                  GridBox[{
                    {
                    OpenerBox[Dynamic[Typeset`var$$],
                    Appearance->Automatic,
                    AutoAction->False,
                    ContinuousAction->False,
                    Enabled->Automatic], 
                    
                    StyleBox["\<\"Knowledge used in computation\"\>", 
                    "CIContent",
                    StripOnInput->False]},
                    {"", 
                    PaneBox[
                    StyleBox[
                    RowBox[{"{", "}"}], "CIContent",
                    StripOnInput->False],
                    ImageMargins->0]}
                   },
                   AutoDelete->False,
                   BaselinePosition->{1, 1},
                   GridBoxAlignment->{"Columns" -> {{Left}}},
                   GridBoxBackground->{"Columns" -> {{Automatic}}},
                   
                   GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
                   
                   GridBoxSpacings->{
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}]}, Dynamic[
                  Typeset`var$$],
                  Alignment->Automatic,
                  BaselinePosition->Baseline,
                  DefaultBaseStyle->"OpenerView",
                  ImageMargins->0,
                  ImageSize->Automatic],
                 Deployed->False,
                 StripOnInput->False],
                OpenerView[{
                  Style["Knowledge used in computation", "CIContent"], 
                  Style[{}, "CIContent"]}, False]],
               DynamicModuleValues:>Automatic],
              Setting[#, {0}]& ]},
            {
             TagBox[
              DynamicModuleBox[{Typeset`var$$ = False}, 
               InterpretationBox[
                StyleBox[
                 PaneSelectorBox[{False->GridBox[{
                    {
                    OpenerBox[Dynamic[Typeset`var$$],
                    Appearance->Automatic,
                    AutoAction->False,
                    ContinuousAction->False,
                    Enabled->Automatic], 
                    
                    StyleBox["\<\"Builtins used in computation\"\>", 
                    "CIContent",
                    StripOnInput->False]}
                   },
                   AutoDelete->False,
                   BaselinePosition->{1, 1},
                   GridBoxAlignment->{"Columns" -> {{Left}}},
                   GridBoxBackground->{"Columns" -> {{Automatic}}},
                   
                   GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
                   
                   GridBoxSpacings->{
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}], True->
                  GridBox[{
                    {
                    OpenerBox[Dynamic[Typeset`var$$],
                    Appearance->Automatic,
                    AutoAction->False,
                    ContinuousAction->False,
                    Enabled->Automatic], 
                    
                    StyleBox["\<\"Builtins used in computation\"\>", 
                    "CIContent",
                    StripOnInput->False]},
                    {"", 
                    PaneBox[
                    StyleBox[
                    RowBox[{"{", 
                    
                    RowBox[{"\<\"AbsValue\"\>", ",", "\<\"And\"\>", 
                    ",", "\<\"Append\"\>", ",", "\<\"Cardinality\"\>", 
                    ",", "\<\"CartesianProduct\"\>", 
                    ",", "\<\"CaseDistinction\"\>", ",", "\<\"Delete\"\>", 
                    ",", "\<\"DeleteAt\"\>", ",", "\<\"Difference\"\>", 
                    ",", "\<\"Divide\"\>", ",", "\<\"Do\"\>", 
                    ",", "\<\"Exists\"\>", ",", "\<\"For\"\>", 
                    ",", "\<\"Forall\"\>", ",", "\<\"Greater\"\>", 
                    ",", "\<\"GreaterEqual\"\>", ",", "\<\"Iff\"\>", 
                    ",", "\<\"Implies\"\>", ",", "\<\"Insert\"\>", 
                    ",", "\<\"IntegerQR\"\>", ",", "\<\"IntegerRange\"\>", 
                    ",", "\<\"Intersection\"\>", ",", "\<\"isComplex\"\>", 
                    ",", "\<\"isComplexP\"\>", ",", "\<\"IsElement\"\>", 
                    ",", "\<\"isInteger\"\>", ",", "\<\"isRational\"\>", 
                    ",", "\<\"isReal\"\>", ",", "\<\"isSet\"\>", 
                    ",", "\<\"isTuple\"\>", ",", "\<\"Join\"\>", 
                    ",", "\<\"Length\"\>", ",", "\<\"Less\"\>", 
                    ",", "\<\"LessEqual\"\>", ",", "\<\"Let\"\>", 
                    ",", "\<\"Max\"\>", ",", "\<\"MaximumElementSet\"\>", 
                    ",", "\<\"Min\"\>", ",", "\<\"MinimumElementSet\"\>", 
                    ",", "\<\"Module\"\>", ",", "\<\"Not\"\>", 
                    ",", "\<\"Or\"\>", ",", "\<\"Plus\"\>", 
                    ",", "\<\"Power\"\>", ",", "\<\"PowerSet\"\>", 
                    ",", "\<\"Prepend\"\>", ",", "\<\"ProductOf\"\>", 
                    ",", "\<\"Radical\"\>", ",", "\<\"RationalRange\"\>", 
                    ",", "\<\"RealRange\"\>", ",", "\<\"Replace\"\>", 
                    ",", "\<\"ReplacePart\"\>", ",", "\<\"SetEqual\"\>", 
                    ",", "\<\"Subscript\"\>", ",", "\<\"Subset\"\>", 
                    ",", "\<\"SubsetEqual\"\>", ",", "\<\"Subtract\"\>", 
                    ",", "\<\"SumOf\"\>", ",", "\<\"Superset\"\>", 
                    ",", "\<\"SupersetEqual\"\>", ",", "\<\"Switch\"\>", 
                    ",", "\<\"SymmetricDifference\"\>", ",", "\<\"Times\"\>", 
                    ",", "\<\"TupleEqual\"\>", ",", "\<\"Union\"\>", 
                    ",", "\<\"Which\"\>", ",", "\<\"While\"\>", 
                    ",", "\<\"\[DoubleStruckCapitalC]\"\>", 
                    ",", "\<\"\[DoubleStruckCapitalC]P\"\>"}], "}"}], 
                    "CIContent",
                    StripOnInput->False],
                    ImageMargins->0]}
                   },
                   AutoDelete->False,
                   BaselinePosition->{1, 1},
                   GridBoxAlignment->{"Columns" -> {{Left}}},
                   GridBoxBackground->{"Columns" -> {{Automatic}}},
                   
                   GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
                   
                   GridBoxSpacings->{
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}]}, Dynamic[
                  Typeset`var$$],
                  Alignment->Automatic,
                  BaselinePosition->Baseline,
                  DefaultBaseStyle->"OpenerView",
                  ImageMargins->0,
                  ImageSize->Automatic],
                 Deployed->False,
                 StripOnInput->False],
                OpenerView[{
                  Style["Builtins used in computation", "CIContent"], 
                  
                  Style[{"AbsValue", "And", "Append", "Cardinality", 
                    "CartesianProduct", "CaseDistinction", "Delete", 
                    "DeleteAt", "Difference", "Divide", "Do", "Exists", "For",
                     "Forall", "Greater", "GreaterEqual", "Iff", "Implies", 
                    "Insert", "IntegerQR", "IntegerRange", "Intersection", 
                    "isComplex", "isComplexP", "IsElement", "isInteger", 
                    "isRational", "isReal", "isSet", "isTuple", "Join", 
                    "Length", "Less", "LessEqual", "Let", "Max", 
                    "MaximumElementSet", "Min", "MinimumElementSet", "Module",
                     "Not", "Or", "Plus", "Power", "PowerSet", "Prepend", 
                    "ProductOf", "Radical", "RationalRange", "RealRange", 
                    "Replace", "ReplacePart", "SetEqual", "Subscript", 
                    "Subset", "SubsetEqual", "Subtract", "SumOf", "Superset", 
                    "SupersetEqual", "Switch", "SymmetricDifference", "Times",
                     "TupleEqual", "Union", "Which", "While", 
                    "\[DoubleStruckCapitalC]", "\[DoubleStruckCapitalC]P"}, 
                   "CIContent"]}, False]],
               DynamicModuleValues:>Automatic],
              Setting[#, {0}]& ]},
            {
             ButtonBox["\<\"Restore environment\"\>",
              Appearance->Automatic,
              
              ButtonFunction:>
               Theorema`Interface`GUI`Private`setCompEnv[{}, {{
                 "AbsValue", True}, {"And", True}, {"Append", True}, {
                 "Cardinality", True}, {"CartesianProduct", True}, {
                 "CaseDistinction", True}, {"Delete", True}, {
                 "DeleteAt", True}, {"Difference", True}, {"Divide", True}, {
                 "Do", True}, {"Equal", False}, {"Exists", True}, {
                 "For", True}, {"Forall", True}, {"Greater", True}, {
                 "GreaterEqual", True}, {"Iff", True}, {"Implies", True}, {
                 "Insert", True}, {"IntegerQR", True}, {
                 "IntegerRange", True}, {"Intersection", True}, {
                 "isComplex", True}, {"isComplexP", True}, {
                 "IsElement", True}, {"isInteger", True}, {
                 "isRational", True}, {"isReal", True}, {"isSet", True}, {
                 "isTuple", True}, {"Join", True}, {"Length", True}, {
                 "Less", True}, {"LessEqual", True}, {"Let", True}, {
                 "Max", True}, {"MaximumElementSet", True}, {"Min", True}, {
                 "MinimumElementSet", True}, {"Module", True}, {
                 "Not", True}, {"Or", True}, {"Plus", True}, {
                 "Power", True}, {"PowerSet", True}, {"Prepend", True}, {
                 "ProductOf", True}, {"Radical", True}, {
                 "RationalRange", True}, {"RealRange", True}, {
                 "Replace", True}, {"ReplacePart", True}, {
                 "SetEqual", True}, {"Subscript", True}, {"Subset", True}, {
                 "SubsetEqual", True}, {"Subtract", True}, {"SumOf", True}, {
                 "Superset", True}, {"SupersetEqual", True}, {
                 "Switch", True}, {"SymmetricDifference", True}, {
                 "Times", True}, {"TupleEqual", True}, {"Union", True}, {
                 "Which", True}, {"While", True}, {
                 "\[DoubleStruckCapitalC]", True}, {
                 "\[DoubleStruckCapitalC]P", True}}],
              Evaluator->Automatic,
              ImageSize->Automatic,
              Method->"Preemptive"]}
           },
           DefaultBaseStyle->"Column",
           GridBoxAlignment->{"Columns" -> {{Left}}},
           
           GridBoxItemSize->{
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
          "Column"],
         ImageMargins->0]}
      },
      AutoDelete->False,
      BaselinePosition->{1, 1},
      GridBoxAlignment->{"Columns" -> {{Left}}},
      GridBoxBackground->{"Columns" -> {{Automatic}}},
      GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
      GridBoxSpacings->{"Columns" -> {{0.2}}, "Rows" -> {{0.5}}}]}, Dynamic[
     Typeset`var$$],
     Alignment->Automatic,
     BaselinePosition->Baseline,
     DefaultBaseStyle->"OpenerView",
     ImageMargins->0,
     ImageSize->Automatic],
    Deployed->False,
    StripOnInput->False],
   OpenerView[{"", 
     Column[{
       OpenerView[{
         Style["Knowledge used in computation", "CIContent"], 
         Style[{}, "CIContent"]}], 
       OpenerView[{
         Style["Builtins used in computation", "CIContent"], 
         Style[{
          "AbsValue", "And", "Append", "Cardinality", "CartesianProduct", 
           "CaseDistinction", "Delete", "DeleteAt", "Difference", "Divide", 
           "Do", "Exists", "For", "Forall", "Greater", "GreaterEqual", "Iff", 
           "Implies", "Insert", "IntegerQR", "IntegerRange", "Intersection", 
           "isComplex", "isComplexP", "IsElement", "isInteger", "isRational", 
           "isReal", "isSet", "isTuple", "Join", "Length", "Less", 
           "LessEqual", "Let", "Max", "MaximumElementSet", "Min", 
           "MinimumElementSet", "Module", "Not", "Or", "Plus", "Power", 
           "PowerSet", "Prepend", "ProductOf", "Radical", "RationalRange", 
           "RealRange", "Replace", "ReplacePart", "SetEqual", "Subscript", 
           "Subset", "SubsetEqual", "Subtract", "SumOf", "Superset", 
           "SupersetEqual", "Switch", "SymmetricDifference", "Times", 
           "TupleEqual", "Union", "Which", "While", "\[DoubleStruckCapitalC]",
            "\[DoubleStruckCapitalC]P"}, "CIContent"]}], 
       Button["Restore environment", 
        Theorema`Interface`GUI`Private`setCompEnv[{}, {{"AbsValue", True}, {
          "And", True}, {"Append", True}, {"Cardinality", True}, {
          "CartesianProduct", True}, {"CaseDistinction", True}, {
          "Delete", True}, {"DeleteAt", True}, {"Difference", True}, {
          "Divide", True}, {"Do", True}, {"Equal", False}, {"Exists", True}, {
          "For", True}, {"Forall", True}, {"Greater", True}, {
          "GreaterEqual", True}, {"Iff", True}, {"Implies", True}, {
          "Insert", True}, {"IntegerQR", True}, {"IntegerRange", True}, {
          "Intersection", True}, {"isComplex", True}, {"isComplexP", True}, {
          "IsElement", True}, {"isInteger", True}, {"isRational", True}, {
          "isReal", True}, {"isSet", True}, {"isTuple", True}, {
          "Join", True}, {"Length", True}, {"Less", True}, {
          "LessEqual", True}, {"Let", True}, {"Max", True}, {
          "MaximumElementSet", True}, {"Min", True}, {
          "MinimumElementSet", True}, {"Module", True}, {"Not", True}, {
          "Or", True}, {"Plus", True}, {"Power", True}, {"PowerSet", True}, {
          "Prepend", True}, {"ProductOf", True}, {"Radical", True}, {
          "RationalRange", True}, {"RealRange", True}, {"Replace", True}, {
          "ReplacePart", True}, {"SetEqual", True}, {"Subscript", True}, {
          "Subset", True}, {"SubsetEqual", True}, {"Subtract", True}, {
          "SumOf", True}, {"Superset", True}, {"SupersetEqual", True}, {
          "Switch", True}, {"SymmetricDifference", True}, {"Times", True}, {
          "TupleEqual", True}, {"Union", True}, {"Which", True}, {
          "While", True}, {"\[DoubleStruckCapitalC]", True}, {
          "\[DoubleStruckCapitalC]P", True}}], ImageSize -> Automatic]}]}, 
    False]],
  DynamicModuleValues:>{}]], "ComputationInfo",
 CellChangeTimes->{3.592715801972998*^9},
 CellID->1489184765],

Cell[BoxData[
 RowBox[{"7", "!!"}]], "ComputationResult",
 CellChangeTimes->{3.592642680557603*^9, 3.592650156498941*^9, 
  3.592715801985982*^9},
 CellID->826905417]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"a", 
  SubscriptBox["+", 
   RowBox[{"0", ",", "1", ",", "2"}]], "b"}]], "Computation",
 CellChangeTimes->{{3.59264391335481*^9, 3.592643921068034*^9}, {
  3.592644099762256*^9, 3.592644100551463*^9}, {3.592644226160976*^9, 
  3.592644227225549*^9}, {3.592644574482387*^9, 3.592644574903508*^9}},
 CellID->1643395444],

Cell[BoxData[
 DynamicModuleBox[{Typeset`var$$ = False}, 
  InterpretationBox[
   StyleBox[
    PaneSelectorBox[{False->GridBox[{
       {
        OpenerBox[Dynamic[Typeset`var$$],
         Appearance->Automatic,
         AutoAction->False,
         ContinuousAction->False,
         Enabled->Automatic], "\<\"\"\>"}
      },
      AutoDelete->False,
      BaselinePosition->{1, 1},
      GridBoxAlignment->{"Columns" -> {{Left}}},
      GridBoxBackground->{"Columns" -> {{Automatic}}},
      GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
      GridBoxSpacings->{"Columns" -> {{0.2}}, "Rows" -> {{0.5}}}], True->
     GridBox[{
       {
        OpenerBox[Dynamic[Typeset`var$$],
         Appearance->Automatic,
         AutoAction->False,
         ContinuousAction->False,
         Enabled->Automatic], "\<\"\"\>"},
       {"", 
        PaneBox[
         TagBox[GridBox[{
            {
             TagBox[
              DynamicModuleBox[{Typeset`var$$ = False}, 
               InterpretationBox[
                StyleBox[
                 PaneSelectorBox[{False->GridBox[{
                    {
                    OpenerBox[Dynamic[Typeset`var$$],
                    Appearance->Automatic,
                    AutoAction->False,
                    ContinuousAction->False,
                    Enabled->Automatic], 
                    
                    StyleBox["\<\"Knowledge used in computation\"\>", 
                    "CIContent",
                    StripOnInput->False]}
                   },
                   AutoDelete->False,
                   BaselinePosition->{1, 1},
                   GridBoxAlignment->{"Columns" -> {{Left}}},
                   GridBoxBackground->{"Columns" -> {{Automatic}}},
                   
                   GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
                   
                   GridBoxSpacings->{
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}], True->
                  GridBox[{
                    {
                    OpenerBox[Dynamic[Typeset`var$$],
                    Appearance->Automatic,
                    AutoAction->False,
                    ContinuousAction->False,
                    Enabled->Automatic], 
                    
                    StyleBox["\<\"Knowledge used in computation\"\>", 
                    "CIContent",
                    StripOnInput->False]},
                    {"", 
                    PaneBox[
                    StyleBox[
                    RowBox[{"{", "}"}], "CIContent",
                    StripOnInput->False],
                    ImageMargins->0]}
                   },
                   AutoDelete->False,
                   BaselinePosition->{1, 1},
                   GridBoxAlignment->{"Columns" -> {{Left}}},
                   GridBoxBackground->{"Columns" -> {{Automatic}}},
                   
                   GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
                   
                   GridBoxSpacings->{
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}]}, Dynamic[
                  Typeset`var$$],
                  Alignment->Automatic,
                  BaselinePosition->Baseline,
                  DefaultBaseStyle->"OpenerView",
                  ImageMargins->0,
                  ImageSize->Automatic],
                 Deployed->False,
                 StripOnInput->False],
                OpenerView[{
                  Style["Knowledge used in computation", "CIContent"], 
                  Style[{}, "CIContent"]}, False]],
               DynamicModuleValues:>Automatic],
              Setting[#, {0}]& ]},
            {
             TagBox[
              DynamicModuleBox[{Typeset`var$$ = False}, 
               InterpretationBox[
                StyleBox[
                 PaneSelectorBox[{False->GridBox[{
                    {
                    OpenerBox[Dynamic[Typeset`var$$],
                    Appearance->Automatic,
                    AutoAction->False,
                    ContinuousAction->False,
                    Enabled->Automatic], 
                    
                    StyleBox["\<\"Builtins used in computation\"\>", 
                    "CIContent",
                    StripOnInput->False]}
                   },
                   AutoDelete->False,
                   BaselinePosition->{1, 1},
                   GridBoxAlignment->{"Columns" -> {{Left}}},
                   GridBoxBackground->{"Columns" -> {{Automatic}}},
                   
                   GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
                   
                   GridBoxSpacings->{
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}], True->
                  GridBox[{
                    {
                    OpenerBox[Dynamic[Typeset`var$$],
                    Appearance->Automatic,
                    AutoAction->False,
                    ContinuousAction->False,
                    Enabled->Automatic], 
                    
                    StyleBox["\<\"Builtins used in computation\"\>", 
                    "CIContent",
                    StripOnInput->False]},
                    {"", 
                    PaneBox[
                    StyleBox[
                    RowBox[{"{", 
                    
                    RowBox[{"\<\"AbsValue\"\>", ",", "\<\"And\"\>", 
                    ",", "\<\"Append\"\>", ",", "\<\"Cardinality\"\>", 
                    ",", "\<\"CartesianProduct\"\>", 
                    ",", "\<\"CaseDistinction\"\>", ",", "\<\"Delete\"\>", 
                    ",", "\<\"DeleteAt\"\>", ",", "\<\"Difference\"\>", 
                    ",", "\<\"Divide\"\>", ",", "\<\"Do\"\>", 
                    ",", "\<\"Exists\"\>", ",", "\<\"For\"\>", 
                    ",", "\<\"Forall\"\>", ",", "\<\"Greater\"\>", 
                    ",", "\<\"GreaterEqual\"\>", ",", "\<\"Iff\"\>", 
                    ",", "\<\"Implies\"\>", ",", "\<\"Insert\"\>", 
                    ",", "\<\"IntegerQR\"\>", ",", "\<\"IntegerRange\"\>", 
                    ",", "\<\"Intersection\"\>", ",", "\<\"isComplex\"\>", 
                    ",", "\<\"isComplexP\"\>", ",", "\<\"IsElement\"\>", 
                    ",", "\<\"isInteger\"\>", ",", "\<\"isRational\"\>", 
                    ",", "\<\"isReal\"\>", ",", "\<\"isSet\"\>", 
                    ",", "\<\"isTuple\"\>", ",", "\<\"Join\"\>", 
                    ",", "\<\"Length\"\>", ",", "\<\"Less\"\>", 
                    ",", "\<\"LessEqual\"\>", ",", "\<\"Let\"\>", 
                    ",", "\<\"Max\"\>", ",", "\<\"MaximumElementSet\"\>", 
                    ",", "\<\"Min\"\>", ",", "\<\"MinimumElementSet\"\>", 
                    ",", "\<\"Module\"\>", ",", "\<\"Not\"\>", 
                    ",", "\<\"Or\"\>", ",", "\<\"Plus\"\>", 
                    ",", "\<\"Power\"\>", ",", "\<\"PowerSet\"\>", 
                    ",", "\<\"Prepend\"\>", ",", "\<\"ProductOf\"\>", 
                    ",", "\<\"Radical\"\>", ",", "\<\"RationalRange\"\>", 
                    ",", "\<\"RealRange\"\>", ",", "\<\"Replace\"\>", 
                    ",", "\<\"ReplacePart\"\>", ",", "\<\"SetEqual\"\>", 
                    ",", "\<\"Subscript\"\>", ",", "\<\"Subset\"\>", 
                    ",", "\<\"SubsetEqual\"\>", ",", "\<\"Subtract\"\>", 
                    ",", "\<\"SumOf\"\>", ",", "\<\"Superset\"\>", 
                    ",", "\<\"SupersetEqual\"\>", ",", "\<\"Switch\"\>", 
                    ",", "\<\"SymmetricDifference\"\>", ",", "\<\"Times\"\>", 
                    ",", "\<\"TupleEqual\"\>", ",", "\<\"Union\"\>", 
                    ",", "\<\"Which\"\>", ",", "\<\"While\"\>", 
                    ",", "\<\"\[DoubleStruckCapitalC]\"\>", 
                    ",", "\<\"\[DoubleStruckCapitalC]P\"\>"}], "}"}], 
                    "CIContent",
                    StripOnInput->False],
                    ImageMargins->0]}
                   },
                   AutoDelete->False,
                   BaselinePosition->{1, 1},
                   GridBoxAlignment->{"Columns" -> {{Left}}},
                   GridBoxBackground->{"Columns" -> {{Automatic}}},
                   
                   GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
                   
                   GridBoxSpacings->{
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}]}, Dynamic[
                  Typeset`var$$],
                  Alignment->Automatic,
                  BaselinePosition->Baseline,
                  DefaultBaseStyle->"OpenerView",
                  ImageMargins->0,
                  ImageSize->Automatic],
                 Deployed->False,
                 StripOnInput->False],
                OpenerView[{
                  Style["Builtins used in computation", "CIContent"], 
                  
                  Style[{"AbsValue", "And", "Append", "Cardinality", 
                    "CartesianProduct", "CaseDistinction", "Delete", 
                    "DeleteAt", "Difference", "Divide", "Do", "Exists", "For",
                     "Forall", "Greater", "GreaterEqual", "Iff", "Implies", 
                    "Insert", "IntegerQR", "IntegerRange", "Intersection", 
                    "isComplex", "isComplexP", "IsElement", "isInteger", 
                    "isRational", "isReal", "isSet", "isTuple", "Join", 
                    "Length", "Less", "LessEqual", "Let", "Max", 
                    "MaximumElementSet", "Min", "MinimumElementSet", "Module",
                     "Not", "Or", "Plus", "Power", "PowerSet", "Prepend", 
                    "ProductOf", "Radical", "RationalRange", "RealRange", 
                    "Replace", "ReplacePart", "SetEqual", "Subscript", 
                    "Subset", "SubsetEqual", "Subtract", "SumOf", "Superset", 
                    "SupersetEqual", "Switch", "SymmetricDifference", "Times",
                     "TupleEqual", "Union", "Which", "While", 
                    "\[DoubleStruckCapitalC]", "\[DoubleStruckCapitalC]P"}, 
                   "CIContent"]}, False]],
               DynamicModuleValues:>Automatic],
              Setting[#, {0}]& ]},
            {
             ButtonBox["\<\"Restore environment\"\>",
              Appearance->Automatic,
              
              ButtonFunction:>
               Theorema`Interface`GUI`Private`setCompEnv[{}, {{
                 "AbsValue", True}, {"And", True}, {"Append", True}, {
                 "Cardinality", True}, {"CartesianProduct", True}, {
                 "CaseDistinction", True}, {"Delete", True}, {
                 "DeleteAt", True}, {"Difference", True}, {"Divide", True}, {
                 "Do", True}, {"Equal", False}, {"Exists", True}, {
                 "For", True}, {"Forall", True}, {"Greater", True}, {
                 "GreaterEqual", True}, {"Iff", True}, {"Implies", True}, {
                 "Insert", True}, {"IntegerQR", True}, {
                 "IntegerRange", True}, {"Intersection", True}, {
                 "isComplex", True}, {"isComplexP", True}, {
                 "IsElement", True}, {"isInteger", True}, {
                 "isRational", True}, {"isReal", True}, {"isSet", True}, {
                 "isTuple", True}, {"Join", True}, {"Length", True}, {
                 "Less", True}, {"LessEqual", True}, {"Let", True}, {
                 "Max", True}, {"MaximumElementSet", True}, {"Min", True}, {
                 "MinimumElementSet", True}, {"Module", True}, {
                 "Not", True}, {"Or", True}, {"Plus", True}, {
                 "Power", True}, {"PowerSet", True}, {"Prepend", True}, {
                 "ProductOf", True}, {"Radical", True}, {
                 "RationalRange", True}, {"RealRange", True}, {
                 "Replace", True}, {"ReplacePart", True}, {
                 "SetEqual", True}, {"Subscript", True}, {"Subset", True}, {
                 "SubsetEqual", True}, {"Subtract", True}, {"SumOf", True}, {
                 "Superset", True}, {"SupersetEqual", True}, {
                 "Switch", True}, {"SymmetricDifference", True}, {
                 "Times", True}, {"TupleEqual", True}, {"Union", True}, {
                 "Which", True}, {"While", True}, {
                 "\[DoubleStruckCapitalC]", True}, {
                 "\[DoubleStruckCapitalC]P", True}}],
              Evaluator->Automatic,
              ImageSize->Automatic,
              Method->"Preemptive"]}
           },
           DefaultBaseStyle->"Column",
           GridBoxAlignment->{"Columns" -> {{Left}}},
           
           GridBoxItemSize->{
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
          "Column"],
         ImageMargins->0]}
      },
      AutoDelete->False,
      BaselinePosition->{1, 1},
      GridBoxAlignment->{"Columns" -> {{Left}}},
      GridBoxBackground->{"Columns" -> {{Automatic}}},
      GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
      GridBoxSpacings->{"Columns" -> {{0.2}}, "Rows" -> {{0.5}}}]}, Dynamic[
     Typeset`var$$],
     Alignment->Automatic,
     BaselinePosition->Baseline,
     DefaultBaseStyle->"OpenerView",
     ImageMargins->0,
     ImageSize->Automatic],
    Deployed->False,
    StripOnInput->False],
   OpenerView[{"", 
     Column[{
       OpenerView[{
         Style["Knowledge used in computation", "CIContent"], 
         Style[{}, "CIContent"]}], 
       OpenerView[{
         Style["Builtins used in computation", "CIContent"], 
         Style[{
          "AbsValue", "And", "Append", "Cardinality", "CartesianProduct", 
           "CaseDistinction", "Delete", "DeleteAt", "Difference", "Divide", 
           "Do", "Exists", "For", "Forall", "Greater", "GreaterEqual", "Iff", 
           "Implies", "Insert", "IntegerQR", "IntegerRange", "Intersection", 
           "isComplex", "isComplexP", "IsElement", "isInteger", "isRational", 
           "isReal", "isSet", "isTuple", "Join", "Length", "Less", 
           "LessEqual", "Let", "Max", "MaximumElementSet", "Min", 
           "MinimumElementSet", "Module", "Not", "Or", "Plus", "Power", 
           "PowerSet", "Prepend", "ProductOf", "Radical", "RationalRange", 
           "RealRange", "Replace", "ReplacePart", "SetEqual", "Subscript", 
           "Subset", "SubsetEqual", "Subtract", "SumOf", "Superset", 
           "SupersetEqual", "Switch", "SymmetricDifference", "Times", 
           "TupleEqual", "Union", "Which", "While", "\[DoubleStruckCapitalC]",
            "\[DoubleStruckCapitalC]P"}, "CIContent"]}], 
       Button["Restore environment", 
        Theorema`Interface`GUI`Private`setCompEnv[{}, {{"AbsValue", True}, {
          "And", True}, {"Append", True}, {"Cardinality", True}, {
          "CartesianProduct", True}, {"CaseDistinction", True}, {
          "Delete", True}, {"DeleteAt", True}, {"Difference", True}, {
          "Divide", True}, {"Do", True}, {"Equal", False}, {"Exists", True}, {
          "For", True}, {"Forall", True}, {"Greater", True}, {
          "GreaterEqual", True}, {"Iff", True}, {"Implies", True}, {
          "Insert", True}, {"IntegerQR", True}, {"IntegerRange", True}, {
          "Intersection", True}, {"isComplex", True}, {"isComplexP", True}, {
          "IsElement", True}, {"isInteger", True}, {"isRational", True}, {
          "isReal", True}, {"isSet", True}, {"isTuple", True}, {
          "Join", True}, {"Length", True}, {"Less", True}, {
          "LessEqual", True}, {"Let", True}, {"Max", True}, {
          "MaximumElementSet", True}, {"Min", True}, {
          "MinimumElementSet", True}, {"Module", True}, {"Not", True}, {
          "Or", True}, {"Plus", True}, {"Power", True}, {"PowerSet", True}, {
          "Prepend", True}, {"ProductOf", True}, {"Radical", True}, {
          "RationalRange", True}, {"RealRange", True}, {"Replace", True}, {
          "ReplacePart", True}, {"SetEqual", True}, {"Subscript", True}, {
          "Subset", True}, {"SubsetEqual", True}, {"Subtract", True}, {
          "SumOf", True}, {"Superset", True}, {"SupersetEqual", True}, {
          "Switch", True}, {"SymmetricDifference", True}, {"Times", True}, {
          "TupleEqual", True}, {"Union", True}, {"Which", True}, {
          "While", True}, {"\[DoubleStruckCapitalC]", True}, {
          "\[DoubleStruckCapitalC]P", True}}], ImageSize -> Automatic]}]}, 
    False]],
  DynamicModuleValues:>{}]], "ComputationInfo",
 CellChangeTimes->{3.593174849906365*^9},
 CellID->1085987582],

Cell[BoxData[
 FormBox[
  RowBox[{
   SubscriptBox["+", 
    RowBox[{"0", ",", "1", ",", "2"}]], "[", 
   RowBox[{"a", ",", "b"}], "]"}], TheoremaForm]], "ComputationResult",
 CellChangeTimes->{{3.592643916177501*^9, 3.592643921932844*^9}, {
   3.592644097855621*^9, 3.592644101681884*^9}, {3.592644201087467*^9, 
   3.592644228332275*^9}, 3.592644575653315*^9, 3.59265015874122*^9, 
   3.59271580878322*^9, 3.592716242147608*^9, 3.593174849924432*^9},
 CellID->1368790579]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  SubsuperscriptBox["\[Square]", "bla", "bla"], "a"}]], "Computation",
 CellChangeTimes->{{3.593173415204159*^9, 3.593173457295191*^9}},
 CellID->1865574032],

Cell[BoxData[
 DynamicModuleBox[{Typeset`var$$ = False}, 
  InterpretationBox[
   StyleBox[
    PaneSelectorBox[{False->GridBox[{
       {
        OpenerBox[Dynamic[Typeset`var$$],
         Appearance->Automatic,
         AutoAction->False,
         ContinuousAction->False,
         Enabled->Automatic], "\<\"\"\>"}
      },
      AutoDelete->False,
      BaselinePosition->{1, 1},
      GridBoxAlignment->{"Columns" -> {{Left}}},
      GridBoxBackground->{"Columns" -> {{Automatic}}},
      GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
      GridBoxSpacings->{"Columns" -> {{0.2}}, "Rows" -> {{0.5}}}], True->
     GridBox[{
       {
        OpenerBox[Dynamic[Typeset`var$$],
         Appearance->Automatic,
         AutoAction->False,
         ContinuousAction->False,
         Enabled->Automatic], "\<\"\"\>"},
       {"", 
        PaneBox[
         TagBox[GridBox[{
            {
             TagBox[
              DynamicModuleBox[{Typeset`var$$ = False}, 
               InterpretationBox[
                StyleBox[
                 PaneSelectorBox[{False->GridBox[{
                    {
                    OpenerBox[Dynamic[Typeset`var$$],
                    Appearance->Automatic,
                    AutoAction->False,
                    ContinuousAction->False,
                    Enabled->Automatic], 
                    
                    StyleBox["\<\"Knowledge used in computation\"\>", 
                    "CIContent",
                    StripOnInput->False]}
                   },
                   AutoDelete->False,
                   BaselinePosition->{1, 1},
                   GridBoxAlignment->{"Columns" -> {{Left}}},
                   GridBoxBackground->{"Columns" -> {{Automatic}}},
                   
                   GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
                   
                   GridBoxSpacings->{
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}], True->
                  GridBox[{
                    {
                    OpenerBox[Dynamic[Typeset`var$$],
                    Appearance->Automatic,
                    AutoAction->False,
                    ContinuousAction->False,
                    Enabled->Automatic], 
                    
                    StyleBox["\<\"Knowledge used in computation\"\>", 
                    "CIContent",
                    StripOnInput->False]},
                    {"", 
                    PaneBox[
                    StyleBox[
                    RowBox[{"{", "}"}], "CIContent",
                    StripOnInput->False],
                    ImageMargins->0]}
                   },
                   AutoDelete->False,
                   BaselinePosition->{1, 1},
                   GridBoxAlignment->{"Columns" -> {{Left}}},
                   GridBoxBackground->{"Columns" -> {{Automatic}}},
                   
                   GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
                   
                   GridBoxSpacings->{
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}]}, Dynamic[
                  Typeset`var$$],
                  Alignment->Automatic,
                  BaselinePosition->Baseline,
                  DefaultBaseStyle->"OpenerView",
                  ImageMargins->0,
                  ImageSize->Automatic],
                 Deployed->False,
                 StripOnInput->False],
                OpenerView[{
                  Style["Knowledge used in computation", "CIContent"], 
                  Style[{}, "CIContent"]}, False]],
               DynamicModuleValues:>Automatic],
              Setting[#, {0}]& ]},
            {
             TagBox[
              DynamicModuleBox[{Typeset`var$$ = False}, 
               InterpretationBox[
                StyleBox[
                 PaneSelectorBox[{False->GridBox[{
                    {
                    OpenerBox[Dynamic[Typeset`var$$],
                    Appearance->Automatic,
                    AutoAction->False,
                    ContinuousAction->False,
                    Enabled->Automatic], 
                    
                    StyleBox["\<\"Builtins used in computation\"\>", 
                    "CIContent",
                    StripOnInput->False]}
                   },
                   AutoDelete->False,
                   BaselinePosition->{1, 1},
                   GridBoxAlignment->{"Columns" -> {{Left}}},
                   GridBoxBackground->{"Columns" -> {{Automatic}}},
                   
                   GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
                   
                   GridBoxSpacings->{
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}], True->
                  GridBox[{
                    {
                    OpenerBox[Dynamic[Typeset`var$$],
                    Appearance->Automatic,
                    AutoAction->False,
                    ContinuousAction->False,
                    Enabled->Automatic], 
                    
                    StyleBox["\<\"Builtins used in computation\"\>", 
                    "CIContent",
                    StripOnInput->False]},
                    {"", 
                    PaneBox[
                    StyleBox[
                    RowBox[{"{", 
                    
                    RowBox[{"\<\"AbsValue\"\>", ",", "\<\"And\"\>", 
                    ",", "\<\"Append\"\>", ",", "\<\"Cardinality\"\>", 
                    ",", "\<\"CartesianProduct\"\>", 
                    ",", "\<\"CaseDistinction\"\>", ",", "\<\"Delete\"\>", 
                    ",", "\<\"DeleteAt\"\>", ",", "\<\"Difference\"\>", 
                    ",", "\<\"Divide\"\>", ",", "\<\"Do\"\>", 
                    ",", "\<\"Exists\"\>", ",", "\<\"For\"\>", 
                    ",", "\<\"Forall\"\>", ",", "\<\"Greater\"\>", 
                    ",", "\<\"GreaterEqual\"\>", ",", "\<\"Iff\"\>", 
                    ",", "\<\"Implies\"\>", ",", "\<\"Insert\"\>", 
                    ",", "\<\"IntegerQR\"\>", ",", "\<\"IntegerRange\"\>", 
                    ",", "\<\"Intersection\"\>", ",", "\<\"isComplex\"\>", 
                    ",", "\<\"isComplexP\"\>", ",", "\<\"IsElement\"\>", 
                    ",", "\<\"isInteger\"\>", ",", "\<\"isRational\"\>", 
                    ",", "\<\"isReal\"\>", ",", "\<\"isSet\"\>", 
                    ",", "\<\"isTuple\"\>", ",", "\<\"Join\"\>", 
                    ",", "\<\"Length\"\>", ",", "\<\"Less\"\>", 
                    ",", "\<\"LessEqual\"\>", ",", "\<\"Let\"\>", 
                    ",", "\<\"Max\"\>", ",", "\<\"MaximumElementSet\"\>", 
                    ",", "\<\"Min\"\>", ",", "\<\"MinimumElementSet\"\>", 
                    ",", "\<\"Module\"\>", ",", "\<\"Not\"\>", 
                    ",", "\<\"Or\"\>", ",", "\<\"Plus\"\>", 
                    ",", "\<\"Power\"\>", ",", "\<\"PowerSet\"\>", 
                    ",", "\<\"Prepend\"\>", ",", "\<\"ProductOf\"\>", 
                    ",", "\<\"Radical\"\>", ",", "\<\"RationalRange\"\>", 
                    ",", "\<\"RealRange\"\>", ",", "\<\"Replace\"\>", 
                    ",", "\<\"ReplacePart\"\>", ",", "\<\"SetEqual\"\>", 
                    ",", "\<\"Subscript\"\>", ",", "\<\"Subset\"\>", 
                    ",", "\<\"SubsetEqual\"\>", ",", "\<\"Subtract\"\>", 
                    ",", "\<\"SumOf\"\>", ",", "\<\"Superset\"\>", 
                    ",", "\<\"SupersetEqual\"\>", ",", "\<\"Switch\"\>", 
                    ",", "\<\"SymmetricDifference\"\>", ",", "\<\"Times\"\>", 
                    ",", "\<\"TupleEqual\"\>", ",", "\<\"Union\"\>", 
                    ",", "\<\"Which\"\>", ",", "\<\"While\"\>", 
                    ",", "\<\"\[DoubleStruckCapitalC]\"\>", 
                    ",", "\<\"\[DoubleStruckCapitalC]P\"\>"}], "}"}], 
                    "CIContent",
                    StripOnInput->False],
                    ImageMargins->0]}
                   },
                   AutoDelete->False,
                   BaselinePosition->{1, 1},
                   GridBoxAlignment->{"Columns" -> {{Left}}},
                   GridBoxBackground->{"Columns" -> {{Automatic}}},
                   
                   GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
                   
                   GridBoxSpacings->{
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}]}, Dynamic[
                  Typeset`var$$],
                  Alignment->Automatic,
                  BaselinePosition->Baseline,
                  DefaultBaseStyle->"OpenerView",
                  ImageMargins->0,
                  ImageSize->Automatic],
                 Deployed->False,
                 StripOnInput->False],
                OpenerView[{
                  Style["Builtins used in computation", "CIContent"], 
                  
                  Style[{"AbsValue", "And", "Append", "Cardinality", 
                    "CartesianProduct", "CaseDistinction", "Delete", 
                    "DeleteAt", "Difference", "Divide", "Do", "Exists", "For",
                     "Forall", "Greater", "GreaterEqual", "Iff", "Implies", 
                    "Insert", "IntegerQR", "IntegerRange", "Intersection", 
                    "isComplex", "isComplexP", "IsElement", "isInteger", 
                    "isRational", "isReal", "isSet", "isTuple", "Join", 
                    "Length", "Less", "LessEqual", "Let", "Max", 
                    "MaximumElementSet", "Min", "MinimumElementSet", "Module",
                     "Not", "Or", "Plus", "Power", "PowerSet", "Prepend", 
                    "ProductOf", "Radical", "RationalRange", "RealRange", 
                    "Replace", "ReplacePart", "SetEqual", "Subscript", 
                    "Subset", "SubsetEqual", "Subtract", "SumOf", "Superset", 
                    "SupersetEqual", "Switch", "SymmetricDifference", "Times",
                     "TupleEqual", "Union", "Which", "While", 
                    "\[DoubleStruckCapitalC]", "\[DoubleStruckCapitalC]P"}, 
                   "CIContent"]}, False]],
               DynamicModuleValues:>Automatic],
              Setting[#, {0}]& ]},
            {
             ButtonBox["\<\"Restore environment\"\>",
              Appearance->Automatic,
              
              ButtonFunction:>
               Theorema`Interface`GUI`Private`setCompEnv[{}, {{
                 "AbsValue", True}, {"And", True}, {"Append", True}, {
                 "Cardinality", True}, {"CartesianProduct", True}, {
                 "CaseDistinction", True}, {"Delete", True}, {
                 "DeleteAt", True}, {"Difference", True}, {"Divide", True}, {
                 "Do", True}, {"Equal", False}, {"Exists", True}, {
                 "For", True}, {"Forall", True}, {"Greater", True}, {
                 "GreaterEqual", True}, {"Iff", True}, {"Implies", True}, {
                 "Insert", True}, {"IntegerQR", True}, {
                 "IntegerRange", True}, {"Intersection", True}, {
                 "isComplex", True}, {"isComplexP", True}, {
                 "IsElement", True}, {"isInteger", True}, {
                 "isRational", True}, {"isReal", True}, {"isSet", True}, {
                 "isTuple", True}, {"Join", True}, {"Length", True}, {
                 "Less", True}, {"LessEqual", True}, {"Let", True}, {
                 "Max", True}, {"MaximumElementSet", True}, {"Min", True}, {
                 "MinimumElementSet", True}, {"Module", True}, {
                 "Not", True}, {"Or", True}, {"Plus", True}, {
                 "Power", True}, {"PowerSet", True}, {"Prepend", True}, {
                 "ProductOf", True}, {"Radical", True}, {
                 "RationalRange", True}, {"RealRange", True}, {
                 "Replace", True}, {"ReplacePart", True}, {
                 "SetEqual", True}, {"Subscript", True}, {"Subset", True}, {
                 "SubsetEqual", True}, {"Subtract", True}, {"SumOf", True}, {
                 "Superset", True}, {"SupersetEqual", True}, {
                 "Switch", True}, {"SymmetricDifference", True}, {
                 "Times", True}, {"TupleEqual", True}, {"Union", True}, {
                 "Which", True}, {"While", True}, {
                 "\[DoubleStruckCapitalC]", True}, {
                 "\[DoubleStruckCapitalC]P", True}}],
              Evaluator->Automatic,
              ImageSize->Automatic,
              Method->"Preemptive"]}
           },
           DefaultBaseStyle->"Column",
           GridBoxAlignment->{"Columns" -> {{Left}}},
           
           GridBoxItemSize->{
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
          "Column"],
         ImageMargins->0]}
      },
      AutoDelete->False,
      BaselinePosition->{1, 1},
      GridBoxAlignment->{"Columns" -> {{Left}}},
      GridBoxBackground->{"Columns" -> {{Automatic}}},
      GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
      GridBoxSpacings->{"Columns" -> {{0.2}}, "Rows" -> {{0.5}}}]}, Dynamic[
     Typeset`var$$],
     Alignment->Automatic,
     BaselinePosition->Baseline,
     DefaultBaseStyle->"OpenerView",
     ImageMargins->0,
     ImageSize->Automatic],
    Deployed->False,
    StripOnInput->False],
   OpenerView[{"", 
     Column[{
       OpenerView[{
         Style["Knowledge used in computation", "CIContent"], 
         Style[{}, "CIContent"]}], 
       OpenerView[{
         Style["Builtins used in computation", "CIContent"], 
         Style[{
          "AbsValue", "And", "Append", "Cardinality", "CartesianProduct", 
           "CaseDistinction", "Delete", "DeleteAt", "Difference", "Divide", 
           "Do", "Exists", "For", "Forall", "Greater", "GreaterEqual", "Iff", 
           "Implies", "Insert", "IntegerQR", "IntegerRange", "Intersection", 
           "isComplex", "isComplexP", "IsElement", "isInteger", "isRational", 
           "isReal", "isSet", "isTuple", "Join", "Length", "Less", 
           "LessEqual", "Let", "Max", "MaximumElementSet", "Min", 
           "MinimumElementSet", "Module", "Not", "Or", "Plus", "Power", 
           "PowerSet", "Prepend", "ProductOf", "Radical", "RationalRange", 
           "RealRange", "Replace", "ReplacePart", "SetEqual", "Subscript", 
           "Subset", "SubsetEqual", "Subtract", "SumOf", "Superset", 
           "SupersetEqual", "Switch", "SymmetricDifference", "Times", 
           "TupleEqual", "Union", "Which", "While", "\[DoubleStruckCapitalC]",
            "\[DoubleStruckCapitalC]P"}, "CIContent"]}], 
       Button["Restore environment", 
        Theorema`Interface`GUI`Private`setCompEnv[{}, {{"AbsValue", True}, {
          "And", True}, {"Append", True}, {"Cardinality", True}, {
          "CartesianProduct", True}, {"CaseDistinction", True}, {
          "Delete", True}, {"DeleteAt", True}, {"Difference", True}, {
          "Divide", True}, {"Do", True}, {"Equal", False}, {"Exists", True}, {
          "For", True}, {"Forall", True}, {"Greater", True}, {
          "GreaterEqual", True}, {"Iff", True}, {"Implies", True}, {
          "Insert", True}, {"IntegerQR", True}, {"IntegerRange", True}, {
          "Intersection", True}, {"isComplex", True}, {"isComplexP", True}, {
          "IsElement", True}, {"isInteger", True}, {"isRational", True}, {
          "isReal", True}, {"isSet", True}, {"isTuple", True}, {
          "Join", True}, {"Length", True}, {"Less", True}, {
          "LessEqual", True}, {"Let", True}, {"Max", True}, {
          "MaximumElementSet", True}, {"Min", True}, {
          "MinimumElementSet", True}, {"Module", True}, {"Not", True}, {
          "Or", True}, {"Plus", True}, {"Power", True}, {"PowerSet", True}, {
          "Prepend", True}, {"ProductOf", True}, {"Radical", True}, {
          "RationalRange", True}, {"RealRange", True}, {"Replace", True}, {
          "ReplacePart", True}, {"SetEqual", True}, {"Subscript", True}, {
          "Subset", True}, {"SubsetEqual", True}, {"Subtract", True}, {
          "SumOf", True}, {"Superset", True}, {"SupersetEqual", True}, {
          "Switch", True}, {"SymmetricDifference", True}, {"Times", True}, {
          "TupleEqual", True}, {"Union", True}, {"Which", True}, {
          "While", True}, {"\[DoubleStruckCapitalC]", True}, {
          "\[DoubleStruckCapitalC]P", True}}], ImageSize -> Automatic]}]}, 
    False]],
  DynamicModuleValues:>{}]], "ComputationInfo",
 CellChangeTimes->{3.593174715540049*^9},
 CellID->1391111234],

Cell[BoxData[
 FormBox[
  RowBox[{
   TemplateBox[{"\[Square]","bla","bla"},
    "Subsuperscript"], "a"}], TheoremaForm]], "ComputationResult",
 CellChangeTimes->{3.593173460571598*^9, 3.593174715551285*^9},
 CellID->383244644]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"a", 
  UnderoverscriptBox["!!", "0", "1"]}]], "Computation",
 CellChangeTimes->{{3.593174727340509*^9, 3.59317474290638*^9}},
 CellID->1621983900],

Cell[BoxData[
 DynamicModuleBox[{Typeset`var$$ = False}, 
  InterpretationBox[
   StyleBox[
    PaneSelectorBox[{False->GridBox[{
       {
        OpenerBox[Dynamic[Typeset`var$$],
         Appearance->Automatic,
         AutoAction->False,
         ContinuousAction->False,
         Enabled->Automatic], "\<\"\"\>"}
      },
      AutoDelete->False,
      BaselinePosition->{1, 1},
      GridBoxAlignment->{"Columns" -> {{Left}}},
      GridBoxBackground->{"Columns" -> {{Automatic}}},
      GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
      GridBoxSpacings->{"Columns" -> {{0.2}}, "Rows" -> {{0.5}}}], True->
     GridBox[{
       {
        OpenerBox[Dynamic[Typeset`var$$],
         Appearance->Automatic,
         AutoAction->False,
         ContinuousAction->False,
         Enabled->Automatic], "\<\"\"\>"},
       {"", 
        PaneBox[
         TagBox[GridBox[{
            {
             TagBox[
              DynamicModuleBox[{Typeset`var$$ = False}, 
               InterpretationBox[
                StyleBox[
                 PaneSelectorBox[{False->GridBox[{
                    {
                    OpenerBox[Dynamic[Typeset`var$$],
                    Appearance->Automatic,
                    AutoAction->False,
                    ContinuousAction->False,
                    Enabled->Automatic], 
                    
                    StyleBox["\<\"Knowledge used in computation\"\>", 
                    "CIContent",
                    StripOnInput->False]}
                   },
                   AutoDelete->False,
                   BaselinePosition->{1, 1},
                   GridBoxAlignment->{"Columns" -> {{Left}}},
                   GridBoxBackground->{"Columns" -> {{Automatic}}},
                   
                   GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
                   
                   GridBoxSpacings->{
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}], True->
                  GridBox[{
                    {
                    OpenerBox[Dynamic[Typeset`var$$],
                    Appearance->Automatic,
                    AutoAction->False,
                    ContinuousAction->False,
                    Enabled->Automatic], 
                    
                    StyleBox["\<\"Knowledge used in computation\"\>", 
                    "CIContent",
                    StripOnInput->False]},
                    {"", 
                    PaneBox[
                    StyleBox[
                    RowBox[{"{", "}"}], "CIContent",
                    StripOnInput->False],
                    ImageMargins->0]}
                   },
                   AutoDelete->False,
                   BaselinePosition->{1, 1},
                   GridBoxAlignment->{"Columns" -> {{Left}}},
                   GridBoxBackground->{"Columns" -> {{Automatic}}},
                   
                   GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
                   
                   GridBoxSpacings->{
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}]}, Dynamic[
                  Typeset`var$$],
                  Alignment->Automatic,
                  BaselinePosition->Baseline,
                  DefaultBaseStyle->"OpenerView",
                  ImageMargins->0,
                  ImageSize->Automatic],
                 Deployed->False,
                 StripOnInput->False],
                OpenerView[{
                  Style["Knowledge used in computation", "CIContent"], 
                  Style[{}, "CIContent"]}, False]],
               DynamicModuleValues:>Automatic],
              Setting[#, {0}]& ]},
            {
             TagBox[
              DynamicModuleBox[{Typeset`var$$ = False}, 
               InterpretationBox[
                StyleBox[
                 PaneSelectorBox[{False->GridBox[{
                    {
                    OpenerBox[Dynamic[Typeset`var$$],
                    Appearance->Automatic,
                    AutoAction->False,
                    ContinuousAction->False,
                    Enabled->Automatic], 
                    
                    StyleBox["\<\"Builtins used in computation\"\>", 
                    "CIContent",
                    StripOnInput->False]}
                   },
                   AutoDelete->False,
                   BaselinePosition->{1, 1},
                   GridBoxAlignment->{"Columns" -> {{Left}}},
                   GridBoxBackground->{"Columns" -> {{Automatic}}},
                   
                   GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
                   
                   GridBoxSpacings->{
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}], True->
                  GridBox[{
                    {
                    OpenerBox[Dynamic[Typeset`var$$],
                    Appearance->Automatic,
                    AutoAction->False,
                    ContinuousAction->False,
                    Enabled->Automatic], 
                    
                    StyleBox["\<\"Builtins used in computation\"\>", 
                    "CIContent",
                    StripOnInput->False]},
                    {"", 
                    PaneBox[
                    StyleBox[
                    RowBox[{"{", 
                    
                    RowBox[{"\<\"AbsValue\"\>", ",", "\<\"And\"\>", 
                    ",", "\<\"Append\"\>", ",", "\<\"Cardinality\"\>", 
                    ",", "\<\"CartesianProduct\"\>", 
                    ",", "\<\"CaseDistinction\"\>", ",", "\<\"Delete\"\>", 
                    ",", "\<\"DeleteAt\"\>", ",", "\<\"Difference\"\>", 
                    ",", "\<\"Divide\"\>", ",", "\<\"Do\"\>", 
                    ",", "\<\"Exists\"\>", ",", "\<\"For\"\>", 
                    ",", "\<\"Forall\"\>", ",", "\<\"Greater\"\>", 
                    ",", "\<\"GreaterEqual\"\>", ",", "\<\"Iff\"\>", 
                    ",", "\<\"Implies\"\>", ",", "\<\"Insert\"\>", 
                    ",", "\<\"IntegerQR\"\>", ",", "\<\"IntegerRange\"\>", 
                    ",", "\<\"Intersection\"\>", ",", "\<\"isComplex\"\>", 
                    ",", "\<\"isComplexP\"\>", ",", "\<\"IsElement\"\>", 
                    ",", "\<\"isInteger\"\>", ",", "\<\"isRational\"\>", 
                    ",", "\<\"isReal\"\>", ",", "\<\"isSet\"\>", 
                    ",", "\<\"isTuple\"\>", ",", "\<\"Join\"\>", 
                    ",", "\<\"Length\"\>", ",", "\<\"Less\"\>", 
                    ",", "\<\"LessEqual\"\>", ",", "\<\"Let\"\>", 
                    ",", "\<\"Max\"\>", ",", "\<\"MaximumElementSet\"\>", 
                    ",", "\<\"Min\"\>", ",", "\<\"MinimumElementSet\"\>", 
                    ",", "\<\"Module\"\>", ",", "\<\"Not\"\>", 
                    ",", "\<\"Or\"\>", ",", "\<\"Plus\"\>", 
                    ",", "\<\"Power\"\>", ",", "\<\"PowerSet\"\>", 
                    ",", "\<\"Prepend\"\>", ",", "\<\"ProductOf\"\>", 
                    ",", "\<\"Radical\"\>", ",", "\<\"RationalRange\"\>", 
                    ",", "\<\"RealRange\"\>", ",", "\<\"Replace\"\>", 
                    ",", "\<\"ReplacePart\"\>", ",", "\<\"SetEqual\"\>", 
                    ",", "\<\"Subscript\"\>", ",", "\<\"Subset\"\>", 
                    ",", "\<\"SubsetEqual\"\>", ",", "\<\"Subtract\"\>", 
                    ",", "\<\"SumOf\"\>", ",", "\<\"Superset\"\>", 
                    ",", "\<\"SupersetEqual\"\>", ",", "\<\"Switch\"\>", 
                    ",", "\<\"SymmetricDifference\"\>", ",", "\<\"Times\"\>", 
                    ",", "\<\"TupleEqual\"\>", ",", "\<\"Union\"\>", 
                    ",", "\<\"Which\"\>", ",", "\<\"While\"\>", 
                    ",", "\<\"\[DoubleStruckCapitalC]\"\>", 
                    ",", "\<\"\[DoubleStruckCapitalC]P\"\>"}], "}"}], 
                    "CIContent",
                    StripOnInput->False],
                    ImageMargins->0]}
                   },
                   AutoDelete->False,
                   BaselinePosition->{1, 1},
                   GridBoxAlignment->{"Columns" -> {{Left}}},
                   GridBoxBackground->{"Columns" -> {{Automatic}}},
                   
                   GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
                   
                   GridBoxSpacings->{
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}]}, Dynamic[
                  Typeset`var$$],
                  Alignment->Automatic,
                  BaselinePosition->Baseline,
                  DefaultBaseStyle->"OpenerView",
                  ImageMargins->0,
                  ImageSize->Automatic],
                 Deployed->False,
                 StripOnInput->False],
                OpenerView[{
                  Style["Builtins used in computation", "CIContent"], 
                  
                  Style[{"AbsValue", "And", "Append", "Cardinality", 
                    "CartesianProduct", "CaseDistinction", "Delete", 
                    "DeleteAt", "Difference", "Divide", "Do", "Exists", "For",
                     "Forall", "Greater", "GreaterEqual", "Iff", "Implies", 
                    "Insert", "IntegerQR", "IntegerRange", "Intersection", 
                    "isComplex", "isComplexP", "IsElement", "isInteger", 
                    "isRational", "isReal", "isSet", "isTuple", "Join", 
                    "Length", "Less", "LessEqual", "Let", "Max", 
                    "MaximumElementSet", "Min", "MinimumElementSet", "Module",
                     "Not", "Or", "Plus", "Power", "PowerSet", "Prepend", 
                    "ProductOf", "Radical", "RationalRange", "RealRange", 
                    "Replace", "ReplacePart", "SetEqual", "Subscript", 
                    "Subset", "SubsetEqual", "Subtract", "SumOf", "Superset", 
                    "SupersetEqual", "Switch", "SymmetricDifference", "Times",
                     "TupleEqual", "Union", "Which", "While", 
                    "\[DoubleStruckCapitalC]", "\[DoubleStruckCapitalC]P"}, 
                   "CIContent"]}, False]],
               DynamicModuleValues:>Automatic],
              Setting[#, {0}]& ]},
            {
             ButtonBox["\<\"Restore environment\"\>",
              Appearance->Automatic,
              
              ButtonFunction:>
               Theorema`Interface`GUI`Private`setCompEnv[{}, {{
                 "AbsValue", True}, {"And", True}, {"Append", True}, {
                 "Cardinality", True}, {"CartesianProduct", True}, {
                 "CaseDistinction", True}, {"Delete", True}, {
                 "DeleteAt", True}, {"Difference", True}, {"Divide", True}, {
                 "Do", True}, {"Equal", False}, {"Exists", True}, {
                 "For", True}, {"Forall", True}, {"Greater", True}, {
                 "GreaterEqual", True}, {"Iff", True}, {"Implies", True}, {
                 "Insert", True}, {"IntegerQR", True}, {
                 "IntegerRange", True}, {"Intersection", True}, {
                 "isComplex", True}, {"isComplexP", True}, {
                 "IsElement", True}, {"isInteger", True}, {
                 "isRational", True}, {"isReal", True}, {"isSet", True}, {
                 "isTuple", True}, {"Join", True}, {"Length", True}, {
                 "Less", True}, {"LessEqual", True}, {"Let", True}, {
                 "Max", True}, {"MaximumElementSet", True}, {"Min", True}, {
                 "MinimumElementSet", True}, {"Module", True}, {
                 "Not", True}, {"Or", True}, {"Plus", True}, {
                 "Power", True}, {"PowerSet", True}, {"Prepend", True}, {
                 "ProductOf", True}, {"Radical", True}, {
                 "RationalRange", True}, {"RealRange", True}, {
                 "Replace", True}, {"ReplacePart", True}, {
                 "SetEqual", True}, {"Subscript", True}, {"Subset", True}, {
                 "SubsetEqual", True}, {"Subtract", True}, {"SumOf", True}, {
                 "Superset", True}, {"SupersetEqual", True}, {
                 "Switch", True}, {"SymmetricDifference", True}, {
                 "Times", True}, {"TupleEqual", True}, {"Union", True}, {
                 "Which", True}, {"While", True}, {
                 "\[DoubleStruckCapitalC]", True}, {
                 "\[DoubleStruckCapitalC]P", True}}],
              Evaluator->Automatic,
              ImageSize->Automatic,
              Method->"Preemptive"]}
           },
           DefaultBaseStyle->"Column",
           GridBoxAlignment->{"Columns" -> {{Left}}},
           
           GridBoxItemSize->{
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
          "Column"],
         ImageMargins->0]}
      },
      AutoDelete->False,
      BaselinePosition->{1, 1},
      GridBoxAlignment->{"Columns" -> {{Left}}},
      GridBoxBackground->{"Columns" -> {{Automatic}}},
      GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
      GridBoxSpacings->{"Columns" -> {{0.2}}, "Rows" -> {{0.5}}}]}, Dynamic[
     Typeset`var$$],
     Alignment->Automatic,
     BaselinePosition->Baseline,
     DefaultBaseStyle->"OpenerView",
     ImageMargins->0,
     ImageSize->Automatic],
    Deployed->False,
    StripOnInput->False],
   OpenerView[{"", 
     Column[{
       OpenerView[{
         Style["Knowledge used in computation", "CIContent"], 
         Style[{}, "CIContent"]}], 
       OpenerView[{
         Style["Builtins used in computation", "CIContent"], 
         Style[{
          "AbsValue", "And", "Append", "Cardinality", "CartesianProduct", 
           "CaseDistinction", "Delete", "DeleteAt", "Difference", "Divide", 
           "Do", "Exists", "For", "Forall", "Greater", "GreaterEqual", "Iff", 
           "Implies", "Insert", "IntegerQR", "IntegerRange", "Intersection", 
           "isComplex", "isComplexP", "IsElement", "isInteger", "isRational", 
           "isReal", "isSet", "isTuple", "Join", "Length", "Less", 
           "LessEqual", "Let", "Max", "MaximumElementSet", "Min", 
           "MinimumElementSet", "Module", "Not", "Or", "Plus", "Power", 
           "PowerSet", "Prepend", "ProductOf", "Radical", "RationalRange", 
           "RealRange", "Replace", "ReplacePart", "SetEqual", "Subscript", 
           "Subset", "SubsetEqual", "Subtract", "SumOf", "Superset", 
           "SupersetEqual", "Switch", "SymmetricDifference", "Times", 
           "TupleEqual", "Union", "Which", "While", "\[DoubleStruckCapitalC]",
            "\[DoubleStruckCapitalC]P"}, "CIContent"]}], 
       Button["Restore environment", 
        Theorema`Interface`GUI`Private`setCompEnv[{}, {{"AbsValue", True}, {
          "And", True}, {"Append", True}, {"Cardinality", True}, {
          "CartesianProduct", True}, {"CaseDistinction", True}, {
          "Delete", True}, {"DeleteAt", True}, {"Difference", True}, {
          "Divide", True}, {"Do", True}, {"Equal", False}, {"Exists", True}, {
          "For", True}, {"Forall", True}, {"Greater", True}, {
          "GreaterEqual", True}, {"Iff", True}, {"Implies", True}, {
          "Insert", True}, {"IntegerQR", True}, {"IntegerRange", True}, {
          "Intersection", True}, {"isComplex", True}, {"isComplexP", True}, {
          "IsElement", True}, {"isInteger", True}, {"isRational", True}, {
          "isReal", True}, {"isSet", True}, {"isTuple", True}, {
          "Join", True}, {"Length", True}, {"Less", True}, {
          "LessEqual", True}, {"Let", True}, {"Max", True}, {
          "MaximumElementSet", True}, {"Min", True}, {
          "MinimumElementSet", True}, {"Module", True}, {"Not", True}, {
          "Or", True}, {"Plus", True}, {"Power", True}, {"PowerSet", True}, {
          "Prepend", True}, {"ProductOf", True}, {"Radical", True}, {
          "RationalRange", True}, {"RealRange", True}, {"Replace", True}, {
          "ReplacePart", True}, {"SetEqual", True}, {"Subscript", True}, {
          "Subset", True}, {"SubsetEqual", True}, {"Subtract", True}, {
          "SumOf", True}, {"Superset", True}, {"SupersetEqual", True}, {
          "Switch", True}, {"SymmetricDifference", True}, {"Times", True}, {
          "TupleEqual", True}, {"Union", True}, {"Which", True}, {
          "While", True}, {"\[DoubleStruckCapitalC]", True}, {
          "\[DoubleStruckCapitalC]P", True}}], ImageSize -> Automatic]}]}, 
    False]],
  DynamicModuleValues:>{}]], "ComputationInfo",
 CellChangeTimes->{3.593232813734557*^9},
 CellID->1092143830],

Cell[BoxData[
 FormBox[
  RowBox[{"a", 
   UnderoverscriptBox["!!", "0", "1"]}], TheoremaForm]], "ComputationResult",
 CellChangeTimes->{3.593174744694288*^9, 3.593232813763597*^9},
 CellID->790789736]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   TagBox["(",
    "AutoParentheses"], "\[SmallCircle]", 
   TagBox[")",
    "AutoParentheses"]}], "[", "a", "]"}]], "Computation",
 CellChangeTimes->{{3.593232678553214*^9, 3.593232691565348*^9}, {
   3.59323290789811*^9, 3.593232970924739*^9}, {3.593233027748126*^9, 
   3.593233033851178*^9}, {3.59323317862507*^9, 3.593233178937834*^9}, {
   3.59323481204427*^9, 3.593234812448265*^9}, 3.593235471452016*^9, {
   3.593236805150217*^9, 3.593236827240146*^9}, {3.593236937962478*^9, 
   3.593236959721905*^9}, 3.593237006788233*^9, {3.593237201933728*^9, 
   3.593237229095084*^9}},
 CellID->909996593],

Cell[BoxData[
 DynamicModuleBox[{Typeset`var$$ = False}, 
  InterpretationBox[
   StyleBox[
    PaneSelectorBox[{False->GridBox[{
       {
        OpenerBox[Dynamic[Typeset`var$$],
         Appearance->Automatic,
         AutoAction->False,
         ContinuousAction->False,
         Enabled->Automatic], "\<\"\"\>"}
      },
      AutoDelete->False,
      BaselinePosition->{1, 1},
      GridBoxAlignment->{"Columns" -> {{Left}}},
      GridBoxBackground->{"Columns" -> {{Automatic}}},
      GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
      GridBoxSpacings->{"Columns" -> {{0.2}}, "Rows" -> {{0.5}}}], True->
     GridBox[{
       {
        OpenerBox[Dynamic[Typeset`var$$],
         Appearance->Automatic,
         AutoAction->False,
         ContinuousAction->False,
         Enabled->Automatic], "\<\"\"\>"},
       {"", 
        PaneBox[
         TagBox[GridBox[{
            {
             TagBox[
              DynamicModuleBox[{Typeset`var$$ = False}, 
               InterpretationBox[
                StyleBox[
                 PaneSelectorBox[{False->GridBox[{
                    {
                    OpenerBox[Dynamic[Typeset`var$$],
                    Appearance->Automatic,
                    AutoAction->False,
                    ContinuousAction->False,
                    Enabled->Automatic], 
                    
                    StyleBox["\<\"Knowledge used in computation\"\>", 
                    "CIContent",
                    StripOnInput->False]}
                   },
                   AutoDelete->False,
                   BaselinePosition->{1, 1},
                   GridBoxAlignment->{"Columns" -> {{Left}}},
                   GridBoxBackground->{"Columns" -> {{Automatic}}},
                   
                   GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
                   
                   GridBoxSpacings->{
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}], True->
                  GridBox[{
                    {
                    OpenerBox[Dynamic[Typeset`var$$],
                    Appearance->Automatic,
                    AutoAction->False,
                    ContinuousAction->False,
                    Enabled->Automatic], 
                    
                    StyleBox["\<\"Knowledge used in computation\"\>", 
                    "CIContent",
                    StripOnInput->False]},
                    {"", 
                    PaneBox[
                    StyleBox[
                    RowBox[{"{", "}"}], "CIContent",
                    StripOnInput->False],
                    ImageMargins->0]}
                   },
                   AutoDelete->False,
                   BaselinePosition->{1, 1},
                   GridBoxAlignment->{"Columns" -> {{Left}}},
                   GridBoxBackground->{"Columns" -> {{Automatic}}},
                   
                   GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
                   
                   GridBoxSpacings->{
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}]}, Dynamic[
                  Typeset`var$$],
                  Alignment->Automatic,
                  BaselinePosition->Baseline,
                  DefaultBaseStyle->"OpenerView",
                  ImageMargins->0,
                  ImageSize->Automatic],
                 Deployed->False,
                 StripOnInput->False],
                OpenerView[{
                  Style["Knowledge used in computation", "CIContent"], 
                  Style[{}, "CIContent"]}, False]],
               DynamicModuleValues:>Automatic],
              Setting[#, {0}]& ]},
            {
             TagBox[
              DynamicModuleBox[{Typeset`var$$ = False}, 
               InterpretationBox[
                StyleBox[
                 PaneSelectorBox[{False->GridBox[{
                    {
                    OpenerBox[Dynamic[Typeset`var$$],
                    Appearance->Automatic,
                    AutoAction->False,
                    ContinuousAction->False,
                    Enabled->Automatic], 
                    
                    StyleBox["\<\"Builtins used in computation\"\>", 
                    "CIContent",
                    StripOnInput->False]}
                   },
                   AutoDelete->False,
                   BaselinePosition->{1, 1},
                   GridBoxAlignment->{"Columns" -> {{Left}}},
                   GridBoxBackground->{"Columns" -> {{Automatic}}},
                   
                   GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
                   
                   GridBoxSpacings->{
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}], True->
                  GridBox[{
                    {
                    OpenerBox[Dynamic[Typeset`var$$],
                    Appearance->Automatic,
                    AutoAction->False,
                    ContinuousAction->False,
                    Enabled->Automatic], 
                    
                    StyleBox["\<\"Builtins used in computation\"\>", 
                    "CIContent",
                    StripOnInput->False]},
                    {"", 
                    PaneBox[
                    StyleBox[
                    RowBox[{"{", 
                    
                    RowBox[{"\<\"AbsValue\"\>", ",", "\<\"And\"\>", 
                    ",", "\<\"Append\"\>", ",", "\<\"Cardinality\"\>", 
                    ",", "\<\"CartesianProduct\"\>", 
                    ",", "\<\"CaseDistinction\"\>", ",", "\<\"Delete\"\>", 
                    ",", "\<\"DeleteAt\"\>", ",", "\<\"Difference\"\>", 
                    ",", "\<\"Divide\"\>", ",", "\<\"Do\"\>", 
                    ",", "\<\"Exists\"\>", ",", "\<\"For\"\>", 
                    ",", "\<\"Forall\"\>", ",", "\<\"Greater\"\>", 
                    ",", "\<\"GreaterEqual\"\>", ",", "\<\"Iff\"\>", 
                    ",", "\<\"Implies\"\>", ",", "\<\"Insert\"\>", 
                    ",", "\<\"IntegerQR\"\>", ",", "\<\"IntegerRange\"\>", 
                    ",", "\<\"Intersection\"\>", ",", "\<\"isComplex\"\>", 
                    ",", "\<\"isComplexP\"\>", ",", "\<\"IsElement\"\>", 
                    ",", "\<\"isInteger\"\>", ",", "\<\"isRational\"\>", 
                    ",", "\<\"isReal\"\>", ",", "\<\"isSet\"\>", 
                    ",", "\<\"isTuple\"\>", ",", "\<\"Join\"\>", 
                    ",", "\<\"Length\"\>", ",", "\<\"Less\"\>", 
                    ",", "\<\"LessEqual\"\>", ",", "\<\"Let\"\>", 
                    ",", "\<\"Max\"\>", ",", "\<\"MaximumElementSet\"\>", 
                    ",", "\<\"Min\"\>", ",", "\<\"MinimumElementSet\"\>", 
                    ",", "\<\"Module\"\>", ",", "\<\"Not\"\>", 
                    ",", "\<\"Or\"\>", ",", "\<\"Plus\"\>", 
                    ",", "\<\"Power\"\>", ",", "\<\"PowerSet\"\>", 
                    ",", "\<\"Prepend\"\>", ",", "\<\"ProductOf\"\>", 
                    ",", "\<\"Radical\"\>", ",", "\<\"RationalRange\"\>", 
                    ",", "\<\"RealRange\"\>", ",", "\<\"Replace\"\>", 
                    ",", "\<\"ReplacePart\"\>", ",", "\<\"SetEqual\"\>", 
                    ",", "\<\"Subscript\"\>", ",", "\<\"Subset\"\>", 
                    ",", "\<\"SubsetEqual\"\>", ",", "\<\"Subtract\"\>", 
                    ",", "\<\"SumOf\"\>", ",", "\<\"Superset\"\>", 
                    ",", "\<\"SupersetEqual\"\>", ",", "\<\"Switch\"\>", 
                    ",", "\<\"SymmetricDifference\"\>", ",", "\<\"Times\"\>", 
                    ",", "\<\"TupleEqual\"\>", ",", "\<\"Union\"\>", 
                    ",", "\<\"Which\"\>", ",", "\<\"While\"\>", 
                    ",", "\<\"\[DoubleStruckCapitalC]\"\>", 
                    ",", "\<\"\[DoubleStruckCapitalC]P\"\>"}], "}"}], 
                    "CIContent",
                    StripOnInput->False],
                    ImageMargins->0]}
                   },
                   AutoDelete->False,
                   BaselinePosition->{1, 1},
                   GridBoxAlignment->{"Columns" -> {{Left}}},
                   GridBoxBackground->{"Columns" -> {{Automatic}}},
                   
                   GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
                   
                   GridBoxSpacings->{
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}]}, Dynamic[
                  Typeset`var$$],
                  Alignment->Automatic,
                  BaselinePosition->Baseline,
                  DefaultBaseStyle->"OpenerView",
                  ImageMargins->0,
                  ImageSize->Automatic],
                 Deployed->False,
                 StripOnInput->False],
                OpenerView[{
                  Style["Builtins used in computation", "CIContent"], 
                  
                  Style[{"AbsValue", "And", "Append", "Cardinality", 
                    "CartesianProduct", "CaseDistinction", "Delete", 
                    "DeleteAt", "Difference", "Divide", "Do", "Exists", "For",
                     "Forall", "Greater", "GreaterEqual", "Iff", "Implies", 
                    "Insert", "IntegerQR", "IntegerRange", "Intersection", 
                    "isComplex", "isComplexP", "IsElement", "isInteger", 
                    "isRational", "isReal", "isSet", "isTuple", "Join", 
                    "Length", "Less", "LessEqual", "Let", "Max", 
                    "MaximumElementSet", "Min", "MinimumElementSet", "Module",
                     "Not", "Or", "Plus", "Power", "PowerSet", "Prepend", 
                    "ProductOf", "Radical", "RationalRange", "RealRange", 
                    "Replace", "ReplacePart", "SetEqual", "Subscript", 
                    "Subset", "SubsetEqual", "Subtract", "SumOf", "Superset", 
                    "SupersetEqual", "Switch", "SymmetricDifference", "Times",
                     "TupleEqual", "Union", "Which", "While", 
                    "\[DoubleStruckCapitalC]", "\[DoubleStruckCapitalC]P"}, 
                   "CIContent"]}, False]],
               DynamicModuleValues:>Automatic],
              Setting[#, {0}]& ]},
            {
             ButtonBox["\<\"Restore environment\"\>",
              Appearance->Automatic,
              
              ButtonFunction:>
               Theorema`Interface`GUI`Private`setCompEnv[{}, {{
                 "AbsValue", True}, {"And", True}, {"Append", True}, {
                 "Cardinality", True}, {"CartesianProduct", True}, {
                 "CaseDistinction", True}, {"Delete", True}, {
                 "DeleteAt", True}, {"Difference", True}, {"Divide", True}, {
                 "Do", True}, {"Equal", False}, {"Exists", True}, {
                 "For", True}, {"Forall", True}, {"Greater", True}, {
                 "GreaterEqual", True}, {"Iff", True}, {"Implies", True}, {
                 "Insert", True}, {"IntegerQR", True}, {
                 "IntegerRange", True}, {"Intersection", True}, {
                 "isComplex", True}, {"isComplexP", True}, {
                 "IsElement", True}, {"isInteger", True}, {
                 "isRational", True}, {"isReal", True}, {"isSet", True}, {
                 "isTuple", True}, {"Join", True}, {"Length", True}, {
                 "Less", True}, {"LessEqual", True}, {"Let", True}, {
                 "Max", True}, {"MaximumElementSet", True}, {"Min", True}, {
                 "MinimumElementSet", True}, {"Module", True}, {
                 "Not", True}, {"Or", True}, {"Plus", True}, {
                 "Power", True}, {"PowerSet", True}, {"Prepend", True}, {
                 "ProductOf", True}, {"Radical", True}, {
                 "RationalRange", True}, {"RealRange", True}, {
                 "Replace", True}, {"ReplacePart", True}, {
                 "SetEqual", True}, {"Subscript", True}, {"Subset", True}, {
                 "SubsetEqual", True}, {"Subtract", True}, {"SumOf", True}, {
                 "Superset", True}, {"SupersetEqual", True}, {
                 "Switch", True}, {"SymmetricDifference", True}, {
                 "Times", True}, {"TupleEqual", True}, {"Union", True}, {
                 "Which", True}, {"While", True}, {
                 "\[DoubleStruckCapitalC]", True}, {
                 "\[DoubleStruckCapitalC]P", True}}],
              Evaluator->Automatic,
              ImageSize->Automatic,
              Method->"Preemptive"]}
           },
           DefaultBaseStyle->"Column",
           GridBoxAlignment->{"Columns" -> {{Left}}},
           
           GridBoxItemSize->{
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
          "Column"],
         ImageMargins->0]}
      },
      AutoDelete->False,
      BaselinePosition->{1, 1},
      GridBoxAlignment->{"Columns" -> {{Left}}},
      GridBoxBackground->{"Columns" -> {{Automatic}}},
      GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
      GridBoxSpacings->{"Columns" -> {{0.2}}, "Rows" -> {{0.5}}}]}, Dynamic[
     Typeset`var$$],
     Alignment->Automatic,
     BaselinePosition->Baseline,
     DefaultBaseStyle->"OpenerView",
     ImageMargins->0,
     ImageSize->Automatic],
    Deployed->False,
    StripOnInput->False],
   OpenerView[{"", 
     Column[{
       OpenerView[{
         Style["Knowledge used in computation", "CIContent"], 
         Style[{}, "CIContent"]}], 
       OpenerView[{
         Style["Builtins used in computation", "CIContent"], 
         Style[{
          "AbsValue", "And", "Append", "Cardinality", "CartesianProduct", 
           "CaseDistinction", "Delete", "DeleteAt", "Difference", "Divide", 
           "Do", "Exists", "For", "Forall", "Greater", "GreaterEqual", "Iff", 
           "Implies", "Insert", "IntegerQR", "IntegerRange", "Intersection", 
           "isComplex", "isComplexP", "IsElement", "isInteger", "isRational", 
           "isReal", "isSet", "isTuple", "Join", "Length", "Less", 
           "LessEqual", "Let", "Max", "MaximumElementSet", "Min", 
           "MinimumElementSet", "Module", "Not", "Or", "Plus", "Power", 
           "PowerSet", "Prepend", "ProductOf", "Radical", "RationalRange", 
           "RealRange", "Replace", "ReplacePart", "SetEqual", "Subscript", 
           "Subset", "SubsetEqual", "Subtract", "SumOf", "Superset", 
           "SupersetEqual", "Switch", "SymmetricDifference", "Times", 
           "TupleEqual", "Union", "Which", "While", "\[DoubleStruckCapitalC]",
            "\[DoubleStruckCapitalC]P"}, "CIContent"]}], 
       Button["Restore environment", 
        Theorema`Interface`GUI`Private`setCompEnv[{}, {{"AbsValue", True}, {
          "And", True}, {"Append", True}, {"Cardinality", True}, {
          "CartesianProduct", True}, {"CaseDistinction", True}, {
          "Delete", True}, {"DeleteAt", True}, {"Difference", True}, {
          "Divide", True}, {"Do", True}, {"Equal", False}, {"Exists", True}, {
          "For", True}, {"Forall", True}, {"Greater", True}, {
          "GreaterEqual", True}, {"Iff", True}, {"Implies", True}, {
          "Insert", True}, {"IntegerQR", True}, {"IntegerRange", True}, {
          "Intersection", True}, {"isComplex", True}, {"isComplexP", True}, {
          "IsElement", True}, {"isInteger", True}, {"isRational", True}, {
          "isReal", True}, {"isSet", True}, {"isTuple", True}, {
          "Join", True}, {"Length", True}, {"Less", True}, {
          "LessEqual", True}, {"Let", True}, {"Max", True}, {
          "MaximumElementSet", True}, {"Min", True}, {
          "MinimumElementSet", True}, {"Module", True}, {"Not", True}, {
          "Or", True}, {"Plus", True}, {"Power", True}, {"PowerSet", True}, {
          "Prepend", True}, {"ProductOf", True}, {"Radical", True}, {
          "RationalRange", True}, {"RealRange", True}, {"Replace", True}, {
          "ReplacePart", True}, {"SetEqual", True}, {"Subscript", True}, {
          "Subset", True}, {"SubsetEqual", True}, {"Subtract", True}, {
          "SumOf", True}, {"Superset", True}, {"SupersetEqual", True}, {
          "Switch", True}, {"SymmetricDifference", True}, {"Times", True}, {
          "TupleEqual", True}, {"Union", True}, {"Which", True}, {
          "While", True}, {"\[DoubleStruckCapitalC]", True}, {
          "\[DoubleStruckCapitalC]P", True}}], ImageSize -> Automatic]}]}, 
    False]],
  DynamicModuleValues:>{}]], "ComputationInfo",
 CellChangeTimes->{3.593237229740631*^9},
 CellID->542266795],

Cell[BoxData[
 FormBox[
  RowBox[{
   RowBox[{
    TagBox["(",
     "AutoParentheses"], "\[SmallCircle]", 
    TagBox[")",
     "AutoParentheses"]}], "[", "a", "]"}], 
  TheoremaForm]], "ComputationResult",
 CellChangeTimes->{{3.593232917900863*^9, 3.59323297767267*^9}, {
   3.593233029139153*^9, 3.593233034265161*^9}, 3.593233115102285*^9, 
   3.593233179423979*^9, {3.593234805529892*^9, 3.593234819147074*^9}, 
   3.593235473251637*^9, {3.593236807105623*^9, 3.593236827638804*^9}, {
   3.593236933565154*^9, 3.593236960658111*^9}, {3.593237007581558*^9, 
   3.593237018694711*^9}, {3.593237188909*^9, 3.593237229750136*^9}},
 CellID->358559730]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  UnderscriptBox[
   SubscriptBox["Plus", "x"], "D"], "[", 
  RowBox[{"a", ",", "b", ",", "c"}], "]"}]], "Computation",
 CellChangeTimes->{{3.593238664949666*^9, 3.593238702061535*^9}},
 CellID->286718588],

Cell[BoxData[
 DynamicModuleBox[{Typeset`var$$ = False}, 
  InterpretationBox[
   StyleBox[
    PaneSelectorBox[{False->GridBox[{
       {
        OpenerBox[Dynamic[Typeset`var$$],
         Appearance->Automatic,
         AutoAction->False,
         ContinuousAction->False,
         Enabled->Automatic], "\<\"\"\>"}
      },
      AutoDelete->False,
      BaselinePosition->{1, 1},
      GridBoxAlignment->{"Columns" -> {{Left}}},
      GridBoxBackground->{"Columns" -> {{Automatic}}},
      GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
      GridBoxSpacings->{"Columns" -> {{0.2}}, "Rows" -> {{0.5}}}], True->
     GridBox[{
       {
        OpenerBox[Dynamic[Typeset`var$$],
         Appearance->Automatic,
         AutoAction->False,
         ContinuousAction->False,
         Enabled->Automatic], "\<\"\"\>"},
       {"", 
        PaneBox[
         TagBox[GridBox[{
            {
             TagBox[
              DynamicModuleBox[{Typeset`var$$ = False}, 
               InterpretationBox[
                StyleBox[
                 PaneSelectorBox[{False->GridBox[{
                    {
                    OpenerBox[Dynamic[Typeset`var$$],
                    Appearance->Automatic,
                    AutoAction->False,
                    ContinuousAction->False,
                    Enabled->Automatic], 
                    
                    StyleBox["\<\"Knowledge used in computation\"\>", 
                    "CIContent",
                    StripOnInput->False]}
                   },
                   AutoDelete->False,
                   BaselinePosition->{1, 1},
                   GridBoxAlignment->{"Columns" -> {{Left}}},
                   GridBoxBackground->{"Columns" -> {{Automatic}}},
                   
                   GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
                   
                   GridBoxSpacings->{
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}], True->
                  GridBox[{
                    {
                    OpenerBox[Dynamic[Typeset`var$$],
                    Appearance->Automatic,
                    AutoAction->False,
                    ContinuousAction->False,
                    Enabled->Automatic], 
                    
                    StyleBox["\<\"Knowledge used in computation\"\>", 
                    "CIContent",
                    StripOnInput->False]},
                    {"", 
                    PaneBox[
                    StyleBox[
                    RowBox[{"{", "}"}], "CIContent",
                    StripOnInput->False],
                    ImageMargins->0]}
                   },
                   AutoDelete->False,
                   BaselinePosition->{1, 1},
                   GridBoxAlignment->{"Columns" -> {{Left}}},
                   GridBoxBackground->{"Columns" -> {{Automatic}}},
                   
                   GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
                   
                   GridBoxSpacings->{
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}]}, Dynamic[
                  Typeset`var$$],
                  Alignment->Automatic,
                  BaselinePosition->Baseline,
                  DefaultBaseStyle->"OpenerView",
                  ImageMargins->0,
                  ImageSize->Automatic],
                 Deployed->False,
                 StripOnInput->False],
                OpenerView[{
                  Style["Knowledge used in computation", "CIContent"], 
                  Style[{}, "CIContent"]}, False]],
               DynamicModuleValues:>Automatic],
              Setting[#, {0}]& ]},
            {
             TagBox[
              DynamicModuleBox[{Typeset`var$$ = False}, 
               InterpretationBox[
                StyleBox[
                 PaneSelectorBox[{False->GridBox[{
                    {
                    OpenerBox[Dynamic[Typeset`var$$],
                    Appearance->Automatic,
                    AutoAction->False,
                    ContinuousAction->False,
                    Enabled->Automatic], 
                    
                    StyleBox["\<\"Builtins used in computation\"\>", 
                    "CIContent",
                    StripOnInput->False]}
                   },
                   AutoDelete->False,
                   BaselinePosition->{1, 1},
                   GridBoxAlignment->{"Columns" -> {{Left}}},
                   GridBoxBackground->{"Columns" -> {{Automatic}}},
                   
                   GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
                   
                   GridBoxSpacings->{
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}], True->
                  GridBox[{
                    {
                    OpenerBox[Dynamic[Typeset`var$$],
                    Appearance->Automatic,
                    AutoAction->False,
                    ContinuousAction->False,
                    Enabled->Automatic], 
                    
                    StyleBox["\<\"Builtins used in computation\"\>", 
                    "CIContent",
                    StripOnInput->False]},
                    {"", 
                    PaneBox[
                    StyleBox[
                    RowBox[{"{", 
                    
                    RowBox[{"\<\"AbsValue\"\>", ",", "\<\"And\"\>", 
                    ",", "\<\"Append\"\>", ",", "\<\"Cardinality\"\>", 
                    ",", "\<\"CartesianProduct\"\>", 
                    ",", "\<\"CaseDistinction\"\>", ",", "\<\"Delete\"\>", 
                    ",", "\<\"DeleteAt\"\>", ",", "\<\"Difference\"\>", 
                    ",", "\<\"Divide\"\>", ",", "\<\"Do\"\>", 
                    ",", "\<\"Exists\"\>", ",", "\<\"For\"\>", 
                    ",", "\<\"Forall\"\>", ",", "\<\"Greater\"\>", 
                    ",", "\<\"GreaterEqual\"\>", ",", "\<\"Iff\"\>", 
                    ",", "\<\"Implies\"\>", ",", "\<\"Insert\"\>", 
                    ",", "\<\"IntegerQR\"\>", ",", "\<\"IntegerRange\"\>", 
                    ",", "\<\"Intersection\"\>", ",", "\<\"isComplex\"\>", 
                    ",", "\<\"isComplexP\"\>", ",", "\<\"IsElement\"\>", 
                    ",", "\<\"isInteger\"\>", ",", "\<\"isRational\"\>", 
                    ",", "\<\"isReal\"\>", ",", "\<\"isSet\"\>", 
                    ",", "\<\"isTuple\"\>", ",", "\<\"Join\"\>", 
                    ",", "\<\"Length\"\>", ",", "\<\"Less\"\>", 
                    ",", "\<\"LessEqual\"\>", ",", "\<\"Let\"\>", 
                    ",", "\<\"Max\"\>", ",", "\<\"MaximumElementSet\"\>", 
                    ",", "\<\"Min\"\>", ",", "\<\"MinimumElementSet\"\>", 
                    ",", "\<\"Module\"\>", ",", "\<\"Not\"\>", 
                    ",", "\<\"Or\"\>", ",", "\<\"Plus\"\>", 
                    ",", "\<\"Power\"\>", ",", "\<\"PowerSet\"\>", 
                    ",", "\<\"Prepend\"\>", ",", "\<\"ProductOf\"\>", 
                    ",", "\<\"Radical\"\>", ",", "\<\"RationalRange\"\>", 
                    ",", "\<\"RealRange\"\>", ",", "\<\"Replace\"\>", 
                    ",", "\<\"ReplacePart\"\>", ",", "\<\"SetEqual\"\>", 
                    ",", "\<\"Subscript\"\>", ",", "\<\"Subset\"\>", 
                    ",", "\<\"SubsetEqual\"\>", ",", "\<\"Subtract\"\>", 
                    ",", "\<\"SumOf\"\>", ",", "\<\"Superset\"\>", 
                    ",", "\<\"SupersetEqual\"\>", ",", "\<\"Switch\"\>", 
                    ",", "\<\"SymmetricDifference\"\>", ",", "\<\"Times\"\>", 
                    ",", "\<\"TupleEqual\"\>", ",", "\<\"Union\"\>", 
                    ",", "\<\"Which\"\>", ",", "\<\"While\"\>", 
                    ",", "\<\"\[DoubleStruckCapitalC]\"\>", 
                    ",", "\<\"\[DoubleStruckCapitalC]P\"\>"}], "}"}], 
                    "CIContent",
                    StripOnInput->False],
                    ImageMargins->0]}
                   },
                   AutoDelete->False,
                   BaselinePosition->{1, 1},
                   GridBoxAlignment->{"Columns" -> {{Left}}},
                   GridBoxBackground->{"Columns" -> {{Automatic}}},
                   
                   GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
                   
                   GridBoxSpacings->{
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}]}, Dynamic[
                  Typeset`var$$],
                  Alignment->Automatic,
                  BaselinePosition->Baseline,
                  DefaultBaseStyle->"OpenerView",
                  ImageMargins->0,
                  ImageSize->Automatic],
                 Deployed->False,
                 StripOnInput->False],
                OpenerView[{
                  Style["Builtins used in computation", "CIContent"], 
                  
                  Style[{"AbsValue", "And", "Append", "Cardinality", 
                    "CartesianProduct", "CaseDistinction", "Delete", 
                    "DeleteAt", "Difference", "Divide", "Do", "Exists", "For",
                     "Forall", "Greater", "GreaterEqual", "Iff", "Implies", 
                    "Insert", "IntegerQR", "IntegerRange", "Intersection", 
                    "isComplex", "isComplexP", "IsElement", "isInteger", 
                    "isRational", "isReal", "isSet", "isTuple", "Join", 
                    "Length", "Less", "LessEqual", "Let", "Max", 
                    "MaximumElementSet", "Min", "MinimumElementSet", "Module",
                     "Not", "Or", "Plus", "Power", "PowerSet", "Prepend", 
                    "ProductOf", "Radical", "RationalRange", "RealRange", 
                    "Replace", "ReplacePart", "SetEqual", "Subscript", 
                    "Subset", "SubsetEqual", "Subtract", "SumOf", "Superset", 
                    "SupersetEqual", "Switch", "SymmetricDifference", "Times",
                     "TupleEqual", "Union", "Which", "While", 
                    "\[DoubleStruckCapitalC]", "\[DoubleStruckCapitalC]P"}, 
                   "CIContent"]}, False]],
               DynamicModuleValues:>Automatic],
              Setting[#, {0}]& ]},
            {
             ButtonBox["\<\"Restore environment\"\>",
              Appearance->Automatic,
              
              ButtonFunction:>
               Theorema`Interface`GUI`Private`setCompEnv[{}, {{
                 "AbsValue", True}, {"And", True}, {"Append", True}, {
                 "Cardinality", True}, {"CartesianProduct", True}, {
                 "CaseDistinction", True}, {"Delete", True}, {
                 "DeleteAt", True}, {"Difference", True}, {"Divide", True}, {
                 "Do", True}, {"Equal", False}, {"Exists", True}, {
                 "For", True}, {"Forall", True}, {"Greater", True}, {
                 "GreaterEqual", True}, {"Iff", True}, {"Implies", True}, {
                 "Insert", True}, {"IntegerQR", True}, {
                 "IntegerRange", True}, {"Intersection", True}, {
                 "isComplex", True}, {"isComplexP", True}, {
                 "IsElement", True}, {"isInteger", True}, {
                 "isRational", True}, {"isReal", True}, {"isSet", True}, {
                 "isTuple", True}, {"Join", True}, {"Length", True}, {
                 "Less", True}, {"LessEqual", True}, {"Let", True}, {
                 "Max", True}, {"MaximumElementSet", True}, {"Min", True}, {
                 "MinimumElementSet", True}, {"Module", True}, {
                 "Not", True}, {"Or", True}, {"Plus", True}, {
                 "Power", True}, {"PowerSet", True}, {"Prepend", True}, {
                 "ProductOf", True}, {"Radical", True}, {
                 "RationalRange", True}, {"RealRange", True}, {
                 "Replace", True}, {"ReplacePart", True}, {
                 "SetEqual", True}, {"Subscript", True}, {"Subset", True}, {
                 "SubsetEqual", True}, {"Subtract", True}, {"SumOf", True}, {
                 "Superset", True}, {"SupersetEqual", True}, {
                 "Switch", True}, {"SymmetricDifference", True}, {
                 "Times", True}, {"TupleEqual", True}, {"Union", True}, {
                 "Which", True}, {"While", True}, {
                 "\[DoubleStruckCapitalC]", True}, {
                 "\[DoubleStruckCapitalC]P", True}}],
              Evaluator->Automatic,
              ImageSize->Automatic,
              Method->"Preemptive"]}
           },
           DefaultBaseStyle->"Column",
           GridBoxAlignment->{"Columns" -> {{Left}}},
           
           GridBoxItemSize->{
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
          "Column"],
         ImageMargins->0]}
      },
      AutoDelete->False,
      BaselinePosition->{1, 1},
      GridBoxAlignment->{"Columns" -> {{Left}}},
      GridBoxBackground->{"Columns" -> {{Automatic}}},
      GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
      GridBoxSpacings->{"Columns" -> {{0.2}}, "Rows" -> {{0.5}}}]}, Dynamic[
     Typeset`var$$],
     Alignment->Automatic,
     BaselinePosition->Baseline,
     DefaultBaseStyle->"OpenerView",
     ImageMargins->0,
     ImageSize->Automatic],
    Deployed->False,
    StripOnInput->False],
   OpenerView[{"", 
     Column[{
       OpenerView[{
         Style["Knowledge used in computation", "CIContent"], 
         Style[{}, "CIContent"]}], 
       OpenerView[{
         Style["Builtins used in computation", "CIContent"], 
         Style[{
          "AbsValue", "And", "Append", "Cardinality", "CartesianProduct", 
           "CaseDistinction", "Delete", "DeleteAt", "Difference", "Divide", 
           "Do", "Exists", "For", "Forall", "Greater", "GreaterEqual", "Iff", 
           "Implies", "Insert", "IntegerQR", "IntegerRange", "Intersection", 
           "isComplex", "isComplexP", "IsElement", "isInteger", "isRational", 
           "isReal", "isSet", "isTuple", "Join", "Length", "Less", 
           "LessEqual", "Let", "Max", "MaximumElementSet", "Min", 
           "MinimumElementSet", "Module", "Not", "Or", "Plus", "Power", 
           "PowerSet", "Prepend", "ProductOf", "Radical", "RationalRange", 
           "RealRange", "Replace", "ReplacePart", "SetEqual", "Subscript", 
           "Subset", "SubsetEqual", "Subtract", "SumOf", "Superset", 
           "SupersetEqual", "Switch", "SymmetricDifference", "Times", 
           "TupleEqual", "Union", "Which", "While", "\[DoubleStruckCapitalC]",
            "\[DoubleStruckCapitalC]P"}, "CIContent"]}], 
       Button["Restore environment", 
        Theorema`Interface`GUI`Private`setCompEnv[{}, {{"AbsValue", True}, {
          "And", True}, {"Append", True}, {"Cardinality", True}, {
          "CartesianProduct", True}, {"CaseDistinction", True}, {
          "Delete", True}, {"DeleteAt", True}, {"Difference", True}, {
          "Divide", True}, {"Do", True}, {"Equal", False}, {"Exists", True}, {
          "For", True}, {"Forall", True}, {"Greater", True}, {
          "GreaterEqual", True}, {"Iff", True}, {"Implies", True}, {
          "Insert", True}, {"IntegerQR", True}, {"IntegerRange", True}, {
          "Intersection", True}, {"isComplex", True}, {"isComplexP", True}, {
          "IsElement", True}, {"isInteger", True}, {"isRational", True}, {
          "isReal", True}, {"isSet", True}, {"isTuple", True}, {
          "Join", True}, {"Length", True}, {"Less", True}, {
          "LessEqual", True}, {"Let", True}, {"Max", True}, {
          "MaximumElementSet", True}, {"Min", True}, {
          "MinimumElementSet", True}, {"Module", True}, {"Not", True}, {
          "Or", True}, {"Plus", True}, {"Power", True}, {"PowerSet", True}, {
          "Prepend", True}, {"ProductOf", True}, {"Radical", True}, {
          "RationalRange", True}, {"RealRange", True}, {"Replace", True}, {
          "ReplacePart", True}, {"SetEqual", True}, {"Subscript", True}, {
          "Subset", True}, {"SubsetEqual", True}, {"Subtract", True}, {
          "SumOf", True}, {"Superset", True}, {"SupersetEqual", True}, {
          "Switch", True}, {"SymmetricDifference", True}, {"Times", True}, {
          "TupleEqual", True}, {"Union", True}, {"Which", True}, {
          "While", True}, {"\[DoubleStruckCapitalC]", True}, {
          "\[DoubleStruckCapitalC]P", True}}], ImageSize -> Automatic]}]}, 
    False]],
  DynamicModuleValues:>{}]], "ComputationInfo",
 CellChangeTimes->{3.59323870672352*^9},
 CellID->1118984722],

Cell[BoxData[
 FormBox[
  RowBox[{
   UnderscriptBox[
    SubscriptBox["+", "x"], "D"], "[", 
   RowBox[{"a", ",", "b", ",", "c"}], "]"}], 
  TheoremaForm]], "ComputationResult",
 CellChangeTimes->{{3.593238688403472*^9, 3.593238706732783*^9}},
 CellID->211267502]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"\[LeftAngleBracket]", 
  UnderscriptBox["+", "D"], "\[RightAngleBracket]"}]], "Computation",
 CellChangeTimes->{{3.594014413461523*^9, 3.594014427128718*^9}},
 CellID->738819620],

Cell[BoxData[
 DynamicModuleBox[{Typeset`var$$ = False}, 
  InterpretationBox[
   StyleBox[
    PaneSelectorBox[{False->GridBox[{
       {
        OpenerBox[Dynamic[Typeset`var$$],
         Appearance->Automatic,
         AutoAction->False,
         ContinuousAction->False,
         Enabled->Automatic], "\<\"\"\>"}
      },
      AutoDelete->False,
      BaselinePosition->{1, 1},
      GridBoxAlignment->{"Columns" -> {{Left}}},
      GridBoxBackground->{"Columns" -> {{Automatic}}},
      GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
      GridBoxSpacings->{"Columns" -> {{0.2}}, "Rows" -> {{0.5}}}], True->
     GridBox[{
       {
        OpenerBox[Dynamic[Typeset`var$$],
         Appearance->Automatic,
         AutoAction->False,
         ContinuousAction->False,
         Enabled->Automatic], "\<\"\"\>"},
       {"", 
        PaneBox[
         TagBox[GridBox[{
            {
             TagBox[
              DynamicModuleBox[{Typeset`var$$ = False}, 
               InterpretationBox[
                StyleBox[
                 PaneSelectorBox[{False->GridBox[{
                    {
                    OpenerBox[Dynamic[Typeset`var$$],
                    Appearance->Automatic,
                    AutoAction->False,
                    ContinuousAction->False,
                    Enabled->Automatic], 
                    
                    StyleBox["\<\"Knowledge used in computation\"\>", 
                    "CIContent",
                    StripOnInput->False]}
                   },
                   AutoDelete->False,
                   BaselinePosition->{1, 1},
                   GridBoxAlignment->{"Columns" -> {{Left}}},
                   GridBoxBackground->{"Columns" -> {{Automatic}}},
                   
                   GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
                   
                   GridBoxSpacings->{
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}], True->
                  GridBox[{
                    {
                    OpenerBox[Dynamic[Typeset`var$$],
                    Appearance->Automatic,
                    AutoAction->False,
                    ContinuousAction->False,
                    Enabled->Automatic], 
                    
                    StyleBox["\<\"Knowledge used in computation\"\>", 
                    "CIContent",
                    StripOnInput->False]},
                    {"", 
                    PaneBox[
                    StyleBox[
                    RowBox[{"{", "}"}], "CIContent",
                    StripOnInput->False],
                    ImageMargins->0]}
                   },
                   AutoDelete->False,
                   BaselinePosition->{1, 1},
                   GridBoxAlignment->{"Columns" -> {{Left}}},
                   GridBoxBackground->{"Columns" -> {{Automatic}}},
                   
                   GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
                   
                   GridBoxSpacings->{
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}]}, Dynamic[
                  Typeset`var$$],
                  Alignment->Automatic,
                  BaselinePosition->Baseline,
                  DefaultBaseStyle->"OpenerView",
                  ImageMargins->0,
                  ImageSize->Automatic],
                 Deployed->False,
                 StripOnInput->False],
                OpenerView[{
                  Style["Knowledge used in computation", "CIContent"], 
                  Style[{}, "CIContent"]}, False]],
               DynamicModuleValues:>Automatic],
              Setting[#, {0}]& ]},
            {
             TagBox[
              DynamicModuleBox[{Typeset`var$$ = False}, 
               InterpretationBox[
                StyleBox[
                 PaneSelectorBox[{False->GridBox[{
                    {
                    OpenerBox[Dynamic[Typeset`var$$],
                    Appearance->Automatic,
                    AutoAction->False,
                    ContinuousAction->False,
                    Enabled->Automatic], 
                    
                    StyleBox["\<\"Builtins used in computation\"\>", 
                    "CIContent",
                    StripOnInput->False]}
                   },
                   AutoDelete->False,
                   BaselinePosition->{1, 1},
                   GridBoxAlignment->{"Columns" -> {{Left}}},
                   GridBoxBackground->{"Columns" -> {{Automatic}}},
                   
                   GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
                   
                   GridBoxSpacings->{
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}], True->
                  GridBox[{
                    {
                    OpenerBox[Dynamic[Typeset`var$$],
                    Appearance->Automatic,
                    AutoAction->False,
                    ContinuousAction->False,
                    Enabled->Automatic], 
                    
                    StyleBox["\<\"Builtins used in computation\"\>", 
                    "CIContent",
                    StripOnInput->False]},
                    {"", 
                    PaneBox[
                    StyleBox[
                    RowBox[{"{", 
                    
                    RowBox[{"\<\"AbsValue\"\>", ",", "\<\"And\"\>", 
                    ",", "\<\"Append\"\>", ",", "\<\"Cardinality\"\>", 
                    ",", "\<\"CartesianProduct\"\>", 
                    ",", "\<\"CaseDistinction\"\>", ",", "\<\"Delete\"\>", 
                    ",", "\<\"DeleteAt\"\>", ",", "\<\"Difference\"\>", 
                    ",", "\<\"Do\"\>", ",", "\<\"Exists\"\>", 
                    ",", "\<\"For\"\>", ",", "\<\"Forall\"\>", 
                    ",", "\<\"Greater\"\>", ",", "\<\"GreaterEqual\"\>", 
                    ",", "\<\"Iff\"\>", ",", "\<\"Implies\"\>", 
                    ",", "\<\"Insert\"\>", ",", "\<\"IntegerInterval\"\>", 
                    ",", "\<\"IntegerQuotientRing\"\>", 
                    ",", "\<\"IntegerQuotientRingPM\"\>", 
                    ",", "\<\"Intersection\"\>", ",", "\<\"isComplex\"\>", 
                    ",", "\<\"isComplexP\"\>", ",", "\<\"IsElement\"\>", 
                    ",", "\<\"isInteger\"\>", ",", "\<\"isRational\"\>", 
                    ",", "\<\"isReal\"\>", ",", "\<\"isSet\"\>", 
                    ",", "\<\"isTuple\"\>", ",", "\<\"Join\"\>", 
                    ",", "\<\"Length\"\>", ",", "\<\"Less\"\>", 
                    ",", "\<\"LessEqual\"\>", ",", "\<\"Let\"\>", 
                    ",", "\<\"Max\"\>", ",", "\<\"MaximumElementSet\"\>", 
                    ",", "\<\"Min\"\>", ",", "\<\"MinimumElementSet\"\>", 
                    ",", "\<\"Minus\"\>", ",", "\<\"Module\"\>", 
                    ",", "\<\"MultInverse\"\>", ",", "\<\"Not\"\>", 
                    ",", "\<\"Or\"\>", ",", "\<\"Plus\"\>", 
                    ",", "\<\"Power\"\>", ",", "\<\"PowerSet\"\>", 
                    ",", "\<\"Prepend\"\>", ",", "\<\"ProductOf\"\>", 
                    ",", "\<\"Radical\"\>", ",", "\<\"RationalInterval\"\>", 
                    ",", "\<\"RealInterval\"\>", ",", "\<\"Replace\"\>", 
                    ",", "\<\"ReplacePart\"\>", ",", "\<\"SetEqual\"\>", 
                    ",", "\<\"Subscript\"\>", ",", "\<\"Subset\"\>", 
                    ",", "\<\"SubsetEqual\"\>", ",", "\<\"SumOf\"\>", 
                    ",", "\<\"Superset\"\>", ",", "\<\"SupersetEqual\"\>", 
                    ",", "\<\"Switch\"\>", ",", "\<\"SymmetricDifference\"\>",
                     ",", "\<\"Times\"\>", ",", "\<\"TupleEqual\"\>", 
                    ",", "\<\"Union\"\>", ",", "\<\"Which\"\>", 
                    ",", "\<\"While\"\>", 
                    ",", "\<\"\[DoubleStruckCapitalC]\"\>", 
                    ",", "\<\"\[DoubleStruckCapitalC]P\"\>"}], "}"}], 
                    "CIContent",
                    StripOnInput->False],
                    ImageMargins->0]}
                   },
                   AutoDelete->False,
                   BaselinePosition->{1, 1},
                   GridBoxAlignment->{"Columns" -> {{Left}}},
                   GridBoxBackground->{"Columns" -> {{Automatic}}},
                   
                   GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
                   
                   GridBoxSpacings->{
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}]}, Dynamic[
                  Typeset`var$$],
                  Alignment->Automatic,
                  BaselinePosition->Baseline,
                  DefaultBaseStyle->"OpenerView",
                  ImageMargins->0,
                  ImageSize->Automatic],
                 Deployed->False,
                 StripOnInput->False],
                OpenerView[{
                  Style["Builtins used in computation", "CIContent"], 
                  
                  Style[{"AbsValue", "And", "Append", "Cardinality", 
                    "CartesianProduct", "CaseDistinction", "Delete", 
                    "DeleteAt", "Difference", "Do", "Exists", "For", "Forall",
                     "Greater", "GreaterEqual", "Iff", "Implies", "Insert", 
                    "IntegerInterval", "IntegerQuotientRing", 
                    "IntegerQuotientRingPM", "Intersection", "isComplex", 
                    "isComplexP", "IsElement", "isInteger", "isRational", 
                    "isReal", "isSet", "isTuple", "Join", "Length", "Less", 
                    "LessEqual", "Let", "Max", "MaximumElementSet", "Min", 
                    "MinimumElementSet", "Minus", "Module", "MultInverse", 
                    "Not", "Or", "Plus", "Power", "PowerSet", "Prepend", 
                    "ProductOf", "Radical", "RationalInterval", 
                    "RealInterval", "Replace", "ReplacePart", "SetEqual", 
                    "Subscript", "Subset", "SubsetEqual", "SumOf", "Superset",
                     "SupersetEqual", "Switch", "SymmetricDifference", 
                    "Times", "TupleEqual", "Union", "Which", "While", 
                    "\[DoubleStruckCapitalC]", "\[DoubleStruckCapitalC]P"}, 
                   "CIContent"]}, False]],
               DynamicModuleValues:>Automatic],
              Setting[#, {0}]& ]},
            {
             ButtonBox["\<\"Restore environment\"\>",
              Appearance->Automatic,
              
              ButtonFunction:>
               Theorema`Interface`GUI`Private`setCompEnv[{}, {{
                 "AbsValue", True}, {"And", True}, {"Append", True}, {
                 "Cardinality", True}, {"CartesianProduct", True}, {
                 "CaseDistinction", True}, {"Delete", True}, {
                 "DeleteAt", True}, {"Difference", True}, {"Do", True}, {
                 "Equal", False}, {"Exists", True}, {"For", True}, {
                 "Forall", True}, {"Greater", True}, {"GreaterEqual", True}, {
                 "Iff", True}, {"Implies", True}, {"Insert", True}, {
                 "IntegerInterval", True}, {"IntegerQuotientRing", True}, {
                 "IntegerQuotientRingPM", True}, {"Intersection", True}, {
                 "isComplex", True}, {"isComplexP", True}, {
                 "IsElement", True}, {"isInteger", True}, {
                 "isRational", True}, {"isReal", True}, {"isSet", True}, {
                 "isTuple", True}, {"Join", True}, {"Length", True}, {
                 "Less", True}, {"LessEqual", True}, {"Let", True}, {
                 "Max", True}, {"MaximumElementSet", True}, {"Min", True}, {
                 "MinimumElementSet", True}, {"Minus", True}, {
                 "Module", True}, {"MultInverse", True}, {"Not", True}, {
                 "Or", True}, {"Plus", True}, {"Power", True}, {
                 "PowerSet", True}, {"Prepend", True}, {"ProductOf", True}, {
                 "Radical", True}, {"RationalInterval", True}, {
                 "RealInterval", True}, {"Replace", True}, {
                 "ReplacePart", True}, {"SetEqual", True}, {
                 "Subscript", True}, {"Subset", True}, {
                 "SubsetEqual", True}, {"SumOf", True}, {"Superset", True}, {
                 "SupersetEqual", True}, {"Switch", True}, {
                 "SymmetricDifference", True}, {"Times", True}, {
                 "TupleEqual", True}, {"Union", True}, {"Which", True}, {
                 "While", True}, {"\[DoubleStruckCapitalC]", True}, {
                 "\[DoubleStruckCapitalC]P", True}}],
              Evaluator->Automatic,
              ImageSize->Automatic,
              Method->"Preemptive"]}
           },
           DefaultBaseStyle->"Column",
           GridBoxAlignment->{"Columns" -> {{Left}}},
           
           GridBoxItemSize->{
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
          "Column"],
         ImageMargins->0]}
      },
      AutoDelete->False,
      BaselinePosition->{1, 1},
      GridBoxAlignment->{"Columns" -> {{Left}}},
      GridBoxBackground->{"Columns" -> {{Automatic}}},
      GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
      GridBoxSpacings->{"Columns" -> {{0.2}}, "Rows" -> {{0.5}}}]}, Dynamic[
     Typeset`var$$],
     Alignment->Automatic,
     BaselinePosition->Baseline,
     DefaultBaseStyle->"OpenerView",
     ImageMargins->0,
     ImageSize->Automatic],
    Deployed->False,
    StripOnInput->False],
   OpenerView[{"", 
     Column[{
       OpenerView[{
         Style["Knowledge used in computation", "CIContent"], 
         Style[{}, "CIContent"]}], 
       OpenerView[{
         Style["Builtins used in computation", "CIContent"], 
         Style[{
          "AbsValue", "And", "Append", "Cardinality", "CartesianProduct", 
           "CaseDistinction", "Delete", "DeleteAt", "Difference", "Do", 
           "Exists", "For", "Forall", "Greater", "GreaterEqual", "Iff", 
           "Implies", "Insert", "IntegerInterval", "IntegerQuotientRing", 
           "IntegerQuotientRingPM", "Intersection", "isComplex", "isComplexP",
            "IsElement", "isInteger", "isRational", "isReal", "isSet", 
           "isTuple", "Join", "Length", "Less", "LessEqual", "Let", "Max", 
           "MaximumElementSet", "Min", "MinimumElementSet", "Minus", "Module",
            "MultInverse", "Not", "Or", "Plus", "Power", "PowerSet", 
           "Prepend", "ProductOf", "Radical", "RationalInterval", 
           "RealInterval", "Replace", "ReplacePart", "SetEqual", "Subscript", 
           "Subset", "SubsetEqual", "SumOf", "Superset", "SupersetEqual", 
           "Switch", "SymmetricDifference", "Times", "TupleEqual", "Union", 
           "Which", "While", "\[DoubleStruckCapitalC]", 
           "\[DoubleStruckCapitalC]P"}, "CIContent"]}], 
       Button["Restore environment", 
        Theorema`Interface`GUI`Private`setCompEnv[{}, {{"AbsValue", True}, {
          "And", True}, {"Append", True}, {"Cardinality", True}, {
          "CartesianProduct", True}, {"CaseDistinction", True}, {
          "Delete", True}, {"DeleteAt", True}, {"Difference", True}, {
          "Do", True}, {"Equal", False}, {"Exists", True}, {"For", True}, {
          "Forall", True}, {"Greater", True}, {"GreaterEqual", True}, {
          "Iff", True}, {"Implies", True}, {"Insert", True}, {
          "IntegerInterval", True}, {"IntegerQuotientRing", True}, {
          "IntegerQuotientRingPM", True}, {"Intersection", True}, {
          "isComplex", True}, {"isComplexP", True}, {"IsElement", True}, {
          "isInteger", True}, {"isRational", True}, {"isReal", True}, {
          "isSet", True}, {"isTuple", True}, {"Join", True}, {
          "Length", True}, {"Less", True}, {"LessEqual", True}, {
          "Let", True}, {"Max", True}, {"MaximumElementSet", True}, {
          "Min", True}, {"MinimumElementSet", True}, {"Minus", True}, {
          "Module", True}, {"MultInverse", True}, {"Not", True}, {
          "Or", True}, {"Plus", True}, {"Power", True}, {"PowerSet", True}, {
          "Prepend", True}, {"ProductOf", True}, {"Radical", True}, {
          "RationalInterval", True}, {"RealInterval", True}, {
          "Replace", True}, {"ReplacePart", True}, {"SetEqual", True}, {
          "Subscript", True}, {"Subset", True}, {"SubsetEqual", True}, {
          "SumOf", True}, {"Superset", True}, {"SupersetEqual", True}, {
          "Switch", True}, {"SymmetricDifference", True}, {"Times", True}, {
          "TupleEqual", True}, {"Union", True}, {"Which", True}, {
          "While", True}, {"\[DoubleStruckCapitalC]", True}, {
          "\[DoubleStruckCapitalC]P", True}}], ImageSize -> Automatic]}]}, 
    False]],
  DynamicModuleValues:>{}]], "ComputationInfo",
 CellChangeTimes->{3.594014427886884*^9},
 CellID->1634809851],

Cell[BoxData[
 FormBox[
  RowBox[{"\[LeftAngleBracket]", 
   RowBox[{
    TagBox["(",
     "AutoParentheses"], 
    UnderscriptBox["+", "D"], 
    TagBox[")",
     "AutoParentheses"]}], "\[RightAngleBracket]"}], 
  TheoremaForm]], "ComputationResult",
 CellChangeTimes->{{3.594014418786341*^9, 3.594014427895388*^9}},
 CellID->1919213652]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"{", "\[SmallCircle]", "}"}]], "Computation",
 CellChangeTimes->{{3.594014435745067*^9, 3.594014439029255*^9}},
 CellID->785212987],

Cell[BoxData[
 DynamicModuleBox[{Typeset`var$$ = False}, 
  InterpretationBox[
   StyleBox[
    PaneSelectorBox[{False->GridBox[{
       {
        OpenerBox[Dynamic[Typeset`var$$],
         Appearance->Automatic,
         AutoAction->False,
         ContinuousAction->False,
         Enabled->Automatic], "\<\"\"\>"}
      },
      AutoDelete->False,
      BaselinePosition->{1, 1},
      GridBoxAlignment->{"Columns" -> {{Left}}},
      GridBoxBackground->{"Columns" -> {{Automatic}}},
      GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
      GridBoxSpacings->{"Columns" -> {{0.2}}, "Rows" -> {{0.5}}}], True->
     GridBox[{
       {
        OpenerBox[Dynamic[Typeset`var$$],
         Appearance->Automatic,
         AutoAction->False,
         ContinuousAction->False,
         Enabled->Automatic], "\<\"\"\>"},
       {"", 
        PaneBox[
         TagBox[GridBox[{
            {
             TagBox[
              DynamicModuleBox[{Typeset`var$$ = False}, 
               InterpretationBox[
                StyleBox[
                 PaneSelectorBox[{False->GridBox[{
                    {
                    OpenerBox[Dynamic[Typeset`var$$],
                    Appearance->Automatic,
                    AutoAction->False,
                    ContinuousAction->False,
                    Enabled->Automatic], 
                    
                    StyleBox["\<\"Knowledge used in computation\"\>", 
                    "CIContent",
                    StripOnInput->False]}
                   },
                   AutoDelete->False,
                   BaselinePosition->{1, 1},
                   GridBoxAlignment->{"Columns" -> {{Left}}},
                   GridBoxBackground->{"Columns" -> {{Automatic}}},
                   
                   GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
                   
                   GridBoxSpacings->{
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}], True->
                  GridBox[{
                    {
                    OpenerBox[Dynamic[Typeset`var$$],
                    Appearance->Automatic,
                    AutoAction->False,
                    ContinuousAction->False,
                    Enabled->Automatic], 
                    
                    StyleBox["\<\"Knowledge used in computation\"\>", 
                    "CIContent",
                    StripOnInput->False]},
                    {"", 
                    PaneBox[
                    StyleBox[
                    RowBox[{"{", "}"}], "CIContent",
                    StripOnInput->False],
                    ImageMargins->0]}
                   },
                   AutoDelete->False,
                   BaselinePosition->{1, 1},
                   GridBoxAlignment->{"Columns" -> {{Left}}},
                   GridBoxBackground->{"Columns" -> {{Automatic}}},
                   
                   GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
                   
                   GridBoxSpacings->{
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}]}, Dynamic[
                  Typeset`var$$],
                  Alignment->Automatic,
                  BaselinePosition->Baseline,
                  DefaultBaseStyle->"OpenerView",
                  ImageMargins->0,
                  ImageSize->Automatic],
                 Deployed->False,
                 StripOnInput->False],
                OpenerView[{
                  Style["Knowledge used in computation", "CIContent"], 
                  Style[{}, "CIContent"]}, False]],
               DynamicModuleValues:>Automatic],
              Setting[#, {0}]& ]},
            {
             TagBox[
              DynamicModuleBox[{Typeset`var$$ = False}, 
               InterpretationBox[
                StyleBox[
                 PaneSelectorBox[{False->GridBox[{
                    {
                    OpenerBox[Dynamic[Typeset`var$$],
                    Appearance->Automatic,
                    AutoAction->False,
                    ContinuousAction->False,
                    Enabled->Automatic], 
                    
                    StyleBox["\<\"Builtins used in computation\"\>", 
                    "CIContent",
                    StripOnInput->False]}
                   },
                   AutoDelete->False,
                   BaselinePosition->{1, 1},
                   GridBoxAlignment->{"Columns" -> {{Left}}},
                   GridBoxBackground->{"Columns" -> {{Automatic}}},
                   
                   GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
                   
                   GridBoxSpacings->{
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}], True->
                  GridBox[{
                    {
                    OpenerBox[Dynamic[Typeset`var$$],
                    Appearance->Automatic,
                    AutoAction->False,
                    ContinuousAction->False,
                    Enabled->Automatic], 
                    
                    StyleBox["\<\"Builtins used in computation\"\>", 
                    "CIContent",
                    StripOnInput->False]},
                    {"", 
                    PaneBox[
                    StyleBox[
                    RowBox[{"{", 
                    
                    RowBox[{"\<\"AbsValue\"\>", ",", "\<\"And\"\>", 
                    ",", "\<\"Append\"\>", ",", "\<\"Cardinality\"\>", 
                    ",", "\<\"CartesianProduct\"\>", 
                    ",", "\<\"CaseDistinction\"\>", ",", "\<\"Delete\"\>", 
                    ",", "\<\"DeleteAt\"\>", ",", "\<\"Difference\"\>", 
                    ",", "\<\"Do\"\>", ",", "\<\"Exists\"\>", 
                    ",", "\<\"For\"\>", ",", "\<\"Forall\"\>", 
                    ",", "\<\"Greater\"\>", ",", "\<\"GreaterEqual\"\>", 
                    ",", "\<\"Iff\"\>", ",", "\<\"Implies\"\>", 
                    ",", "\<\"Insert\"\>", ",", "\<\"IntegerInterval\"\>", 
                    ",", "\<\"IntegerQuotientRing\"\>", 
                    ",", "\<\"IntegerQuotientRingPM\"\>", 
                    ",", "\<\"Intersection\"\>", ",", "\<\"isComplex\"\>", 
                    ",", "\<\"isComplexP\"\>", ",", "\<\"IsElement\"\>", 
                    ",", "\<\"isInteger\"\>", ",", "\<\"isRational\"\>", 
                    ",", "\<\"isReal\"\>", ",", "\<\"isSet\"\>", 
                    ",", "\<\"isTuple\"\>", ",", "\<\"Join\"\>", 
                    ",", "\<\"Length\"\>", ",", "\<\"Less\"\>", 
                    ",", "\<\"LessEqual\"\>", ",", "\<\"Let\"\>", 
                    ",", "\<\"Max\"\>", ",", "\<\"MaximumElementSet\"\>", 
                    ",", "\<\"Min\"\>", ",", "\<\"MinimumElementSet\"\>", 
                    ",", "\<\"Minus\"\>", ",", "\<\"Module\"\>", 
                    ",", "\<\"MultInverse\"\>", ",", "\<\"Not\"\>", 
                    ",", "\<\"Or\"\>", ",", "\<\"Plus\"\>", 
                    ",", "\<\"Power\"\>", ",", "\<\"PowerSet\"\>", 
                    ",", "\<\"Prepend\"\>", ",", "\<\"ProductOf\"\>", 
                    ",", "\<\"Radical\"\>", ",", "\<\"RationalInterval\"\>", 
                    ",", "\<\"RealInterval\"\>", ",", "\<\"Replace\"\>", 
                    ",", "\<\"ReplacePart\"\>", ",", "\<\"SetEqual\"\>", 
                    ",", "\<\"Subscript\"\>", ",", "\<\"Subset\"\>", 
                    ",", "\<\"SubsetEqual\"\>", ",", "\<\"SumOf\"\>", 
                    ",", "\<\"Superset\"\>", ",", "\<\"SupersetEqual\"\>", 
                    ",", "\<\"Switch\"\>", ",", "\<\"SymmetricDifference\"\>",
                     ",", "\<\"Times\"\>", ",", "\<\"TupleEqual\"\>", 
                    ",", "\<\"Union\"\>", ",", "\<\"Which\"\>", 
                    ",", "\<\"While\"\>", 
                    ",", "\<\"\[DoubleStruckCapitalC]\"\>", 
                    ",", "\<\"\[DoubleStruckCapitalC]P\"\>"}], "}"}], 
                    "CIContent",
                    StripOnInput->False],
                    ImageMargins->0]}
                   },
                   AutoDelete->False,
                   BaselinePosition->{1, 1},
                   GridBoxAlignment->{"Columns" -> {{Left}}},
                   GridBoxBackground->{"Columns" -> {{Automatic}}},
                   
                   GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
                   
                   GridBoxSpacings->{
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}]}, Dynamic[
                  Typeset`var$$],
                  Alignment->Automatic,
                  BaselinePosition->Baseline,
                  DefaultBaseStyle->"OpenerView",
                  ImageMargins->0,
                  ImageSize->Automatic],
                 Deployed->False,
                 StripOnInput->False],
                OpenerView[{
                  Style["Builtins used in computation", "CIContent"], 
                  
                  Style[{"AbsValue", "And", "Append", "Cardinality", 
                    "CartesianProduct", "CaseDistinction", "Delete", 
                    "DeleteAt", "Difference", "Do", "Exists", "For", "Forall",
                     "Greater", "GreaterEqual", "Iff", "Implies", "Insert", 
                    "IntegerInterval", "IntegerQuotientRing", 
                    "IntegerQuotientRingPM", "Intersection", "isComplex", 
                    "isComplexP", "IsElement", "isInteger", "isRational", 
                    "isReal", "isSet", "isTuple", "Join", "Length", "Less", 
                    "LessEqual", "Let", "Max", "MaximumElementSet", "Min", 
                    "MinimumElementSet", "Minus", "Module", "MultInverse", 
                    "Not", "Or", "Plus", "Power", "PowerSet", "Prepend", 
                    "ProductOf", "Radical", "RationalInterval", 
                    "RealInterval", "Replace", "ReplacePart", "SetEqual", 
                    "Subscript", "Subset", "SubsetEqual", "SumOf", "Superset",
                     "SupersetEqual", "Switch", "SymmetricDifference", 
                    "Times", "TupleEqual", "Union", "Which", "While", 
                    "\[DoubleStruckCapitalC]", "\[DoubleStruckCapitalC]P"}, 
                   "CIContent"]}, False]],
               DynamicModuleValues:>Automatic],
              Setting[#, {0}]& ]},
            {
             ButtonBox["\<\"Restore environment\"\>",
              Appearance->Automatic,
              
              ButtonFunction:>
               Theorema`Interface`GUI`Private`setCompEnv[{}, {{
                 "AbsValue", True}, {"And", True}, {"Append", True}, {
                 "Cardinality", True}, {"CartesianProduct", True}, {
                 "CaseDistinction", True}, {"Delete", True}, {
                 "DeleteAt", True}, {"Difference", True}, {"Do", True}, {
                 "Equal", False}, {"Exists", True}, {"For", True}, {
                 "Forall", True}, {"Greater", True}, {"GreaterEqual", True}, {
                 "Iff", True}, {"Implies", True}, {"Insert", True}, {
                 "IntegerInterval", True}, {"IntegerQuotientRing", True}, {
                 "IntegerQuotientRingPM", True}, {"Intersection", True}, {
                 "isComplex", True}, {"isComplexP", True}, {
                 "IsElement", True}, {"isInteger", True}, {
                 "isRational", True}, {"isReal", True}, {"isSet", True}, {
                 "isTuple", True}, {"Join", True}, {"Length", True}, {
                 "Less", True}, {"LessEqual", True}, {"Let", True}, {
                 "Max", True}, {"MaximumElementSet", True}, {"Min", True}, {
                 "MinimumElementSet", True}, {"Minus", True}, {
                 "Module", True}, {"MultInverse", True}, {"Not", True}, {
                 "Or", True}, {"Plus", True}, {"Power", True}, {
                 "PowerSet", True}, {"Prepend", True}, {"ProductOf", True}, {
                 "Radical", True}, {"RationalInterval", True}, {
                 "RealInterval", True}, {"Replace", True}, {
                 "ReplacePart", True}, {"SetEqual", True}, {
                 "Subscript", True}, {"Subset", True}, {
                 "SubsetEqual", True}, {"SumOf", True}, {"Superset", True}, {
                 "SupersetEqual", True}, {"Switch", True}, {
                 "SymmetricDifference", True}, {"Times", True}, {
                 "TupleEqual", True}, {"Union", True}, {"Which", True}, {
                 "While", True}, {"\[DoubleStruckCapitalC]", True}, {
                 "\[DoubleStruckCapitalC]P", True}}],
              Evaluator->Automatic,
              ImageSize->Automatic,
              Method->"Preemptive"]}
           },
           DefaultBaseStyle->"Column",
           GridBoxAlignment->{"Columns" -> {{Left}}},
           
           GridBoxItemSize->{
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
          "Column"],
         ImageMargins->0]}
      },
      AutoDelete->False,
      BaselinePosition->{1, 1},
      GridBoxAlignment->{"Columns" -> {{Left}}},
      GridBoxBackground->{"Columns" -> {{Automatic}}},
      GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
      GridBoxSpacings->{"Columns" -> {{0.2}}, "Rows" -> {{0.5}}}]}, Dynamic[
     Typeset`var$$],
     Alignment->Automatic,
     BaselinePosition->Baseline,
     DefaultBaseStyle->"OpenerView",
     ImageMargins->0,
     ImageSize->Automatic],
    Deployed->False,
    StripOnInput->False],
   OpenerView[{"", 
     Column[{
       OpenerView[{
         Style["Knowledge used in computation", "CIContent"], 
         Style[{}, "CIContent"]}], 
       OpenerView[{
         Style["Builtins used in computation", "CIContent"], 
         Style[{
          "AbsValue", "And", "Append", "Cardinality", "CartesianProduct", 
           "CaseDistinction", "Delete", "DeleteAt", "Difference", "Do", 
           "Exists", "For", "Forall", "Greater", "GreaterEqual", "Iff", 
           "Implies", "Insert", "IntegerInterval", "IntegerQuotientRing", 
           "IntegerQuotientRingPM", "Intersection", "isComplex", "isComplexP",
            "IsElement", "isInteger", "isRational", "isReal", "isSet", 
           "isTuple", "Join", "Length", "Less", "LessEqual", "Let", "Max", 
           "MaximumElementSet", "Min", "MinimumElementSet", "Minus", "Module",
            "MultInverse", "Not", "Or", "Plus", "Power", "PowerSet", 
           "Prepend", "ProductOf", "Radical", "RationalInterval", 
           "RealInterval", "Replace", "ReplacePart", "SetEqual", "Subscript", 
           "Subset", "SubsetEqual", "SumOf", "Superset", "SupersetEqual", 
           "Switch", "SymmetricDifference", "Times", "TupleEqual", "Union", 
           "Which", "While", "\[DoubleStruckCapitalC]", 
           "\[DoubleStruckCapitalC]P"}, "CIContent"]}], 
       Button["Restore environment", 
        Theorema`Interface`GUI`Private`setCompEnv[{}, {{"AbsValue", True}, {
          "And", True}, {"Append", True}, {"Cardinality", True}, {
          "CartesianProduct", True}, {"CaseDistinction", True}, {
          "Delete", True}, {"DeleteAt", True}, {"Difference", True}, {
          "Do", True}, {"Equal", False}, {"Exists", True}, {"For", True}, {
          "Forall", True}, {"Greater", True}, {"GreaterEqual", True}, {
          "Iff", True}, {"Implies", True}, {"Insert", True}, {
          "IntegerInterval", True}, {"IntegerQuotientRing", True}, {
          "IntegerQuotientRingPM", True}, {"Intersection", True}, {
          "isComplex", True}, {"isComplexP", True}, {"IsElement", True}, {
          "isInteger", True}, {"isRational", True}, {"isReal", True}, {
          "isSet", True}, {"isTuple", True}, {"Join", True}, {
          "Length", True}, {"Less", True}, {"LessEqual", True}, {
          "Let", True}, {"Max", True}, {"MaximumElementSet", True}, {
          "Min", True}, {"MinimumElementSet", True}, {"Minus", True}, {
          "Module", True}, {"MultInverse", True}, {"Not", True}, {
          "Or", True}, {"Plus", True}, {"Power", True}, {"PowerSet", True}, {
          "Prepend", True}, {"ProductOf", True}, {"Radical", True}, {
          "RationalInterval", True}, {"RealInterval", True}, {
          "Replace", True}, {"ReplacePart", True}, {"SetEqual", True}, {
          "Subscript", True}, {"Subset", True}, {"SubsetEqual", True}, {
          "SumOf", True}, {"Superset", True}, {"SupersetEqual", True}, {
          "Switch", True}, {"SymmetricDifference", True}, {"Times", True}, {
          "TupleEqual", True}, {"Union", True}, {"Which", True}, {
          "While", True}, {"\[DoubleStruckCapitalC]", True}, {
          "\[DoubleStruckCapitalC]P", True}}], ImageSize -> Automatic]}]}, 
    False]],
  DynamicModuleValues:>{}]], "ComputationInfo",
 CellChangeTimes->{3.594014439820156*^9},
 CellID->919021924],

Cell[BoxData[
 FormBox[
  RowBox[{"{", "\[SmallCircle]", "}"}], TheoremaForm]], "ComputationResult",
 CellChangeTimes->{3.59401443983157*^9},
 CellID->2144163423]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   TagBox["(",
    "AutoParentheses"], 
   TagBox["/",
    Identity], 
   TagBox[")",
    "AutoParentheses"]}], "\[Element]", 
  RowBox[{"{", 
   RowBox[{
    TagBox["(",
     "AutoParentheses"], 
    TagBox["/",
     Identity], 
    TagBox[")",
     "AutoParentheses"]}], "}"}]}]], "Computation",
 CellChangeTimes->{{3.594014889768366*^9, 3.594014924503739*^9}},
 CellID->340631633],

Cell[BoxData[
 DynamicModuleBox[{Typeset`var$$ = False}, 
  InterpretationBox[
   StyleBox[
    PaneSelectorBox[{False->GridBox[{
       {
        OpenerBox[Dynamic[Typeset`var$$],
         Appearance->Automatic,
         AutoAction->False,
         ContinuousAction->False,
         Enabled->Automatic], "\<\"\"\>"}
      },
      AutoDelete->False,
      BaselinePosition->{1, 1},
      GridBoxAlignment->{"Columns" -> {{Left}}},
      GridBoxBackground->{"Columns" -> {{Automatic}}},
      GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
      GridBoxSpacings->{"Columns" -> {{0.2}}, "Rows" -> {{0.5}}}], True->
     GridBox[{
       {
        OpenerBox[Dynamic[Typeset`var$$],
         Appearance->Automatic,
         AutoAction->False,
         ContinuousAction->False,
         Enabled->Automatic], "\<\"\"\>"},
       {"", 
        PaneBox[
         TagBox[GridBox[{
            {
             TagBox[
              DynamicModuleBox[{Typeset`var$$ = False}, 
               InterpretationBox[
                StyleBox[
                 PaneSelectorBox[{False->GridBox[{
                    {
                    OpenerBox[Dynamic[Typeset`var$$],
                    Appearance->Automatic,
                    AutoAction->False,
                    ContinuousAction->False,
                    Enabled->Automatic], 
                    
                    StyleBox["\<\"Knowledge used in computation\"\>", 
                    "CIContent",
                    StripOnInput->False]}
                   },
                   AutoDelete->False,
                   BaselinePosition->{1, 1},
                   GridBoxAlignment->{"Columns" -> {{Left}}},
                   GridBoxBackground->{"Columns" -> {{Automatic}}},
                   
                   GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
                   
                   GridBoxSpacings->{
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}], True->
                  GridBox[{
                    {
                    OpenerBox[Dynamic[Typeset`var$$],
                    Appearance->Automatic,
                    AutoAction->False,
                    ContinuousAction->False,
                    Enabled->Automatic], 
                    
                    StyleBox["\<\"Knowledge used in computation\"\>", 
                    "CIContent",
                    StripOnInput->False]},
                    {"", 
                    PaneBox[
                    StyleBox[
                    RowBox[{"{", "}"}], "CIContent",
                    StripOnInput->False],
                    ImageMargins->0]}
                   },
                   AutoDelete->False,
                   BaselinePosition->{1, 1},
                   GridBoxAlignment->{"Columns" -> {{Left}}},
                   GridBoxBackground->{"Columns" -> {{Automatic}}},
                   
                   GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
                   
                   GridBoxSpacings->{
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}]}, Dynamic[
                  Typeset`var$$],
                  Alignment->Automatic,
                  BaselinePosition->Baseline,
                  DefaultBaseStyle->"OpenerView",
                  ImageMargins->0,
                  ImageSize->Automatic],
                 Deployed->False,
                 StripOnInput->False],
                OpenerView[{
                  Style["Knowledge used in computation", "CIContent"], 
                  Style[{}, "CIContent"]}, False]],
               DynamicModuleValues:>Automatic],
              Setting[#, {0}]& ]},
            {
             TagBox[
              DynamicModuleBox[{Typeset`var$$ = False}, 
               InterpretationBox[
                StyleBox[
                 PaneSelectorBox[{False->GridBox[{
                    {
                    OpenerBox[Dynamic[Typeset`var$$],
                    Appearance->Automatic,
                    AutoAction->False,
                    ContinuousAction->False,
                    Enabled->Automatic], 
                    
                    StyleBox["\<\"Builtins used in computation\"\>", 
                    "CIContent",
                    StripOnInput->False]}
                   },
                   AutoDelete->False,
                   BaselinePosition->{1, 1},
                   GridBoxAlignment->{"Columns" -> {{Left}}},
                   GridBoxBackground->{"Columns" -> {{Automatic}}},
                   
                   GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
                   
                   GridBoxSpacings->{
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}], True->
                  GridBox[{
                    {
                    OpenerBox[Dynamic[Typeset`var$$],
                    Appearance->Automatic,
                    AutoAction->False,
                    ContinuousAction->False,
                    Enabled->Automatic], 
                    
                    StyleBox["\<\"Builtins used in computation\"\>", 
                    "CIContent",
                    StripOnInput->False]},
                    {"", 
                    PaneBox[
                    StyleBox[
                    RowBox[{"{", 
                    
                    RowBox[{"\<\"AbsValue\"\>", ",", "\<\"And\"\>", 
                    ",", "\<\"AnElement\"\>", ",", "\<\"Append\"\>", 
                    ",", "\<\"Cardinality\"\>", 
                    ",", "\<\"CartesianProduct\"\>", 
                    ",", "\<\"CaseDistinction\"\>", 
                    ",", "\<\"Componentwise\"\>", ",", "\<\"Delete\"\>", 
                    ",", "\<\"DeleteAt\"\>", ",", "\<\"Difference\"\>", 
                    ",", "\<\"Do\"\>", ",", "\<\"Equal\"\>", 
                    ",", "\<\"Exists\"\>", ",", "\<\"Factorial\"\>", 
                    ",", "\<\"For\"\>", ",", "\<\"Forall\"\>", 
                    ",", "\<\"Greater\"\>", ",", "\<\"GreaterEqual\"\>", 
                    ",", "\<\"Iff\"\>", ",", "\<\"Implies\"\>", 
                    ",", "\<\"Insert\"\>", ",", "\<\"IntegerInterval\"\>", 
                    ",", "\<\"IntegerQuotientRing\"\>", 
                    ",", "\<\"IntegerQuotientRingPM\"\>", 
                    ",", "\<\"Intersection\"\>", 
                    ",", "\<\"IntersectionOf\"\>", ",", "\<\"isComplex\"\>", 
                    ",", "\<\"isComplexP\"\>", ",", "\<\"IsElement\"\>", 
                    ",", "\<\"isInteger\"\>", ",", "\<\"isRational\"\>", 
                    ",", "\<\"isReal\"\>", ",", "\<\"isSet\"\>", 
                    ",", "\<\"isTuple\"\>", ",", "\<\"Join\"\>", 
                    ",", "\<\"Length\"\>", ",", "\<\"Less\"\>", 
                    ",", "\<\"LessEqual\"\>", ",", "\<\"Let\"\>", 
                    ",", "\<\"Max\"\>", ",", "\<\"MaximumElementSet\"\>", 
                    ",", "\<\"MaximumOf\"\>", ",", "\<\"Min\"\>", 
                    ",", "\<\"MinimumElementSet\"\>", 
                    ",", "\<\"MinimumOf\"\>", ",", "\<\"Minus\"\>", 
                    ",", "\<\"Module\"\>", ",", "\<\"MultInverse\"\>", 
                    ",", "\<\"Not\"\>", ",", "\<\"Or\"\>", 
                    ",", "\<\"Plus\"\>", ",", "\<\"Power\"\>", 
                    ",", "\<\"PowerSet\"\>", ",", "\<\"Prepend\"\>", 
                    ",", "\<\"ProductOf\"\>", ",", "\<\"Radical\"\>", 
                    ",", "\<\"RationalInterval\"\>", 
                    ",", "\<\"RealInterval\"\>", ",", "\<\"Replace\"\>", 
                    ",", "\<\"ReplacePart\"\>", ",", "\<\"SetEqual\"\>", 
                    ",", "\<\"Subscript\"\>", ",", "\<\"Subset\"\>", 
                    ",", "\<\"SubsetEqual\"\>", ",", "\<\"SumOf\"\>", 
                    ",", "\<\"Superset\"\>", ",", "\<\"SupersetEqual\"\>", 
                    ",", "\<\"Switch\"\>", ",", "\<\"SymmetricDifference\"\>",
                     ",", "\<\"Times\"\>", ",", "\<\"TupleEqual\"\>", 
                    ",", "\<\"Union\"\>", ",", "\<\"UnionOf\"\>", 
                    ",", "\<\"Which\"\>", ",", "\<\"While\"\>", 
                    ",", "\<\"\[DoubleStruckCapitalC]\"\>", 
                    ",", "\<\"\[DoubleStruckCapitalC]P\"\>"}], "}"}], 
                    "CIContent",
                    StripOnInput->False],
                    ImageMargins->0]}
                   },
                   AutoDelete->False,
                   BaselinePosition->{1, 1},
                   GridBoxAlignment->{"Columns" -> {{Left}}},
                   GridBoxBackground->{"Columns" -> {{Automatic}}},
                   
                   GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
                   
                   GridBoxSpacings->{
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}]}, Dynamic[
                  Typeset`var$$],
                  Alignment->Automatic,
                  BaselinePosition->Baseline,
                  DefaultBaseStyle->"OpenerView",
                  ImageMargins->0,
                  ImageSize->Automatic],
                 Deployed->False,
                 StripOnInput->False],
                OpenerView[{
                  Style["Builtins used in computation", "CIContent"], 
                  
                  Style[{"AbsValue", "And", "AnElement", "Append", 
                    "Cardinality", "CartesianProduct", "CaseDistinction", 
                    "Componentwise", "Delete", "DeleteAt", "Difference", "Do",
                     "Equal", "Exists", "Factorial", "For", "Forall", 
                    "Greater", "GreaterEqual", "Iff", "Implies", "Insert", 
                    "IntegerInterval", "IntegerQuotientRing", 
                    "IntegerQuotientRingPM", "Intersection", "IntersectionOf",
                     "isComplex", "isComplexP", "IsElement", "isInteger", 
                    "isRational", "isReal", "isSet", "isTuple", "Join", 
                    "Length", "Less", "LessEqual", "Let", "Max", 
                    "MaximumElementSet", "MaximumOf", "Min", 
                    "MinimumElementSet", "MinimumOf", "Minus", "Module", 
                    "MultInverse", "Not", "Or", "Plus", "Power", "PowerSet", 
                    "Prepend", "ProductOf", "Radical", "RationalInterval", 
                    "RealInterval", "Replace", "ReplacePart", "SetEqual", 
                    "Subscript", "Subset", "SubsetEqual", "SumOf", "Superset",
                     "SupersetEqual", "Switch", "SymmetricDifference", 
                    "Times", "TupleEqual", "Union", "UnionOf", "Which", 
                    "While", "\[DoubleStruckCapitalC]", 
                    "\[DoubleStruckCapitalC]P"}, "CIContent"]}, False]],
               DynamicModuleValues:>Automatic],
              Setting[#, {0}]& ]},
            {
             ButtonBox["\<\"Restore environment\"\>",
              Appearance->Automatic,
              
              ButtonFunction:>
               Theorema`Interface`GUI`Private`setCompEnv[{}, {{
                 "AbsValue", True}, {"And", True}, {"AnElement", True}, {
                 "Append", True}, {"Cardinality", True}, {
                 "CartesianProduct", True}, {"CaseDistinction", True}, {
                 "Componentwise", True}, {"Delete", True}, {
                 "DeleteAt", True}, {"Difference", True}, {"Do", True}, {
                 "Equal", True}, {"Exists", True}, {"Factorial", True}, {
                 "For", True}, {"Forall", True}, {"Greater", True}, {
                 "GreaterEqual", True}, {"Iff", True}, {"Implies", True}, {
                 "Insert", True}, {"IntegerInterval", True}, {
                 "IntegerQuotientRing", True}, {
                 "IntegerQuotientRingPM", True}, {"Intersection", True}, {
                 "IntersectionOf", True}, {"isComplex", True}, {
                 "isComplexP", True}, {"IsElement", True}, {
                 "isInteger", True}, {"isRational", True}, {"isReal", True}, {
                 "isSet", True}, {"isTuple", True}, {"Join", True}, {
                 "Length", True}, {"Less", True}, {"LessEqual", True}, {
                 "Let", True}, {"Max", True}, {"MaximumElementSet", True}, {
                 "MaximumOf", True}, {"Min", True}, {
                 "MinimumElementSet", True}, {"MinimumOf", True}, {
                 "Minus", True}, {"Module", True}, {"MultInverse", True}, {
                 "Not", True}, {"Or", True}, {"Plus", True}, {
                 "Power", True}, {"PowerSet", True}, {"Prepend", True}, {
                 "ProductOf", True}, {"Radical", True}, {
                 "RationalInterval", True}, {"RealInterval", True}, {
                 "Replace", True}, {"ReplacePart", True}, {
                 "SetEqual", True}, {"Subscript", True}, {"Subset", True}, {
                 "SubsetEqual", True}, {"SumOf", True}, {"Superset", True}, {
                 "SupersetEqual", True}, {"Switch", True}, {
                 "SymmetricDifference", True}, {"Times", True}, {
                 "TupleEqual", True}, {"Union", True}, {"UnionOf", True}, {
                 "Which", True}, {"While", True}, {
                 "\[DoubleStruckCapitalC]", True}, {
                 "\[DoubleStruckCapitalC]P", True}}],
              Evaluator->Automatic,
              ImageSize->Automatic,
              Method->"Preemptive"]}
           },
           DefaultBaseStyle->"Column",
           GridBoxAlignment->{"Columns" -> {{Left}}},
           
           GridBoxItemSize->{
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
          "Column"],
         ImageMargins->0]}
      },
      AutoDelete->False,
      BaselinePosition->{1, 1},
      GridBoxAlignment->{"Columns" -> {{Left}}},
      GridBoxBackground->{"Columns" -> {{Automatic}}},
      GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
      GridBoxSpacings->{"Columns" -> {{0.2}}, "Rows" -> {{0.5}}}]}, Dynamic[
     Typeset`var$$],
     Alignment->Automatic,
     BaselinePosition->Baseline,
     DefaultBaseStyle->"OpenerView",
     ImageMargins->0,
     ImageSize->Automatic],
    Deployed->False,
    StripOnInput->False],
   OpenerView[{"", 
     Column[{
       OpenerView[{
         Style["Knowledge used in computation", "CIContent"], 
         Style[{}, "CIContent"]}], 
       OpenerView[{
         Style["Builtins used in computation", "CIContent"], 
         Style[{
          "AbsValue", "And", "AnElement", "Append", "Cardinality", 
           "CartesianProduct", "CaseDistinction", "Componentwise", "Delete", 
           "DeleteAt", "Difference", "Do", "Equal", "Exists", "Factorial", 
           "For", "Forall", "Greater", "GreaterEqual", "Iff", "Implies", 
           "Insert", "IntegerInterval", "IntegerQuotientRing", 
           "IntegerQuotientRingPM", "Intersection", "IntersectionOf", 
           "isComplex", "isComplexP", "IsElement", "isInteger", "isRational", 
           "isReal", "isSet", "isTuple", "Join", "Length", "Less", 
           "LessEqual", "Let", "Max", "MaximumElementSet", "MaximumOf", "Min",
            "MinimumElementSet", "MinimumOf", "Minus", "Module", 
           "MultInverse", "Not", "Or", "Plus", "Power", "PowerSet", "Prepend",
            "ProductOf", "Radical", "RationalInterval", "RealInterval", 
           "Replace", "ReplacePart", "SetEqual", "Subscript", "Subset", 
           "SubsetEqual", "SumOf", "Superset", "SupersetEqual", "Switch", 
           "SymmetricDifference", "Times", "TupleEqual", "Union", "UnionOf", 
           "Which", "While", "\[DoubleStruckCapitalC]", 
           "\[DoubleStruckCapitalC]P"}, "CIContent"]}], 
       Button["Restore environment", 
        Theorema`Interface`GUI`Private`setCompEnv[{}, {{"AbsValue", True}, {
          "And", True}, {"AnElement", True}, {"Append", True}, {
          "Cardinality", True}, {"CartesianProduct", True}, {
          "CaseDistinction", True}, {"Componentwise", True}, {
          "Delete", True}, {"DeleteAt", True}, {"Difference", True}, {
          "Do", True}, {"Equal", True}, {"Exists", True}, {
          "Factorial", True}, {"For", True}, {"Forall", True}, {
          "Greater", True}, {"GreaterEqual", True}, {"Iff", True}, {
          "Implies", True}, {"Insert", True}, {"IntegerInterval", True}, {
          "IntegerQuotientRing", True}, {"IntegerQuotientRingPM", True}, {
          "Intersection", True}, {"IntersectionOf", True}, {
          "isComplex", True}, {"isComplexP", True}, {"IsElement", True}, {
          "isInteger", True}, {"isRational", True}, {"isReal", True}, {
          "isSet", True}, {"isTuple", True}, {"Join", True}, {
          "Length", True}, {"Less", True}, {"LessEqual", True}, {
          "Let", True}, {"Max", True}, {"MaximumElementSet", True}, {
          "MaximumOf", True}, {"Min", True}, {"MinimumElementSet", True}, {
          "MinimumOf", True}, {"Minus", True}, {"Module", True}, {
          "MultInverse", True}, {"Not", True}, {"Or", True}, {"Plus", True}, {
          "Power", True}, {"PowerSet", True}, {"Prepend", True}, {
          "ProductOf", True}, {"Radical", True}, {"RationalInterval", True}, {
          "RealInterval", True}, {"Replace", True}, {"ReplacePart", True}, {
          "SetEqual", True}, {"Subscript", True}, {"Subset", True}, {
          "SubsetEqual", True}, {"SumOf", True}, {"Superset", True}, {
          "SupersetEqual", True}, {"Switch", True}, {
          "SymmetricDifference", True}, {"Times", True}, {
          "TupleEqual", True}, {"Union", True}, {"UnionOf", True}, {
          "Which", True}, {"While", True}, {
          "\[DoubleStruckCapitalC]", True}, {
          "\[DoubleStruckCapitalC]P", True}}], ImageSize -> Automatic]}]}, 
    False]],
  DynamicModuleValues:>{}]], "ComputationInfo",
 CellChangeTimes->{3.599300787532936*^9},
 CellID->19638021],

Cell[BoxData[
 FormBox["True", TheoremaForm]], "ComputationResult",
 CellChangeTimes->{{3.594014902350673*^9, 3.594014925398365*^9}, {
  3.59930078068018*^9, 3.599300787544375*^9}},
 CellID->1513839716]
}, Open  ]]
}, Closed]]
}, Closed]]
}, Open  ]]
},
WindowSize->{740, 867},
WindowMargins->{{436, Automatic}, {Automatic, 0}},
CounterAssignments->{{"TheoremaFormulaCounter" -> 16}},
FrontEndVersion->"9.0 for Linux x86 (32-bit) (February 7, 2013)",
StyleDefinitions->Notebook[{
   Cell[
    StyleData[
    StyleDefinitions -> FrontEnd`FileName[{"Theorema"}, "TheoremaCore.nb"]]], 
   
   Cell["Modify the definitions below to change the default appearance of all \
cells in a given style. \nMake modifications to any definition using commands \
in the Format menu.", "Text"], 
   Cell[
    CellGroupData[{
      Cell["Notebook Options Settings", "Section"], 
      Cell[
      "The options defined for the style below will be used at the Notebook \
level.", "Text"], 
      Cell[
       CellGroupData[{
         Cell[
          StyleData["Notebook"], InputAliases -> {"and" -> RowBox[{
               TagBox["(", "AutoParentheses"], 
               
               RowBox[{
                "\[SelectionPlaceholder]", "\[And]", "\[Placeholder]"}], 
               TagBox[")", "AutoParentheses"]}], "or" -> RowBox[{
               TagBox["(", "AutoParentheses"], 
               RowBox[{"\[SelectionPlaceholder]", "\[Or]", "\[Placeholder]"}], 
               TagBox[")", "AutoParentheses"]}], "not" -> RowBox[{
               TagBox["(", "AutoParentheses"], 
               RowBox[{"\[Not]", "\[SelectionPlaceholder]"}], 
               TagBox[")", "AutoParentheses"]}], "impl" -> RowBox[{
               TagBox["(", "AutoParentheses"], 
               
               RowBox[{
                "\[SelectionPlaceholder]", "\[Implies]", "\[Placeholder]"}], 
               TagBox[")", "AutoParentheses"]}], "equiv" -> RowBox[{
               TagBox["(", "AutoParentheses"], 
               RowBox[{"\[SelectionPlaceholder]", 
                 TagBox[
                 "\[DoubleLeftRightArrow]", Identity, SyntaxForm -> 
                  "a\[Implies]b"], "\[Placeholder]"}], 
               TagBox[")", "AutoParentheses"]}], "eq" -> RowBox[{
               TagBox["(", "AutoParentheses"], 
               
               RowBox[{
                "\[SelectionPlaceholder]", "\[Equal]", "\[Placeholder]"}], 
               TagBox[")", "AutoParentheses"]}], ":equiv" -> RowBox[{
               TagBox["(", "AutoParentheses"], 
               RowBox[{"\[SelectionPlaceholder]", 
                 TagBox[
                  
                  RowBox[{
                   ":", "\[NegativeThickSpace]\[NegativeThinSpace]", 
                    "\[DoubleLongLeftRightArrow]"}], Identity, SyntaxForm -> 
                  "a\[Implies]b"], "\[Placeholder]"}], 
               TagBox[")", "AutoParentheses"]}], ":eq" -> RowBox[{
               TagBox["(", "AutoParentheses"], 
               RowBox[{"\[SelectionPlaceholder]", ":=", "\[Placeholder]"}], 
               TagBox[")", "AutoParentheses"]}], "far" -> RowBox[{
               TagBox["(", "AutoParentheses"], 
               RowBox[{
                 UnderscriptBox["\[ForAll]", "\[Placeholder]"], 
                 "\[SelectionPlaceholder]"}], 
               TagBox[")", "AutoParentheses"]}], "exr" -> RowBox[{
               TagBox["(", "AutoParentheses"], 
               RowBox[{
                 UnderscriptBox["\[Exists]", "\[Placeholder]"], 
                 "\[SelectionPlaceholder]"}], 
               TagBox[")", "AutoParentheses"]}], "farc" -> RowBox[{
               TagBox["(", "AutoParentheses"], 
               RowBox[{
                 UnderscriptBox[
                  UnderscriptBox["\[ForAll]", "\[Placeholder]"], 
                  "\[Placeholder]"], "\[SelectionPlaceholder]"}], 
               TagBox[")", "AutoParentheses"]}], "exrc" -> RowBox[{
               TagBox["(", "AutoParentheses"], 
               RowBox[{
                 UnderscriptBox[
                  UnderscriptBox["\[Exists]", "\[Placeholder]"], 
                  "\[Placeholder]"], "\[SelectionPlaceholder]"}], 
               TagBox[")", "AutoParentheses"]}], "andn" -> RowBox[{
               TagBox["(", "AutoParentheses"], 
               RowBox[{"\[And]", "\[Piecewise]", 
                 GridBox[{{"\[SelectionPlaceholder]"}, {"\[Placeholder]"}}]}], 
               TagBox[")", "AutoParentheses"]}], "orn" -> RowBox[{
               TagBox["(", "AutoParentheses"], 
               RowBox[{"\[Or]", "\[Piecewise]", 
                 GridBox[{{"\[SelectionPlaceholder]"}, {"\[Placeholder]"}}]}], 
               TagBox[")", "AutoParentheses"]}], "equivn" -> RowBox[{
               TagBox["(", "AutoParentheses"], 
               RowBox[{"\[DoubleLeftRightArrow]", "\[Piecewise]", 
                 GridBox[{{"\[SelectionPlaceholder]"}, {"\[Placeholder]"}}]}], 
               TagBox[")", "AutoParentheses"]}], "cdist" -> RowBox[{
               TagBox["(", "AutoParentheses"], 
               RowBox[{"\[Piecewise]", 
                 
                 GridBox[{{
                   "\[SelectionPlaceholder]", "\[DoubleLeftArrow]", 
                    "\[Placeholder]"}, {
                   "\[Placeholder]", "\[DoubleLeftArrow]", 
                    "\[Placeholder]"}}]}], 
               TagBox[")", "AutoParentheses"]}], "let" -> RowBox[{
               TagBox["(", "AutoParentheses"], 
               RowBox[{
                 UnderscriptBox["let", 
                  RowBox[{"\[Placeholder]", "=", "\[Placeholder]"}]], 
                 "\[SelectionPlaceholder]"}], 
               TagBox[")", "AutoParentheses"]}], "subop" -> RowBox[{
               TagBox["(", "AutoParentheses"], 
               SubscriptBox["\[SelectionPlaceholder]", "\[Placeholder]"], 
               TagBox[")", "AutoParentheses"]}], "supop" -> RowBox[{
               TagBox["(", "AutoParentheses"], 
               SuperscriptBox["\[SelectionPlaceholder]", "\[Placeholder]"], 
               TagBox[")", "AutoParentheses"]}], "subsupop" -> RowBox[{
               TagBox["(", "AutoParentheses"], 
               SubsuperscriptBox[
               "\[SelectionPlaceholder]", "\[Placeholder]", "\[Placeholder]"], 
               TagBox[")", "AutoParentheses"]}], "oop" -> RowBox[{
               TagBox["(", "AutoParentheses"], 
               OverscriptBox["\[SelectionPlaceholder]", "\[Placeholder]"], 
               TagBox[")", "AutoParentheses"]}], "uoop" -> RowBox[{
               TagBox["(", "AutoParentheses"], 
               UnderoverscriptBox[
               "\[SelectionPlaceholder]", "\[Placeholder]", "\[Placeholder]"], 
               TagBox[")", "AutoParentheses"]}], "osop" -> RowBox[{
               TagBox["(", "AutoParentheses"], 
               SubscriptBox[
                OverscriptBox["\[SelectionPlaceholder]", "\[Placeholder]"], 
                "\[Placeholder]"], 
               TagBox[")", "AutoParentheses"]}], "op" -> RowBox[{
               TagBox["(", "AutoParentheses"], 
               TagBox["\[SelectionPlaceholder]", Identity], 
               TagBox[")", "AutoParentheses"]}], "(" -> 
            TagBox["(", "AutoParentheses"], ")" -> 
            TagBox[")", "AutoParentheses"]}, Background -> 
          RGBColor[0.957, 0.96, 0.97]], 
         Cell[
          StyleData["Notebook", "Printout"], Background -> None]}, Open]]}, 
     Open]], 
   Cell[
    CellGroupData[{
      Cell["Style Environment Names", "Section"], 
      Cell[
       StyleData[All, "Working"], DockedCells -> {
         Cell[
         "T h e o r e m a   2", "SBO", CellMargins -> {{0, 0}, {0, 0}}, 
          CellFrameMargins -> {{0, 50}, {0, 0}}, FontSize -> 28, FontSlant -> 
          "Plain", FontColor -> RGBColor[0.29, 0.46, 0.6], TextAlignment -> 
          Right, Background -> RGBColor[0.36, 0.54, 0.69]]}], 
      Cell[
       StyleData[
       All, "Layout", StyleDefinitions -> StyleData[All, "Working"]], 
       MenuSortingValue -> 1200], 
      Cell[
       StyleData[All, "Presentation"], DockedCells -> {
         Cell[
         "T h e o r e m a . 2", "SBO", CellMargins -> {{0, 0}, {0, 0}}, 
          CellFrameMargins -> {{0, 50}, {0, 0}}, FontSize -> 28, FontSlant -> 
          "Plain", FontColor -> RGBColor[0.289412, 0.458824, 0.6], 
          TextAlignment -> Right, Background -> 
          RGBColor[0.364705882, 0.541176471, 0.694117647]]}], 
      Cell[
       StyleData[
       All, "SlideShow", StyleDefinitions -> StyleData[All, "Presentation"]], 
       PageWidth -> WindowWidth, DockedCells -> {
         FEPrivate`FrontEndResource["FEExpressions", "SlideshowToolbar"], 
         Cell[
         "T h e o r e m a . 2", "SBO", CellMargins -> {{0, 0}, {0, 0}}, 
          CellFrameMargins -> {{0, 50}, {0, 0}}, FontSize -> 28, FontSlant -> 
          "Plain", FontColor -> RGBColor[0.289412, 0.458824, 0.6], 
          TextAlignment -> Right, Background -> 
          RGBColor[0.364705882, 0.541176471, 0.694117647]]}, 
       ScrollingOptions -> {
        "PagewiseDisplay" -> True, "VerticalScrollRange" -> Fit}, 
       MenuSortingValue -> 1300], 
      Cell[
       StyleData[All, "Printout"], DockedCells -> {
         Cell[
         "T h e o r e m a . 2", "SBO", CellMargins -> {{0, 0}, {0, 0}}, 
          CellFrameMargins -> {{0, 50}, {0, 0}}, FontSize -> 28, FontSlant -> 
          "Plain", FontColor -> RGBColor[0.289412, 0.458824, 0.6], 
          TextAlignment -> Right, Background -> 
          RGBColor[0.364705882, 0.541176471, 0.694117647]]}]}, Open]], 
   Cell[
    CellGroupData[{
      Cell["Styles for Title and Section Cells", "Section"], 
      Cell[
       CellGroupData[{
         Cell["Title", "Subsection"], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData["Title"], CellMargins -> {{27, Inherited}, {0, 30}}, 
             MenuSortingValue -> 1100, MenuCommandKey -> "1", FontColor -> 
             RGBColor[0.23, 0.25, 0.34]], 
            Cell[
             StyleData["Title", "SlideShow"], 
             CellMargins -> {{27, 10}, {0, 45}}], 
            Cell[
             StyleData["Title", "Printout"], ShowGroupOpener -> False, 
             CellMargins -> {{6, 10}, {5, 30}}]}, Closed]], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData["Subtitle"], CellMargins -> {{27, Inherited}, {0, 2}}, 
             MenuSortingValue -> 1150, FontColor -> 
             RGBColor[0.23, 0.25, 0.34]], 
            Cell[
             StyleData["Subtitle", "SlideShow"], 
             CellMargins -> {{27, 10}, {0, 3}}], 
            Cell[
             StyleData["Subtitle", "Printout"], 
             CellMargins -> {{6, 10}, {5, 0}}]}, Closed]], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData["Subsubtitle"], MenuSortingValue -> 1200, FontColor -> 
             RGBColor[0.23, 0.25, 0.34]], 
            Cell[
             StyleData["Subsubtitle", "SlideShow"], 
             CellMargins -> {{27, 10}, {12, 3}}], 
            Cell[
             StyleData["Subsubtitle", "Printout"], 
             CellMargins -> {{6, 10}, {0, 0}}]}, Closed]]}, Closed]], 
      Cell[
       CellGroupData[{
         Cell["Sectioning", "Subsection"], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData["Section"], ShowGroupOpener -> True, MenuSortingValue -> 
             1250, MenuCommandKey -> "4", FontColor -> 
             RGBColor[0.3, 0.3, 0.3]], 
            Cell[
             StyleData["Section", "SlideShow"], 
             CellMargins -> {{27, 10}, {12, 51}}], 
            Cell[
             StyleData["Section", "Printout"], ShowGroupOpener -> False, 
             CellMargins -> {{2, 0}, {7, 22}}]}, Closed]], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData["Subsection"], CellDingbat -> None, ShowGroupOpener -> 
             True, CellMargins -> {{48, Inherited}, {8, 12}}, 
             MenuSortingValue -> 1300, MenuCommandKey -> "5", FontColor -> 
             RGBColor[0.3, 0.3, 0.3]], 
            Cell[
             StyleData["Subsection", "SlideShow"], 
             CellMargins -> {{48, 10}, {12, 18}}], 
            Cell[
             StyleData["Subsection", "Printout"], ShowGroupOpener -> False, 
             CellMargins -> {{9, 0}, {7, 22}}]}, Closed]], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData["Subsubsection"], CellDingbat -> None, ShowGroupOpener -> 
             True, CellMargins -> {{60, Inherited}, {2, 10}}, 
             MenuSortingValue -> 1350, MenuCommandKey -> "6", FontSlant -> 
             "Italic", FontColor -> RGBColor[0.4, 0.4, 0.4]], 
            Cell[
             StyleData["Subsubsection", "SlideShow"], 
             CellMargins -> {{60, 10}, {3, 15}}], 
            Cell[
             StyleData["Subsubsection", "Printout"], ShowGroupOpener -> False,
              CellMargins -> {{35, 0}, {7, 14}}]}, Closed]], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData["Subsubsubsection"], CellDingbat -> None, 
             ShowGroupOpener -> True, 
             CellMargins -> {{92, Inherited}, {Inherited, Inherited}}, 
             FontColor -> RGBColor[0.4, 0.4, 0.4]], 
            Cell[
             StyleData["Subsubsubsection", "SlideShow"], 
             CellMargins -> {{92, 10}, {3, 15}}, LineSpacing -> {1, 0}], 
            Cell[
             StyleData["Subsubsubsection", "Printout"], 
             CellMargins -> {{50, 0}, {7, 14}}]}, Closed]]}, Closed]]}, 
     Open]], 
   Cell[
    CellGroupData[{
      Cell["Styles for Publication\[Hyphen]ready Documents", "Section"], 
      Cell[
       CellGroupData[{
         Cell[
          StyleData["Author"], CellMargins -> {{27, 30}, {20, 5}}, 
          MenuSortingValue -> 1900, FontFamily -> "Helvetica", FontSize -> 14,
           FontSlant -> "Italic"], 
         Cell[
          StyleData["Author", "SlideShow"], 
          CellMargins -> {{27, 30}, {30, 8}}, FontSize -> 28], 
         Cell[
          StyleData["Author", "Printout"], CellMargins -> {{6, 10}, {0, 10}}, 
          FontSize -> 10]}, Closed]], 
      Cell[
       CellGroupData[{
         Cell[
          StyleData["Abstract"], CellFrame -> {{0, 0}, {0.5, 0.5}}, 
          CellMargins -> {{27, 140}, {20, 20}}, LineSpacing -> {0.9, 0}, 
          MenuSortingValue -> 2050, FontFamily -> "Times", FontSize -> 12], 
         Cell[
          StyleData["Abstract", "SlideShow"], CellFrame -> {{0, 0}, {1, 1}}, 
          CellMargins -> {{27, 140}, {30, 30}}, FontSize -> 24], 
         Cell[
          StyleData["Abstract", "Printout"], Hyphenation -> True, 
          LineSpacing -> {1, 2}, FontSize -> 10]}, Closed]]}, Closed]], 
   Cell[
    CellGroupData[{
      Cell["Text", "Section"], 
      Cell[
       StyleData["EnvironmentText"], 
       CellMargins -> {{82, Inherited}, {Inherited, Inherited}}, 
       MenuSortingValue -> 1480, MenuCommandKey -> "T"]}, Open]], 
   Cell[
    CellGroupData[{
      Cell["Theorema", "Section"], 
      Cell[
       StyleData["GlobalDeclaration"], CellFrame -> {{0, 2}, {0, 0}}, 
       ShowCellBracket -> Automatic, CellMargins -> {{76, 10}, {2, 2}}, 
       CellBracketOptions -> {"Color" -> RGBColor[0.73, 0.74, 0.84]}, 
       InitializationCell -> True, CellFrameMargins -> 10, CellFrameColor -> 
       RGBColor[0.73, 0.65, 0.61], CellFrameLabelMargins -> 22, 
       ShowAutoStyles -> False, MenuSortingValue -> 1441, MenuCommandKey -> 
       "G", FontSize -> 14], 
      Cell[
       StyleData["OpenEnvironment"], Editable -> False, Selectable -> False, 
       CellFrame -> {{False, False}, {True, False}}, ShowCellBracket -> True, 
       CellMargins -> {{76, 6}, {-4, Inherited}}, 
       CellBracketOptions -> {"Color" -> RGBColor[0.73, 0.74, 0.84]}, 
       CellFrameMargins -> 2, CellFrameColor -> RGBColor[0.4, 0.4, 0.4], 
       MenuSortingValue -> 1485], 
      Cell[
       StyleData["EnvironmentHeader"], 
       CellFrame -> {{False, False}, {False, False}}, 
       CellMargins -> {{76, Inherited}, {Inherited, Inherited}}, 
       CellBracketOptions -> {"Color" -> RGBColor[0.73, 0.74, 0.84]}, 
       CellFrameMargins -> 6, CellFrameColor -> RGBColor[0.4, 0.4, 0.4], 
       ShowAutoStyles -> False, MenuSortingValue -> 1450, FontSize -> 14, 
       FontWeight -> "Bold", FontVariations -> {"CapsType" -> "SmallCaps"}, 
       Background -> RGBColor[0.89, 0.8, 0.69]], 
      Cell[
       CellGroupData[{
         Cell[
          StyleData["FormalTextInputFormula"], ShowCellBracket -> Automatic, 
          CellMargins -> {{96, 10}, {2, 2}}, 
          CellBracketOptions -> {"Color" -> RGBColor[0.73, 0.74, 0.84]}, 
          InitializationCell -> True, CellFrameLabelMargins -> 53, 
          ShowAutoStyles -> False, MenuSortingValue -> 1470, MenuCommandKey -> 
          "F", FontWeight -> "Bold", FontColor -> RGBColor[0.25, 0.19, 0.2]], 
         
         Cell[
          StyleData["FormalTextInputFormula", "Layout"], Editable -> False], 
         Cell[
          StyleData["FormalTextInputFormula", "Presentation"], Editable -> 
          False]}, Open]], 
      Cell[
       StyleData["EndEnvironmentMarker"], 
       CellBracketOptions -> {"Color" -> RGBColor[0.73, 0.74, 0.84]}, 
       TextAlignment -> Right, MenuSortingValue -> 1480], 
      Cell[
       StyleData["CloseEnvironment"], Editable -> False, Selectable -> False, 
       CellFrame -> {{False, False}, {False, True}}, ShowCellBracket -> True, 
       CellMargins -> {{76, 6}, {Inherited, 0}}, 
       CellBracketOptions -> {"Color" -> RGBColor[0.73, 0.74, 0.84]}, 
       CellFrameMargins -> 2, CellFrameColor -> RGBColor[0.4, 0.4, 0.4], 
       MenuSortingValue -> 1485], 
      Cell[
       CellGroupData[{
         Cell[
          StyleData["Computation"], CellFrame -> {{1.5, 0}, {0, 0}}, 
          ShowCellBracket -> Automatic, ShowGroupOpener -> True, 
          CellMargins -> {{76, 0}, {-5, 10}}, 
          CellBracketOptions -> {"Color" -> RGBColor[0.23, 0.25, 0.34]}, 
          CellFrameColor -> RGBColor[0.486, 0.33, 0.32], 
          CellFrameLabels -> {{None, 
             Cell["\[MathematicaIcon]", "CILabel"]}, {None, None}}, 
          CellFrameLabelMargins -> {{12, 10}, {0, 0}}, ShowAutoStyles -> 
          False, MenuSortingValue -> 1510, MenuCommandKey -> "C", FontWeight -> 
          "Bold", FontColor -> RGBColor[0.23, 0.25, 0.34]], 
         Cell[
          StyleData["Computation", "Layout"], Editable -> False], 
         Cell[
          StyleData["Computation", "Presentation"], Editable -> False], 
         Cell[
          StyleData["Computation", "SlideShow"], 
          CellMargins -> {{74, 0}, {-10, 15}}]}, Open]], 
      Cell[
       CellGroupData[{
         Cell[
          StyleData["ComputationResult"], CellFrame -> {{1.5, 0}, {0, 0}}, 
          ShowCellBracket -> Automatic, CellMargins -> {{76, 60}, {5, -5}}, 
          CellBracketOptions -> {"Color" -> RGBColor[0.23, 0.25, 0.34]}, 
          CellFrameMargins -> {{8, 8}, {2, 0}}, CellFrameColor -> 
          RGBColor[0.486, 0.33, 0.32], 
          CellFrameLabels -> {{None, ""}, {None, None}}, 
          CellFrameLabelMargins -> {{12, 5}, {0, 0}}, StyleMenuListing -> 
          None, FontColor -> RGBColor[0.23, 0.25, 0.34]], 
         Cell[
          StyleData["ComputationResult", "SlideShow"], 
          CellMargins -> {{92, 10}, {15, -10}}]}, Open]], 
      Cell[
       CellGroupData[{
         Cell[
          StyleData["ComputationInfo"], ShowCellBracket -> Automatic, 
          CellMargins -> {{74, 30}, {0, 0}}, CellFrameLabels -> {{None, 
             Cell["...?", "CIContent"]}, {None, None}}, TextAlignment -> 
          Right, StyleMenuListing -> None], 
         Cell[
          StyleData["ComputationInfo", "SlideShow"], 
          CellMargins -> {{74, 30}, {0, 0}}]}, Open]], 
      Cell[
       CellGroupData[{
         Cell[
          StyleData["ProofInfo"], ShowCellBracket -> Automatic, 
          CellMargins -> {{74, 30}, {0, 0}}, CellFrameLabels -> {{None, 
             Cell["...?", "PIContent"]}, {None, None}}, TextAlignment -> 
          Right, StyleMenuListing -> None], 
         Cell[
          StyleData["ProofInfo", "SlideShow"], 
          CellMargins -> {{74, 30}, {0, 0}}]}, Open]], 
      Cell[
       StyleData["OpenProof"], ShowCellBracket -> Automatic, 
       CellMargins -> {{66, Inherited}, {Inherited, Inherited}}, 
       StyleMenuListing -> None, FontFamily -> "Arial", FontSize -> 11, 
       FontWeight -> "Plain", FontSlant -> "Italic", 
       FontVariations -> {"StrikeThrough" -> False, "Underline" -> False}], 
      Cell[
       StyleData["ProofDisplay"], ShowCellBracket -> Automatic], 
      Cell[
       StyleData["CloseProof"], ShowCellBracket -> Automatic, TextAlignment -> 
       Right, StyleMenuListing -> None], 
      Cell[
       CellGroupData[{
         Cell[
          StyleData["FrameLabel"], LanguageCategory -> None, StyleMenuListing -> 
          None, FontFamily -> "Times New Roman", FontSize -> 10, FontWeight -> 
          "Plain", FontSlant -> "Italic", FontTracking -> "Plain", 
          FontVariations -> {
           "Masked" -> False, "Outline" -> False, "Shadow" -> False, 
            "StrikeThrough" -> False, "Underline" -> False}, FontColor -> 
          RGBColor[0.55, 0.44, 0.42], Background -> None], 
         Cell[
          StyleData["FrameLabel", "SlideShow"], FontSize -> 18], 
         Cell[
          StyleData["FrameLabel", "Printout"]]}, Closed]], 
      Cell[
       StyleData["CILabel"], FontSize -> 14, FontWeight -> "Plain", FontSlant -> 
       "Plain", FontTracking -> "Plain", 
       FontVariations -> {
        "Masked" -> False, "Outline" -> False, "Shadow" -> False, 
         "StrikeThrough" -> False, "Underline" -> False}, FontColor -> 
       RGBColor[0.404, 0.43, 0.545]], 
      Cell[
       StyleData["CIContent"], FontFamily -> "Times New Roman", FontSize -> 
       10, FontWeight -> "Plain", FontSlant -> "Plain", 
       FontVariations -> {"StrikeThrough" -> False, "Underline" -> False}, 
       FontColor -> RGBColor[0.23, 0.25, 0.34]], 
      Cell[
       StyleData["PILabel"], FontSize -> 14, FontWeight -> "Plain", FontSlant -> 
       "Plain", FontTracking -> "Plain", 
       FontVariations -> {
        "Masked" -> False, "Outline" -> False, "Shadow" -> False, 
         "StrikeThrough" -> False, "Underline" -> False}, FontColor -> 
       RGBColor[0.404, 0.43, 0.545]], 
      Cell[
       StyleData["PIContent"], FontFamily -> "Times New Roman", FontSize -> 
       10, FontWeight -> "Plain", FontSlant -> "Plain", 
       FontVariations -> {"StrikeThrough" -> False, "Underline" -> False}, 
       FontColor -> RGBColor[0.23, 0.25, 0.34]], 
      Cell[
       StyleData["OpenArchive"], CellFrame -> {{False, False}, {False, True}},
        ShowCellBracket -> Automatic, CellMargins -> {{70, 70}, {0, 10}}, 
       CellBracketOptions -> {"Color" -> RGBColor[0.73, 0.74, 0.84]}, 
       CellGroupingRules -> {"SectionGrouping", 20}, CellFrameMargins -> 3, 
       CellFrameColor -> RGBColor[0.4, 0.4, 0.4], CellFrameLabelMargins -> 1, 
       DefaultFormatType -> DefaultInputFormatType, ShowAutoStyles -> False, 
       MenuSortingValue -> 1210, FontWeight -> Bold, Background -> 
       RGBColor[0.73, 0.74, 0.84]], 
      Cell[
       StyleData["ArchiveInfo"], ShowCellBracket -> Automatic, 
       CellMargins -> {{70, 70}, {0, 0}}, 
       CellBracketOptions -> {"Color" -> RGBColor[0.73, 0.74, 0.84]}, 
       CellFrameMargins -> 5, CellFrameLabelMargins -> 3, ShowCellTags -> 
       False, ShowAutoStyles -> False, MenuSortingValue -> 1220, FontWeight -> 
       "Bold", Background -> RGBColor[0.88, 0.88, 0.92]], 
      Cell[
       StyleData["CloseArchive"], 
       CellFrame -> {{False, False}, {True, False}}, ShowCellBracket -> 
       Automatic, CellMargins -> {{0, 0}, {5, 10}}, 
       CellBracketOptions -> {"Color" -> RGBColor[0.73, 0.74, 0.84]}, 
       CellGroupingRules -> {"SectionGrouping", 25}, CellFrameMargins -> 2, 
       CellFrameColor -> RGBColor[0.4, 0.4, 0.4], TextAlignment -> Center, 
       MenuSortingValue -> 1230, FontFamily -> "Arial Black", FontSize -> 24, 
       FontWeight -> "Plain", FontSlant -> "Plain", 
       FontVariations -> {"StrikeThrough" -> False, "Underline" -> False}, 
       Background -> RGBColor[0.73, 0.65, 0.61]], 
      Cell[
       StyleData["IncludeArchive"], CellFrame -> {{4, 0}, {False, False}}, 
       ShowCellBracket -> Automatic, 
       CellMargins -> {{81, 100}, {Inherited, Inherited}}, 
       CellBracketOptions -> {"Color" -> RGBColor[0.73, 0.74, 0.84]}, 
       CellFrameColor -> RGBColor[0.55, 0.44, 0.42], 
       CellFrameLabels -> {{"\[RightSkeleton]", None}, {None, None}}, 
       CellFrameLabelMargins -> 25, MenuSortingValue -> 1445], 
      Cell[
       StyleData["ExpressionVariable"], SingleLetterItalics -> True, 
       MultiLetterItalics -> True, FontColor -> RGBColor[0.29, 0.46, 0.6]], 
      Cell[
       StyleData["ExpressionABF"], SingleLetterItalics -> True, 
       MultiLetterItalics -> True, FontColor -> RGBColor[0.29, 0.46, 0.6]], 
      Cell[
       StyleData["ExpressionMeta"], SingleLetterItalics -> True, 
       MultiLetterItalics -> True, FontColor -> RGBColor[0.29, 0.46, 0.6]], 
      Cell[
       CellGroupData[{
         Cell[
          StyleData["AutoParentheses"], SpanMaxSize -> 3, FontOpacity -> 
          0.15], 
         Cell[
          StyleData["AutoParentheses", "Layout"], FontOpacity -> 0], 
         Cell[
          StyleData["AutoParentheses", "SlideShow"], FontOpacity -> 0]}, 
        Open]], 
      Cell[
       CellGroupData[{
         Cell[
          StyleData["Emphasized"], MenuCommandKey -> "E", FontSlant -> 
          "Italic"], 
         Cell[
          StyleData["Emphasized", "SlideShow"], FontSlant -> "Plain", 
          FontColor -> RGBColor[0.36, 0.54, 0.69]]}, Open]], 
      Cell[
       StyleData["GenericButton"], FontFamily -> "Courier", FontSize -> 10, 
       FontWeight -> "Plain", FontSlant -> "Plain", FontTracking -> "Plain", 
       FontVariations -> {
        "Masked" -> False, "Outline" -> False, "Shadow" -> False, 
         "StrikeThrough" -> False, "Underline" -> False}, FontColor -> 
       RGBColor[0.404, 0.43, 0.545]], 
      Cell[
       StyleData["TheoremaForm"], "TwoByteSyntaxCharacterAutoReplacement" -> 
       True, LineSpacing -> {1.25, 0, 2}, SingleLetterItalics -> True, 
       StyleMenuListing -> None, FontFamily -> "Courier"]}, Open]]}, Visible -> 
  False, FrontEndVersion -> "9.0 for Linux x86 (32-bit) (February 7, 2013)", 
  StyleDefinitions -> "StylesheetFormatting.nb"]
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{
 "ID:162303779"->{
  Cell[162221, 3505, 710, 20, 37, "FormalTextInputFormula",
   CellTags->{
    "ID:162303779", 
     "Source:/home/amaletzk/WolframWorkspaces/Base/Theorema/Operators.nb", 
     "16"},
   CellID->162303779]},
 "ID:2046928891"->{
  Cell[161492, 3482, 726, 21, 23, "FormalTextInputFormula",
   CellTags->{
    "ID:2046928891", 
     "Source:/home/amaletzk/WolframWorkspaces/Base/Theorema/Operators.nb", 
     "15"},
   CellID->2046928891]},
 "ID:258074347"->{
  Cell[160663, 3455, 826, 25, 38, "FormalTextInputFormula",
   CellTags->{
    "ID:258074347", 
     "Source:/home/amaletzk/WolframWorkspaces/Base/Theorema/Operators.nb", 
     "14"},
   CellID->258074347]},
 "ID:608479645"->{
  Cell[157571, 3357, 744, 22, 30, "FormalTextInputFormula",
   CellTags->{
    "ID:608479645", 
     "Source:/home/amaletzk/WolframWorkspaces/Base/Theorema/Operators.nb", 
     "10"},
   CellID->608479645]},
 "ID:796304789"->{
  Cell[156624, 3321, 944, 34, 23, "FormalTextInputFormula",
   CellTags->{
    "ID:796304789", 
     "Source:/home/amaletzk/WolframWorkspaces/Base/Theorema/Operators.nb", 
     "9"},
   CellID->796304789]},
 "ID:808160758"->{
  Cell[159014, 3402, 777, 23, 28, "FormalTextInputFormula",
   CellTags->{
    "ID:808160758", 
     "Source:/home/amaletzk/WolframWorkspaces/Base/Theorema/Operators.nb", 
     "12"},
   CellID->808160758]},
 "ID:856865739"->{
  Cell[159794, 3427, 866, 26, 35, "FormalTextInputFormula",
   CellTags->{
    "ID:856865739", 
     "Source:/home/amaletzk/WolframWorkspaces/Base/Theorema/Operators.nb", 
     "13"},
   CellID->856865739]},
 "ID:897003710"->{
  Cell[155369, 3271, 1252, 48, 32, "FormalTextInputFormula",
   CellTags->{
    "ID:897003710", 
     "Source:/home/amaletzk/WolframWorkspaces/Base/Theorema/Operators.nb", 
     "8"},
   CellID->897003710]},
 "ID:923389678"->{
  Cell[158318, 3381, 693, 19, 21, "FormalTextInputFormula",
   CellTags->{
    "ID:923389678", 
     "Source:/home/amaletzk/WolframWorkspaces/Base/Theorema/Operators.nb", 
     "11"},
   CellID->923389678]},
 "Source:/home/amaletzk/WolframWorkspaces/Base/Theorema/Operators.nb"->{
  Cell[155369, 3271, 1252, 48, 32, "FormalTextInputFormula",
   CellTags->{
    "ID:897003710", 
     "Source:/home/amaletzk/WolframWorkspaces/Base/Theorema/Operators.nb", 
     "8"},
   CellID->897003710],
  Cell[156624, 3321, 944, 34, 23, "FormalTextInputFormula",
   CellTags->{
    "ID:796304789", 
     "Source:/home/amaletzk/WolframWorkspaces/Base/Theorema/Operators.nb", 
     "9"},
   CellID->796304789],
  Cell[157571, 3357, 744, 22, 30, "FormalTextInputFormula",
   CellTags->{
    "ID:608479645", 
     "Source:/home/amaletzk/WolframWorkspaces/Base/Theorema/Operators.nb", 
     "10"},
   CellID->608479645],
  Cell[158318, 3381, 693, 19, 21, "FormalTextInputFormula",
   CellTags->{
    "ID:923389678", 
     "Source:/home/amaletzk/WolframWorkspaces/Base/Theorema/Operators.nb", 
     "11"},
   CellID->923389678],
  Cell[159014, 3402, 777, 23, 28, "FormalTextInputFormula",
   CellTags->{
    "ID:808160758", 
     "Source:/home/amaletzk/WolframWorkspaces/Base/Theorema/Operators.nb", 
     "12"},
   CellID->808160758],
  Cell[159794, 3427, 866, 26, 35, "FormalTextInputFormula",
   CellTags->{
    "ID:856865739", 
     "Source:/home/amaletzk/WolframWorkspaces/Base/Theorema/Operators.nb", 
     "13"},
   CellID->856865739],
  Cell[160663, 3455, 826, 25, 38, "FormalTextInputFormula",
   CellTags->{
    "ID:258074347", 
     "Source:/home/amaletzk/WolframWorkspaces/Base/Theorema/Operators.nb", 
     "14"},
   CellID->258074347],
  Cell[161492, 3482, 726, 21, 23, "FormalTextInputFormula",
   CellTags->{
    "ID:2046928891", 
     "Source:/home/amaletzk/WolframWorkspaces/Base/Theorema/Operators.nb", 
     "15"},
   CellID->2046928891],
  Cell[162221, 3505, 710, 20, 37, "FormalTextInputFormula",
   CellTags->{
    "ID:162303779", 
     "Source:/home/amaletzk/WolframWorkspaces/Base/Theorema/Operators.nb", 
     "16"},
   CellID->162303779]},
 "10"->{
  Cell[157571, 3357, 744, 22, 30, "FormalTextInputFormula",
   CellTags->{
    "ID:608479645", 
     "Source:/home/amaletzk/WolframWorkspaces/Base/Theorema/Operators.nb", 
     "10"},
   CellID->608479645]},
 "11"->{
  Cell[158318, 3381, 693, 19, 21, "FormalTextInputFormula",
   CellTags->{
    "ID:923389678", 
     "Source:/home/amaletzk/WolframWorkspaces/Base/Theorema/Operators.nb", 
     "11"},
   CellID->923389678]},
 "12"->{
  Cell[159014, 3402, 777, 23, 28, "FormalTextInputFormula",
   CellTags->{
    "ID:808160758", 
     "Source:/home/amaletzk/WolframWorkspaces/Base/Theorema/Operators.nb", 
     "12"},
   CellID->808160758]},
 "13"->{
  Cell[159794, 3427, 866, 26, 35, "FormalTextInputFormula",
   CellTags->{
    "ID:856865739", 
     "Source:/home/amaletzk/WolframWorkspaces/Base/Theorema/Operators.nb", 
     "13"},
   CellID->856865739]},
 "14"->{
  Cell[160663, 3455, 826, 25, 38, "FormalTextInputFormula",
   CellTags->{
    "ID:258074347", 
     "Source:/home/amaletzk/WolframWorkspaces/Base/Theorema/Operators.nb", 
     "14"},
   CellID->258074347]},
 "15"->{
  Cell[161492, 3482, 726, 21, 23, "FormalTextInputFormula",
   CellTags->{
    "ID:2046928891", 
     "Source:/home/amaletzk/WolframWorkspaces/Base/Theorema/Operators.nb", 
     "15"},
   CellID->2046928891]},
 "16"->{
  Cell[162221, 3505, 710, 20, 37, "FormalTextInputFormula",
   CellTags->{
    "ID:162303779", 
     "Source:/home/amaletzk/WolframWorkspaces/Base/Theorema/Operators.nb", 
     "16"},
   CellID->162303779]},
 "8"->{
  Cell[155369, 3271, 1252, 48, 32, "FormalTextInputFormula",
   CellTags->{
    "ID:897003710", 
     "Source:/home/amaletzk/WolframWorkspaces/Base/Theorema/Operators.nb", 
     "8"},
   CellID->897003710]},
 "9"->{
  Cell[156624, 3321, 944, 34, 23, "FormalTextInputFormula",
   CellTags->{
    "ID:796304789", 
     "Source:/home/amaletzk/WolframWorkspaces/Base/Theorema/Operators.nb", 
     "9"},
   CellID->796304789]}
 }
*)
(*CellTagsIndex
CellTagsIndex->{
 {"ID:162303779", 468296, 9854},
 {"ID:2046928891", 468524, 9861},
 {"ID:258074347", 468753, 9868},
 {"ID:608479645", 468980, 9875},
 {"ID:796304789", 469207, 9882},
 {"ID:808160758", 469433, 9889},
 {"ID:856865739", 469660, 9896},
 {"ID:897003710", 469887, 9903},
 {"ID:923389678", 470114, 9910},
 {"Source:/home/amaletzk/WolframWorkspaces/Base/Theorema/Operators.nb", \
470395, 9917},
 {"10", 472269, 9972},
 {"11", 472486, 9979},
 {"12", 472703, 9986},
 {"13", 472920, 9993},
 {"14", 473137, 10000},
 {"15", 473354, 10007},
 {"16", 473573, 10014},
 {"8", 473789, 10021},
 {"9", 474005, 10028}
 }
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[579, 22, 216, 5, 140, "Title",
 CellID->1238768133],
Cell[CellGroupData[{
Cell[820, 31, 112, 2, 81, "Section",
 CellID->647657379],
Cell[CellGroupData[{
Cell[957, 37, 135, 2, 45, "Subsection",
 CellID->2085607210],
Cell[1095, 41, 284, 6, 51, "Text",
 CellID->795956205],
Cell[CellGroupData[{
Cell[1404, 51, 96, 2, 24, "Computation",
 CellID->1748140642],
Cell[1503, 55, 17923, 354, 15, "ComputationInfo",
 CellID->1080769374],
Cell[19429, 411, 127, 3, 17, "ComputationResult",
 CellID->1777760942]
}, Open  ]],
Cell[19571, 417, 408, 8, 31, "Text",
 CellID->1337121975],
Cell[19982, 427, 426, 8, 71, "Text",
 CellID->1539703969],
Cell[CellGroupData[{
Cell[20433, 439, 606, 26, 24, "Computation",
 CellID->939776885],
Cell[21042, 467, 17923, 354, 15, "ComputationInfo",
 CellID->1814341658],
Cell[38968, 823, 234, 7, 17, "ComputationResult",
 CellID->1026884907]
}, Open  ]],
Cell[39217, 833, 401, 11, 31, "Text",
 CellID->354714933]
}, Closed]],
Cell[CellGroupData[{
Cell[39655, 849, 127, 2, 37, "Subsection",
 CellID->616440916],
Cell[39785, 853, 473, 8, 111, "Text",
 CellID->1835082554],
Cell[40261, 863, 396, 8, 51, "Text",
 CellID->1360585262],
Cell[CellGroupData[{
Cell[40682, 875, 169, 4, 24, "Computation",
 CellID->176317227],
Cell[40854, 881, 17923, 354, 15, "ComputationInfo",
 CellID->1150671138],
Cell[58780, 1237, 178, 5, 17, "ComputationResult",
 CellID->1435739548]
}, Open  ]],
Cell[CellGroupData[{
Cell[58995, 1247, 191, 4, 24, "Computation",
 CellID->1257086601],
Cell[59189, 1253, 17922, 354, 15, "ComputationInfo",
 CellID->780948432],
Cell[77114, 1609, 215, 6, 19, "ComputationResult",
 CellID->625377875]
}, Open  ]],
Cell[77344, 1618, 234, 5, 31, "Text",
 CellID->1321878989],
Cell[CellGroupData[{
Cell[77603, 1627, 205, 5, 28, "Computation",
 CellID->1655020978],
Cell[77811, 1634, 17921, 354, 15, "ComputationInfo",
 CellID->173168754],
Cell[95735, 1990, 219, 7, 22, "ComputationResult",
 CellID->1565154760]
}, Open  ]],
Cell[95969, 2000, 154, 4, 31, "Text",
 CellID->1200053661],
Cell[CellGroupData[{
Cell[96148, 2008, 677, 29, 35, "Computation",
 CellID->1503278322],
Cell[96828, 2039, 17923, 354, 15, "ComputationInfo",
 CellID->1938319905],
Cell[114754, 2395, 305, 9, 28, "ComputationResult",
 CellID->2115659732]
}, Open  ]],
Cell[115074, 2407, 406, 11, 51, "Text",
 CellID->812755896],
Cell[CellGroupData[{
Cell[115505, 2422, 210, 6, 30, "Computation",
 CellID->2103096200],
Cell[115718, 2430, 17922, 354, 15, "ComputationInfo",
 CellID->144821867],
Cell[133643, 2786, 288, 11, 25, "ComputationResult",
 CellID->1669621635]
}, Open  ]],
Cell[CellGroupData[{
Cell[133968, 2802, 135, 2, 35, "Subsubsection",
 CellID->1474555549],
Cell[134106, 2806, 209, 5, 31, "Text",
 CellID->687839967],
Cell[134318, 2813, 754, 22, 54, "Text",
 CellID->204276250],
Cell[135075, 2837, 423, 8, 51, "Text",
 CellID->1484144757],
Cell[CellGroupData[{
Cell[135523, 2849, 146, 3, 24, "Computation",
 CellID->213686899],
Cell[135672, 2854, 17921, 354, 15, "ComputationInfo",
 CellID->44267110],
Cell[153596, 3210, 155, 4, 17, "ComputationResult",
 CellID->1831925414]
}, Open  ]],
Cell[153766, 3217, 127, 2, 31, "Text",
 CellID->1141780532],
Cell[153896, 3221, 276, 7, 31, "Text",
 CellID->2110834023]
}, Closed]]
}, Closed]]
}, Closed]],
Cell[CellGroupData[{
Cell[154233, 3235, 167, 3, 51, "Section",
 CellID->397934377],
Cell[154403, 3240, 321, 6, 51, "Text",
 CellID->1676143495],
Cell[CellGroupData[{
Cell[154749, 3250, 185, 3, 45, "Subsection",
 CellID->1574104947],
Cell[154937, 3255, 88, 2, 12, "OpenEnvironment",
 CellID->915606070],
Cell[CellGroupData[{
Cell[155050, 3261, 316, 8, 40, "EnvironmentHeader",
 CellID->2118760874],
Cell[155369, 3271, 1252, 48, 32, "FormalTextInputFormula",
 CellTags->{
  "ID:897003710", 
   "Source:/home/amaletzk/WolframWorkspaces/Base/Theorema/Operators.nb", "8"},
 
 CellID->897003710],
Cell[156624, 3321, 944, 34, 23, "FormalTextInputFormula",
 CellTags->{
  "ID:796304789", 
   "Source:/home/amaletzk/WolframWorkspaces/Base/Theorema/Operators.nb", "9"},
 
 CellID->796304789],
Cell[157571, 3357, 744, 22, 30, "FormalTextInputFormula",
 CellTags->{
  "ID:608479645", 
   "Source:/home/amaletzk/WolframWorkspaces/Base/Theorema/Operators.nb", "10"},
 CellID->608479645],
Cell[158318, 3381, 693, 19, 21, "FormalTextInputFormula",
 CellTags->{
  "ID:923389678", 
   "Source:/home/amaletzk/WolframWorkspaces/Base/Theorema/Operators.nb", "11"},
 CellID->923389678],
Cell[159014, 3402, 777, 23, 28, "FormalTextInputFormula",
 CellTags->{
  "ID:808160758", 
   "Source:/home/amaletzk/WolframWorkspaces/Base/Theorema/Operators.nb", "12"},
 CellID->808160758],
Cell[159794, 3427, 866, 26, 35, "FormalTextInputFormula",
 CellTags->{
  "ID:856865739", 
   "Source:/home/amaletzk/WolframWorkspaces/Base/Theorema/Operators.nb", "13"},
 CellID->856865739],
Cell[160663, 3455, 826, 25, 38, "FormalTextInputFormula",
 CellTags->{
  "ID:258074347", 
   "Source:/home/amaletzk/WolframWorkspaces/Base/Theorema/Operators.nb", "14"},
 CellID->258074347],
Cell[161492, 3482, 726, 21, 23, "FormalTextInputFormula",
 CellTags->{
  "ID:2046928891", 
   "Source:/home/amaletzk/WolframWorkspaces/Base/Theorema/Operators.nb", "15"},
 CellID->2046928891],
Cell[162221, 3505, 710, 20, 37, "FormalTextInputFormula",
 CellTags->{
  "ID:162303779", 
   "Source:/home/amaletzk/WolframWorkspaces/Base/Theorema/Operators.nb", "16"},
 CellID->162303779],
Cell[162934, 3527, 65, 1, 24, "EndEnvironmentMarker",
 CellID->236100166]
}, Open  ]],
Cell[163014, 3531, 49, 1, 16, "CloseEnvironment",
 CellID->2066566912]
}, Closed]],
Cell[CellGroupData[{
Cell[163100, 3537, 152, 3, 37, "Subsection",
 CellID->1915999289],
Cell[CellGroupData[{
Cell[163277, 3544, 308, 9, 39, "Computation",
 CellID->969904702],
Cell[163588, 3555, 16536, 331, 15, "ComputationInfo",
 CellID->39175054],
Cell[180127, 3888, 438, 12, 34, "ComputationResult",
 CellID->200612129]
}, Open  ]],
Cell[CellGroupData[{
Cell[180602, 3905, 900, 16, 26, "Computation",
 CellID->1659676471],
Cell[181505, 3923, 16537, 331, 15, "ComputationInfo",
 CellID->1414223919],
Cell[198045, 4256, 525, 12, 21, "ComputationResult",
 CellID->1911387542]
}, Open  ]],
Cell[CellGroupData[{
Cell[198607, 4273, 316, 7, 32, "Computation",
 CellID->1885210448],
Cell[198926, 4282, 16537, 331, 15, "ComputationInfo",
 CellID->667675291],
Cell[215466, 4615, 561, 15, 30, "ComputationResult",
 CellID->1051433415]
}, Open  ]],
Cell[CellGroupData[{
Cell[216064, 4635, 274, 6, 24, "Computation",
 CellID->808578877],
Cell[216341, 4643, 16538, 331, 15, "ComputationInfo",
 CellID->1628665526],
Cell[232882, 4976, 358, 8, 17, "ComputationResult",
 CellID->1798898406]
}, Open  ]],
Cell[CellGroupData[{
Cell[233277, 4989, 744, 23, 33, "Computation",
 CellID->99700712],
Cell[234024, 5014, 16538, 331, 15, "ComputationInfo",
 CellID->1720991765],
Cell[250565, 5347, 398, 12, 30, "ComputationResult",
 CellID->1079149365]
}, Open  ]],
Cell[CellGroupData[{
Cell[251000, 5364, 263, 9, 40, "Computation",
 CellID->1285921573],
Cell[251266, 5375, 16537, 331, 15, "ComputationInfo",
 CellID->494647160],
Cell[267806, 5708, 234, 7, 28, "ComputationResult",
 CellID->1091497630]
}, Open  ]],
Cell[CellGroupData[{
Cell[268077, 5720, 314, 8, 31, "Computation",
 CellID->1108750292],
Cell[268394, 5730, 16538, 331, 15, "ComputationInfo",
 CellID->1436278900],
Cell[284935, 6063, 319, 8, 26, "ComputationResult",
 CellID->6199547]
}, Open  ]],
Cell[CellGroupData[{
Cell[285291, 6076, 161, 5, 24, "Computation",
 CellID->1833136318],
Cell[285455, 6083, 16538, 331, 15, "ComputationInfo",
 CellID->1489184765],
Cell[301996, 6416, 166, 4, 17, "ComputationResult",
 CellID->826905417]
}, Open  ]],
Cell[CellGroupData[{
Cell[302199, 6425, 341, 7, 24, "Computation",
 CellID->1643395444],
Cell[302543, 6434, 16538, 331, 15, "ComputationInfo",
 CellID->1085987582],
Cell[319084, 6767, 473, 10, 17, "ComputationResult",
 CellID->1368790579]
}, Open  ]],
Cell[CellGroupData[{
Cell[319594, 6782, 181, 4, 24, "Computation",
 CellID->1865574032],
Cell[319778, 6788, 16538, 331, 15, "ComputationInfo",
 CellID->1391111234],
Cell[336319, 7121, 227, 6, 19, "ComputationResult",
 CellID->383244644]
}, Open  ]],
Cell[CellGroupData[{
Cell[336583, 7132, 170, 4, 38, "Computation",
 CellID->1621983900],
Cell[336756, 7138, 16538, 331, 15, "ComputationInfo",
 CellID->1092143830],
Cell[353297, 7471, 201, 5, 34, "ComputationResult",
 CellID->790789736]
}, Open  ]],
Cell[CellGroupData[{
Cell[353535, 7481, 639, 14, 24, "Computation",
 CellID->909996593],
Cell[354177, 7497, 16537, 331, 15, "ComputationInfo",
 CellID->542266795],
Cell[370717, 7830, 650, 15, 17, "ComputationResult",
 CellID->358559730]
}, Open  ]],
Cell[CellGroupData[{
Cell[371404, 7850, 229, 6, 34, "Computation",
 CellID->286718588],
Cell[371636, 7858, 16537, 331, 15, "ComputationInfo",
 CellID->1118984722],
Cell[388176, 8191, 264, 8, 29, "ComputationResult",
 CellID->211267502]
}, Open  ]],
Cell[CellGroupData[{
Cell[388477, 8204, 202, 4, 37, "Computation",
 CellID->738819620],
Cell[388682, 8210, 16883, 336, 15, "ComputationInfo",
 CellID->1634809851],
Cell[405568, 8548, 338, 11, 30, "ComputationResult",
 CellID->1919213652]
}, Open  ]],
Cell[CellGroupData[{
Cell[405943, 8564, 154, 3, 24, "Computation",
 CellID->785212987],
Cell[406100, 8569, 16882, 336, 15, "ComputationInfo",
 CellID->919021924],
Cell[422985, 8907, 162, 4, 17, "ComputationResult",
 CellID->2144163423]
}, Open  ]],
Cell[CellGroupData[{
Cell[423184, 8916, 418, 18, 24, "Computation",
 CellID->340631633],
Cell[423605, 8936, 17921, 354, 15, "ComputationInfo",
 CellID->19638021],
Cell[441529, 9292, 202, 4, 17, "ComputationResult",
 CellID->1513839716]
}, Open  ]]
}, Closed]]
}, Closed]]
}, Open  ]]
}
]
*)

(* End of internal cache information *)

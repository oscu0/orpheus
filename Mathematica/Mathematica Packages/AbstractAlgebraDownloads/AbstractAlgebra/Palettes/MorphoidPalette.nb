(* Content-type: application/mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 6.0' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       145,          7]
NotebookDataLength[     47743,       1362]
NotebookOptionsPosition[     43922,       1219]
NotebookOutlinePosition[     45037,       1265]
CellTagsIndexPosition[     44906,       1258]
WindowFrame->Normal
ContainsDynamic->False*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell["Code to Initialize", "Section",
 ShowCellBracket->False,
 CellOpen->False,
 InitializationCell->True],

Cell[BoxData[
 RowBox[{
  RowBox[{"FormIncompleteMorphoid", "[", 
   RowBox[{"rules_List", ",", "S1_", ",", "S2_", ",", 
    RowBox[{"opts___", "?", "OptionQ"}]}], "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"head1", "=", 
       RowBox[{"Head", "[", "S1", "]"}]}], ",", 
      RowBox[{"head2", "=", 
       RowBox[{"Head", "[", "S2", "]"}]}], ",", "structure", ",", 
      RowBox[{"ff", "=", 
       RowBox[{"FormatFunction", "/.", 
        RowBox[{"Flatten", "[", 
         RowBox[{"{", 
          RowBox[{"opts", ",", 
           RowBox[{"Options", "[", "FormMorphoid", "]"}]}], "}"}], 
         "]"}]}]}]}], "}"}], ",", 
    RowBox[{"If", "[", 
     RowBox[{
      RowBox[{"head1", "===", "head2"}], ",", 
      RowBox[{
       RowBox[{"structure", "=", 
        RowBox[{"Switch", "[", 
         RowBox[{
         "head1", ",", "AbstractAlgebra`Master`Private`groupoid", ",", 
          "Group", ",", "AbstractAlgebra`Master`Private`ringoid", ",", 
          "Ring"}], "]"}]}], ";", 
       RowBox[{"AbstractAlgebra`Morphisms`Private`morphoid", "[", 
        RowBox[{
        "rules", ",", "S1", ",", "S2", ",", "structure", ",", "Rule", ",", 
         RowBox[{"FormatFunction", "\[Rule]", "ff"}]}], "]"}]}], ",", 
      "$Failed"}], "]"}]}], "]"}]}]], "Input",
 ShowCellBracket->False,
 CellOpen->False,
 InitializationCell->True],

Cell[BoxData[
 RowBox[{
  RowBox[{"ElementsToBoxes", "[", "G_", "]"}], " ", ":=", " ", 
  RowBox[{"Map", "[", 
   RowBox[{"ToBoxes", ",", 
    RowBox[{"Elements", "[", "G", "]"}]}], "]"}]}]], "Input",
 ShowCellBracket->False,
 CellOpen->False,
 InitializationCell->True],

Cell[BoxData[
 RowBox[{
  RowBox[{"ElementsToButtons", "[", 
   RowBox[{
   "G_", ",", "label_String", ",", "butsrc_", ",", "butfnc_", ",", 
    "butback_"}], "]"}], ":=", 
  RowBox[{"BoxData", "[", 
   RowBox[{"RowBox", "[", 
    RowBox[{"Join", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"StyleBox", "[", 
        RowBox[{"label", ",", 
         RowBox[{"FontWeight", "\[Rule]", "\"\<Bold\>\""}]}], "]"}], "}"}], 
      ",", 
      RowBox[{
       RowBox[{"(", 
        RowBox[{
         RowBox[{"ButtonBox", "[", 
          RowBox[{
           RowBox[{"ToBoxes", "[", "#1", "]"}], ",", 
           RowBox[{"ButtonSource", "\[Rule]", "butsrc"}], ",", 
           RowBox[{"ButtonFunction", "\[RuleDelayed]", "butfnc"}], ",", 
           RowBox[{"Evaluator", "\[Rule]", "\"\<Automatic\>\""}], ",", 
           RowBox[{"Background", "\[Rule]", "butback"}]}], "]"}], "&"}], 
        ")"}], "/@", 
       RowBox[{"Elements", "[", "G", "]"}]}]}], "]"}], "]"}], 
   "]"}]}]], "Input",
 ShowCellBracket->False,
 CellOpen->False,
 InitializationCell->True],

Cell[BoxData[
 RowBox[{
  RowBox[{"Init", "[", "G_", "]"}], " ", ":=", 
  RowBox[{"(", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"$DomainElementsRemaining", "=", 
     RowBox[{"Elements", "[", "G", "]"}]}], ";", "\[IndentingNewLine]", 
    RowBox[{"$DomainNextQ", " ", "=", " ", "True"}], ";", 
    "\[IndentingNewLine]", 
    RowBox[{"myMint", " ", "=", " ", 
     RowBox[{"RGBColor", "[", 
      RowBox[{"0.74", ",", " ", "0.99", ",", " ", "0.79"}], "]"}]}], ";", 
    "\[IndentingNewLine]", 
    RowBox[{"myPink", " ", "=", " ", 
     RowBox[{"RGBColor", "[", 
      RowBox[{"1.", ",", "0.753", ",", "0.796"}], "]"}]}], ";", 
    "\[IndentingNewLine]", 
    RowBox[{"$CurrentMapping", " ", "=", " ", 
     RowBox[{"{", "}"}]}], ";"}], "\[IndentingNewLine]", ")"}]}]], "Input",
 ShowCellBracket->False,
 CellOpen->False,
 InitializationCell->True],

Cell[BoxData[
 RowBox[{
  RowBox[{"SetCellActiveness", "[", 
   RowBox[{"tag_", ",", "activness_"}], "]"}], " ", ":=", " ", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"nb", " ", "=", " ", 
       RowBox[{"InputNotebook", "[", "]"}]}], ",", "in"}], "}"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"NotebookFind", "[", 
      RowBox[{"nb", ",", " ", "tag", ",", "All", ",", " ", "CellTags"}], 
      "]"}], ";", "\[IndentingNewLine]", 
     RowBox[{"in", "=", 
      RowBox[{
       RowBox[{"NotebookRead", "[", "nb", "]"}], "/.", 
       RowBox[{
        RowBox[{"Cell", "[", 
         RowBox[{"data_", ",", "opts1___", ",", 
          RowBox[{"Enabled", "\[Rule]", "state_"}], ",", "opts2___"}], "]"}], 
        " ", "\[Rule]", 
        RowBox[{"Cell", "[", 
         RowBox[{"data", ",", "opts1", ",", " ", 
          RowBox[{"Enabled", "\[Rule]", "activness"}], ",", "opts2"}], 
         "]"}]}]}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"NotebookWrite", "[", 
      RowBox[{"nb", ",", "in"}], "]"}]}]}], "\[IndentingNewLine]", 
   "]"}]}]], "Input",
 ShowCellBracket->False,
 CellOpen->False,
 InitializationCell->True],

Cell[BoxData[
 RowBox[{
  RowBox[{"PrintMessage", "[", 
   RowBox[{"nb_", ",", "tag_", ",", "mess_"}], "]"}], " ", ":=", " ", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", "\[IndentingNewLine]", "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"NotebookFind", "[", 
      RowBox[{"nb", ",", " ", "tag", ",", "All", ",", " ", "CellTags"}], 
      "]"}], ";", "\[IndentingNewLine]", 
     RowBox[{"NotebookWrite", "[", 
      RowBox[{"nb", ",", 
       RowBox[{"Cell", "[", 
        RowBox[{
         RowBox[{"TextData", "[", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"StyleBox", "[", 
             RowBox[{"\"\<Message: \>\"", ",", 
              RowBox[{"FontWeight", "\[Rule]", "\"\<Bold\>\""}], ",", " ", 
              RowBox[{"FontColor", "\[Rule]", 
               RowBox[{"RGBColor", "[", 
                RowBox[{"0", ",", "0", ",", "1"}], "]"}]}]}], "]"}], ",", " ",
             "mess"}], "}"}], "]"}], ",", "\"\<Text\>\"", ",", 
         RowBox[{"CellTags", "\[Rule]", "\"\<message\>\""}], ",", 
         RowBox[{"CellFrame", "\[Rule]", "True"}]}], "]"}]}], "]"}]}]}], 
   "\[IndentingNewLine]", "]"}]}]], "Input",
 ShowCellBracket->False,
 CellOpen->False,
 InitializationCell->True],

Cell[BoxData[
 RowBox[{
  RowBox[{"DomainButtonPushed", "[", "el_", "]"}], " ", ":=", " ", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{"If", "[", 
     RowBox[{"$DomainNextQ", ",", 
      RowBox[{
       RowBox[{"$DomainNextQ", " ", "=", " ", "False"}], ";", " ", 
       RowBox[{"(*", " ", 
        RowBox[{
        "set", " ", "to", " ", "False", " ", "since", " ", "we", " ", "next", 
         " ", "need", " ", "to", " ", "hit", " ", "a", " ", "codomain", " ", 
         "element"}], " ", "*)"}], "\[IndentingNewLine]", 
       RowBox[{"MappingPair", " ", "=", " ", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"el", "//", "ToExpression"}], ",", "Null"}], "}"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"$DomainElementsRemaining", " ", "=", " ", 
        RowBox[{"DeleteCases", "[", 
         RowBox[{"$DomainElementsRemaining", ",", 
          RowBox[{"MappingPair", "[", 
           RowBox[{"[", "1", "]"}], "]"}]}], "]"}]}], ";", " ", 
       RowBox[{"(*", " ", 
        RowBox[{
         RowBox[{
         "remove", " ", "selected", " ", "element", " ", "from", " ", 
          "candidates"}], " ", "-", " ", 
         RowBox[{
         "used", " ", "to", " ", "see", " ", "when", " ", "done", " ", 
          "making", " ", "matches"}]}], " ", "*)"}], "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"ChangeBackground", "[", 
         RowBox[{"\"\<domain\>\"", ",", 
          RowBox[{"el", "//", "First"}]}], "]"}], " ", 
        RowBox[{"(*", " ", 
         RowBox[{"Remove", " ", "the", " ", "BoxData", " ", "wrapper"}], " ", 
         "*)"}], "\[IndentingNewLine]", 
        RowBox[{"PrintMessage", "[", 
         RowBox[{
          RowBox[{"InputNotebook", "[", "]"}], ",", "\"\<message\>\"", ",", 
          "\"\<Choose the corresponding codomain element.\>\""}], "]"}]}], 
       ";"}]}], "\[IndentingNewLine]", "]"}]}], "]"}]}]], "Input",
 ShowCellBracket->False,
 CellOpen->False,
 InitializationCell->True],

Cell[BoxData[
 RowBox[{
  RowBox[{"CodomainButtonPushed", "[", "el_", "]"}], " ", ":=", " ", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"partialMorphoid", ",", "wide"}], "}"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{"If", "[", 
     RowBox[{
      RowBox[{"Not", "[", "$DomainNextQ", "]"}], ",", 
      RowBox[{
       RowBox[{"$DomainNextQ", " ", "=", " ", "True"}], ";", " ", 
       RowBox[{"(*", " ", 
        RowBox[{
        "set", " ", "to", " ", "True", " ", "since", " ", "we", " ", "next", 
         " ", "need", " ", "to", " ", "hit", " ", "a", " ", "domain", " ", 
         "element"}], " ", "*)"}], "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"MappingPair", "[", 
         RowBox[{"[", "2", "]"}], "]"}], " ", "=", " ", 
        RowBox[{"el", "//", "ToExpression"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"Count", "[", 
           RowBox[{"$CurrentMapping", ",", 
            RowBox[{"Rule", "[", 
             RowBox[{
              RowBox[{"MappingPair", "[", 
               RowBox[{"[", "1", "]"}], "]"}], ",", "_"}], "]"}]}], "]"}], ">=",
           "1"}], ",", "\[IndentingNewLine]", 
         RowBox[{"$CurrentMapping", "=", 
          RowBox[{"DeleteCases", "[", 
           RowBox[{"$CurrentMapping", ",", 
            RowBox[{"Rule", "[", 
             RowBox[{
              RowBox[{"MappingPair", "[", 
               RowBox[{"[", "1", "]"}], "]"}], ",", "_"}], "]"}]}], "]"}]}]}],
         "]"}], ";", "\[IndentingNewLine]", 
       RowBox[{"AppendTo", "[", 
        RowBox[{"$CurrentMapping", ",", 
         RowBox[{"Rule", "@@", "MappingPair"}]}], "]"}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"$MorphoidComplete", " ", "=", " ", 
        RowBox[{"$DomainElementsRemaining", "===", 
         RowBox[{"{", "}"}]}]}], ";", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"ChangeBackground", "[", 
         RowBox[{"\"\<codomain\>\"", ",", 
          RowBox[{"el", "//", "First"}]}], "]"}], " ", 
        RowBox[{"(*", " ", 
         RowBox[{
         "First", " ", "Removes", " ", "the", " ", "BoxData", " ", 
          "wrapper"}], " ", "*)"}], "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"Not", "[", "$MorphoidComplete", "]"}], ",", 
          RowBox[{"PrintMessage", "[", 
           RowBox[{
            RowBox[{"InputNotebook", "[", "]"}], ",", "\"\<message\>\"", ",", 
            "\"\<Choose a new domain element.\>\""}], "]"}]}], "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"partialMorphoid", "=", 
        RowBox[{"FormIncompleteMorphoid", "[", 
         RowBox[{
         "$CurrentMapping", ",", "$DomainStructure", ",", 
          "$CodomainStructure"}], "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"KillBelowTag", "[", "\"\<codomain\>\"", "]"}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"VisualizeMorphoid", "[", 
        RowBox[{"partialMorphoid", ",", " ", 
         RowBox[{"ColorDomain", " ", "\[Rule]", " ", "Automatic"}]}], "]"}], 
       ";", "\[IndentingNewLine]", 
       RowBox[{"NotebookFind", "[", 
        RowBox[{
         RowBox[{"InputNotebook", "[", "]"}], ",", "\"\<message\>\"", ",", 
         "All", ",", "CellTags"}], "]"}], ";", "\[IndentingNewLine]", 
       RowBox[{"SelectionMove", "[", 
        RowBox[{
         RowBox[{"InputNotebook", "[", "]"}], ",", "Before", ",", "Cell"}], 
        "]"}], ";"}]}], "\[IndentingNewLine]", "]"}]}], "]"}]}]], "Input",
 ShowCellBracket->False,
 CellOpen->False,
 InitializationCell->True],

Cell[BoxData[{
 RowBox[{
  RowBox[{"KillBelowTag", "[", "tag_", "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"nb", "=", 
      RowBox[{"InputNotebook", "[", "]"}]}], "}"}], ",", 
    RowBox[{
     RowBox[{"NotebookFind", "[", 
      RowBox[{"nb", ",", "\"\<codomain\>\"", ",", "All", ",", "CellTags"}], 
      "]"}], ";", "\[IndentingNewLine]", 
     RowBox[{"SelectionMove", "[", 
      RowBox[{"nb", ",", "After", ",", "Cell", ",", 
       StyleBox[
        RowBox[{"AutoScroll", "->", "False"}], "MR"]}], "]"}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"SelectionMove", "[", 
      RowBox[{"nb", ",", "Next", ",", "Cell", ",", 
       StyleBox[
        RowBox[{"AutoScroll", "->", "False"}], "MR"]}], "]"}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"Do", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"SelectionMove", "[", 
         RowBox[{"nb", ",", "Next", ",", "Cell", ",", 
          StyleBox[
           RowBox[{"AutoScroll", "->", "False"}], "MR"]}], "]"}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"NotebookDelete", "[", "nb", "]"}], ";"}], ",", 
       RowBox[{"{", "15", "}"}]}], "]"}], ";"}]}], " ", 
   "]"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{
    "delete", " ", "the", " ", "lines", " ", "of", " ", "the", " ", 
     "visualized", " ", "morphoid"}], ",", " ", 
    RowBox[{
    "incuding", " ", "any", " ", "lines", " ", "containing", " ", "a", " ", 
     "key"}]}], " ", "*)"}]}]}], "Input",
 ShowCellBracket->False,
 CellOpen->False,
 InitializationCell->True],

Cell[BoxData[
 RowBox[{
  RowBox[{"WriteButtons", "[", "nb_", "]"}], " ", ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", " ", "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{"NotebookWrite", "[", 
     RowBox[{"nb", ",", 
      RowBox[{"Cell", "[", 
       RowBox[{
        RowBox[{"BoxData", "[", 
         RowBox[{"GridBox", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{"ButtonBox", "[", 
               RowBox[{"\"\<Return a Morphoid\>\"", ",", 
                RowBox[{"ButtonFunction", "\[RuleDelayed]", 
                 RowBox[{"(", 
                  RowBox[{"MakeMorphoid", "[", "]"}], ")"}]}], ",", 
                RowBox[{"Evaluator", "\[Rule]", "\"\<Automatic\>\""}]}], 
               "]"}], "}"}], ",", 
             RowBox[{"{", 
              RowBox[{"ButtonBox", "[", 
               RowBox[{"\"\<Check to see if a morphism\>\"", ",", 
                RowBox[{"ButtonFunction", "\[RuleDelayed]", 
                 RowBox[{"(", 
                  RowBox[{"CheckMorphismQ", "[", "]"}], ")"}]}], ",", 
                RowBox[{"Evaluator", "\[Rule]", "\"\<Automatic\>\""}]}], 
               "]"}], "}"}], ",", 
             RowBox[{"{", 
              RowBox[{"ButtonBox", "[", 
               RowBox[{"\"\<Check if morphism, with visualization\>\"", ",", 
                RowBox[{"ButtonFunction", "\[RuleDelayed]", 
                 RowBox[{"(", 
                  RowBox[{"CheckMorphismVisQ", "[", "]"}], ")"}]}], ",", 
                RowBox[{"Evaluator", "\[Rule]", "\"\<Automatic\>\""}]}], 
               "]"}], "}"}]}], "}"}], ",", " ", 
           RowBox[{"RowLines", "->", "True"}], ",", 
           RowBox[{"ColumnLines", "->", "True"}], ",", 
           RowBox[{"RowSpacings", "\[Rule]", "0"}]}], "]"}], "]"}], ",", 
        "\"\<Input\>\"", ",", 
        RowBox[{"Enabled", "\[Rule]", "True"}], ",", 
        RowBox[{"CellTags", "\[Rule]", "\"\<buttons\>\""}]}], "]"}]}], 
     "]"}]}], "\[IndentingNewLine]", "]"}]}]], "Input",
 ShowCellBracket->False,
 CellOpen->False,
 InitializationCell->True],

Cell[BoxData[
 RowBox[{
  RowBox[{"MainButtonAction", "[", "cont_", "]"}], " ", ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"nb", " ", "=", " ", 
      RowBox[{"InputNotebook", "[", "]"}]}], "}"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"NotebookFind", "[", 
      RowBox[{"nb", ",", "\"\<buttons\>\"", ",", "All", ",", "CellTags"}], 
      "]"}], ";", "\[IndentingNewLine]", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{"Not", "[", "$MorphoidComplete", "]"}], ",", 
       RowBox[{"PrintMessage", "[", 
        RowBox[{
        "nb", ",", "\"\<message\>\"", ",", 
         "\"\<You must first complete the map by assigning images to all the \
domain elements.\>\""}], "]"}], ",", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"NotebookFind", "[", 
         RowBox[{"nb", ",", "\"\<buttons\>\"", ",", "All", ",", "CellTags"}], 
         "]"}], ";", "\[IndentingNewLine]", 
        RowBox[{"SelectionMove", "[", 
         RowBox[{"nb", ",", "After", ",", " ", "Notebook"}], "]"}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"NotebookWrite", "[", 
         RowBox[{"nb", ",", 
          RowBox[{"Cell", "[", 
           RowBox[{"cont", ",", "\"\<Input\>\""}], "]"}]}], "]"}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"NewMorphism", " ", "=", " ", 
         RowBox[{"FormMorphoid", "[", 
          RowBox[{
          "$CurrentMapping", ",", "$DomainStructure", ",", 
           "$CodomainStructure"}], "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"SelectionMove", "[", 
         RowBox[{"nb", ",", "All", ",", "CellContents"}], "]"}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"SelectionEvaluateCreateCell", "[", 
         RowBox[{"nb", ",", "After"}], "]"}]}]}], "]"}]}]}], 
   "\[IndentingNewLine]", "]"}]}]], "Input",
 ShowCellBracket->False,
 CellOpen->False,
 InitializationCell->True],

Cell[BoxData[
 RowBox[{
  RowBox[{"MakeMorphoid", "[", "]"}], " ", ":=", " ", 
  RowBox[{"MainButtonAction", "[", "\"\<NewMorphism\>\"", "]"}]}]], "Input",
 ShowCellBracket->False,
 CellOpen->False,
 InitializationCell->True],

Cell[BoxData[
 RowBox[{
  RowBox[{"CheckMorphismQ", "[", "]"}], " ", ":=", " ", 
  RowBox[{
  "MainButtonAction", "[", "\"\<MorphismQ[NewMorphism]\>\"", "]"}]}]], "Input",\

 ShowCellBracket->False,
 CellOpen->False,
 InitializationCell->True],

Cell[BoxData[
 RowBox[{
  RowBox[{"CheckMorphismVisQ", "[", "]"}], " ", ":=", " ", 
  RowBox[{
  "MainButtonAction", "[", "\"\<MorphismQ[NewMorphism, Mode->Visual]\>\"", 
   "]"}]}]], "Input",
 ShowCellBracket->False,
 CellOpen->False,
 InitializationCell->True],

Cell[BoxData[
 RowBox[{
  RowBox[{"ChangeBackground", "[", 
   RowBox[{"tag_", ",", "content_"}], "]"}], " ", ":=", " ", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"nb", " ", "=", " ", 
       RowBox[{"InputNotebook", "[", "]"}]}], ",", "in"}], "}"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"NotebookFind", "[", 
      RowBox[{"nb", ",", " ", "tag", ",", "All", ",", " ", "CellTags"}], 
      "]"}], ";", "\[IndentingNewLine]", 
     RowBox[{"in", "=", 
      RowBox[{
       RowBox[{"NotebookRead", "[", "nb", "]"}], "/.", 
       RowBox[{
        RowBox[{"ButtonBox", "[", 
         RowBox[{"content", ",", "a___", ",", " ", 
          RowBox[{"Background", "\[Rule]", "color_"}], ",", "b___"}], "]"}], 
        "\[Rule]", 
        RowBox[{"ButtonBox", "[", 
         RowBox[{"content", ",", "a", " ", ",", " ", 
          RowBox[{"Background", "\[Rule]", "myPink"}], ",", "b"}], 
         "]"}]}]}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"NotebookWrite", "[", 
      RowBox[{"nb", ",", "in"}], "]"}]}]}], "\[IndentingNewLine]", 
   "]"}]}]], "Input",
 ShowCellBracket->False,
 CellOpen->False,
 InitializationCell->True],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"WriteDomain", "[", 
    RowBox[{"nb_", ",", "G_"}], "]"}], ":=", 
   RowBox[{"NotebookWrite", "[", 
    RowBox[{"nb", ",", 
     RowBox[{"Cell", "[", 
      RowBox[{
       RowBox[{"ElementsToButtons", "[", 
        RowBox[{"G", ",", " ", 
         RowBox[{"\"\<Domain (\>\"", "<>", 
          RowBox[{"GroupoidName", "[", "G", "]"}], "<>", "\"\<): \>\""}], ",",
          "ButtonContents", ",", 
         RowBox[{
          RowBox[{"DomainButtonPushed", "[", "#", "]"}], "&"}], ",", 
         "myMint"}], "]"}], ",", "\"\<Text\>\"", ",", " ", 
       RowBox[{"Enabled", "\[Rule]", "True"}], ",", " ", 
       RowBox[{"CellFrame", "\[Rule]", "True"}], ",", 
       RowBox[{"CellTags", "\[Rule]", "\"\<domain\>\""}]}], "]"}]}], "]"}]}], 
  ";"}]], "Input",
 ShowCellBracket->False,
 CellOpen->False,
 InitializationCell->True],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"WriteCodomain", "[", 
    RowBox[{"nb_", ",", "G_"}], "]"}], ":=", 
   RowBox[{"NotebookWrite", "[", 
    RowBox[{"nb", ",", 
     RowBox[{"Cell", "[", 
      RowBox[{
       RowBox[{"ElementsToButtons", "[", 
        RowBox[{"G", ",", " ", 
         RowBox[{"\"\<Codomain (\>\"", "<>", 
          RowBox[{"GroupoidName", "[", "G", "]"}], "<>", "\"\<): \>\""}], ",",
          "ButtonContents", ",", 
         RowBox[{
          RowBox[{"CodomainButtonPushed", "[", "#", "]"}], "&"}], ",", " ", 
         "myMint"}], "]"}], ",", "\"\<Text\>\"", ",", 
       RowBox[{"CellFrame", "\[Rule]", "True"}], ",", " ", 
       RowBox[{"Enabled", "\[Rule]", "True"}], ",", " ", 
       RowBox[{"CellTags", "\[Rule]", "\"\<codomain\>\""}]}], "]"}]}], 
    "]"}]}], ";"}]], "Input",
 ShowCellBracket->False,
 CellOpen->False,
 InitializationCell->True],

Cell[BoxData[{
 RowBox[{
  RowBox[{"ToggleDomCod", "[", "next_", "]"}], " ", ":=", " ", 
  RowBox[{"(", 
   RowBox[{
    RowBox[{"$CurrentSet", " ", "=", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{"next", " ", "===", " ", "\"\<domain\>\""}], ",", 
       "\"\<codomain\>\"", ",", "\"\<domain\>\""}], "]"}]}], ";", 
    "\[IndentingNewLine]", 
    RowBox[{"PrintMessage", "[", 
     RowBox[{
      RowBox[{"InputNotebook", "[", "]"}], ",", "\"\<message\>\"", ",", " ", 
      RowBox[{
      "\"\<Enter the \>\"", "<>", "$CurrentSet", "<>", 
       "\"\< by typing or choosing a group (or a group family and an \
index).\>\""}]}], "]"}], ";"}], ")"}]}], "\[IndentingNewLine]", 
 RowBox[{" "}]}], "Input",
 ShowCellBracket->False,
 CellOpen->False,
 InitializationCell->True],

Cell[BoxData[
 RowBox[{
  RowBox[{"$CurrentSet", "=", "\"\<domain\>\""}], ";"}]], "Input",
 ShowCellBracket->False,
 CellOpen->False,
 InitializationCell->True],

Cell[BoxData[
 RowBox[{
  RowBox[{"PostToBox", "[", 
   RowBox[{"tag_", ",", "content_", ",", "boxTooQ_"}], "]"}], " ", ":=", " ", 
  
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", "\[IndentingNewLine]", 
     RowBox[{"nb", " ", "=", " ", 
      RowBox[{"InputNotebook", "[", "]"}]}], "}"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"ToggleDomCod", "[", "tag", "]"}], ";", "\[IndentingNewLine]", 
     RowBox[{"NotebookFind", "[", 
      RowBox[{"nb", ",", " ", 
       RowBox[{"tag", "<>", "\"\<box\>\""}], ",", "All", ",", " ", 
       "CellTags"}], "]"}], ";", "\[IndentingNewLine]", 
     RowBox[{"SelectionMove", "[", 
      RowBox[{"nb", ",", "All", ",", "CellContents"}], "]"}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"NotebookDelete", "[", "nb", "]"}], ";", "\[IndentingNewLine]", 
     RowBox[{"NotebookWrite", "[", 
      RowBox[{"nb", ",", "content"}], "]"}], ";", "\[IndentingNewLine]", 
     RowBox[{"If", "[", 
      RowBox[{"boxTooQ", ",", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"SelectionMove", "[", 
         RowBox[{"nb", ",", "Before", ",", "CellContents"}], "]"}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"NotebookFind", "[", 
         RowBox[{
         "nb", ",", " ", "\"\<\[Placeholder]\>\"", ",", "Next", ",", 
          "CellContents"}], "]"}]}]}], "]"}], ";"}]}], "\[IndentingNewLine]", 
   "]"}]}]], "Input",
 ShowCellBracket->False,
 CellOpen->False,
 InitializationCell->True],

Cell[BoxData[
 RowBox[{
  RowBox[{"myGroupoidQ", "[", "G_", "]"}], ":=", 
  RowBox[{
   RowBox[{"(", 
    RowBox[{
     RowBox[{
      RowBox[{"Head", "[", "G", "]"}], "===", "Groupoid"}], "||", 
     RowBox[{
      RowBox[{"Head", "[", "G", "]"}], "===", 
      "AbstractAlgebra`Master`Private`groupoid"}]}], ")"}], "&&", 
   RowBox[{
    RowBox[{"Head", "[", 
     RowBox[{"First", "[", "G", "]"}], "]"}], "===", "List"}]}]}]], "Input",
 ShowCellBracket->False,
 CellOpen->False,
 InitializationCell->True],

Cell[BoxData[
 RowBox[{
  RowBox[{"SetsOKQ", "[", "]"}], " ", ":=", "  ", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"nb", " ", "=", " ", 
       RowBox[{"InputNotebook", "[", "]"}]}], ",", " ", "grp", ",", "OK"}], 
     "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"NotebookFind", "[", 
      RowBox[{
      "nb", ",", " ", "\"\<domainbox\>\"", ",", "All", ",", " ", "CellTags"}],
       "]"}], ";", "\[IndentingNewLine]", 
     RowBox[{"SelectionMove", "[", 
      RowBox[{"nb", ",", "All", ",", "CellContents"}], "]"}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"grp", " ", "=", " ", 
      RowBox[{
       RowBox[{"NotebookRead", "[", "nb", "]"}], "//", "ToExpression"}]}], 
     ";", "\[IndentingNewLine]", 
     RowBox[{"$DomainStructure", " ", "=", " ", "grp"}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"OK", " ", "=", " ", 
      RowBox[{"myGroupoidQ", "[", "grp", "]"}]}], ";", "\[IndentingNewLine]", 
     
     RowBox[{"NotebookFind", "[", 
      RowBox[{
      "nb", ",", " ", "\"\<codomainbox\>\"", ",", "All", ",", " ", 
       "CellTags"}], "]"}], ";", "\[IndentingNewLine]", 
     RowBox[{"SelectionMove", "[", 
      RowBox[{"nb", ",", "All", ",", "CellContents"}], "]"}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"grp", " ", "=", " ", 
      RowBox[{
       RowBox[{"NotebookRead", "[", "nb", "]"}], "//", "ToExpression"}]}], 
     ";", "\[IndentingNewLine]", 
     RowBox[{"$CodomainStructure", " ", "=", " ", "grp"}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"OK", " ", "=", " ", 
      RowBox[{"OK", " ", "&&", " ", 
       RowBox[{"myGroupoidQ", "[", "grp", "]"}]}]}]}]}], 
   "\[IndentingNewLine]", "]"}]}]], "Input",
 ShowCellBracket->False,
 CellOpen->False,
 InitializationCell->True],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"SetupPalette", "[", "]"}], ":=", " ", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"nb", "=", 
        RowBox[{"InputNotebook", "[", "]"}]}], ",", "sr"}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"sr", "=", 
       RowBox[{"ScreenRectangle", " ", "/.", 
        RowBox[{"Options", "[", "nb", "]"}]}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"SetsOKQ", "[", "]"}], ",", 
        RowBox[{
         RowBox[{"nb", " ", "=", 
          RowBox[{"NotebookPut", "[", 
           RowBox[{"Notebook", "[", 
            RowBox[{
             RowBox[{"{", "}"}], ",", 
             RowBox[{"WindowSize", "\[Rule]", 
              RowBox[{"{", 
               RowBox[{"700", ",", "500"}], "}"}]}], ",", 
             "\[IndentingNewLine]", 
             RowBox[{"WindowTitle", "\[Rule]", "\"\<Make Morphoid\>\""}], ",",
              
             RowBox[{"WindowMargins", "\[Rule]", 
              RowBox[{"{", 
               RowBox[{
                RowBox[{"{", 
                 RowBox[{"10", ",", "Automatic"}], "}"}], ",", 
                RowBox[{"{", 
                 RowBox[{"Automatic", ",", "10"}], "}"}]}], "}"}]}], ",", 
             RowBox[{"CellMargins", "\[Rule]", 
              RowBox[{"{", 
               RowBox[{
                RowBox[{"{", 
                 RowBox[{"0", ",", "0"}], "}"}], ",", 
                RowBox[{"{", 
                 RowBox[{"Inherited", ",", "0"}], "}"}]}], "}"}]}]}], "]"}], 
           "]"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"Init", "[", "$DomainStructure", "]"}], 
          "\[IndentingNewLine]", 
          RowBox[{"NotebookWrite", "[", 
           RowBox[{"nb", ",", 
            RowBox[{"Cell", "[", 
             RowBox[{"\"\< \>\"", ",", "\"\<Text\>\"", ",", 
              RowBox[{"CellTags", "\[Rule]", "\"\<message\>\""}]}], "]"}]}], 
           "]"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"PrintMessage", "[", 
          RowBox[{
          "nb", ",", "\"\<message\>\"", ",", 
           "\"\<Choose a domain element.\>\""}], "]"}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"WriteDomain", "[", 
          RowBox[{"nb", ",", "$DomainStructure"}], "]"}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"WriteCodomain", "[", 
          RowBox[{"nb", ",", "$CodomainStructure"}], "]"}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"WriteButtons", "[", "nb", "]"}], ";"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"PrintMessage", "[", 
         RowBox[{
          RowBox[{"InputNotebook", "[", "]"}], ",", "\"\<message\>\"", ",", 
          "\"\<One of your sets are not properly defined.\>\""}], "]"}]}], 
       "]"}]}]}], "\[IndentingNewLine]", "]"}]}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"groupPalette", " ", "=", " ", 
   RowBox[{"Grid", "[", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", "\n", "    ", 
       RowBox[{
        RowBox[{"Button", "[", "\n", "     ", 
         RowBox[{
          RowBox[{"Subscript", "[", 
           RowBox[{"\"\<D\>\"", ",", " ", "\"\<n\>\""}], "]"}], ",", 
          RowBox[{"PostToBox", "[", 
           RowBox[{
           "$CurrentSet", ",", " ", "\"\<Dihedral[\[Placeholder]]\>\"", ",", 
            " ", "True"}], "]"}]}], "]"}], ",", " ", "\n", "    ", 
        RowBox[{"Button", "[", "\n", "     ", 
         RowBox[{
          RowBox[{"Subscript", "[", 
           RowBox[{"\"\<Z\>\"", ",", " ", "\"\<n\>\""}], "]"}], ",", 
          RowBox[{"PostToBox", "[", 
           RowBox[{
           "$CurrentSet", ",", " ", "\"\<Z[\[Placeholder]]\>\"", ",", " ", 
            "True"}], "]"}]}], "]"}], ",", " ", "\n", "    ", 
        RowBox[{"Button", "[", "\n", "     ", 
         RowBox[{
          RowBox[{"Subscript", "[", 
           RowBox[{"\"\<U\>\"", ",", " ", "\"\<n\>\""}], "]"}], ",", 
          RowBox[{"PostToBox", "[", 
           RowBox[{
           "$CurrentSet", ",", " ", "\"\<U[\[Placeholder]]\>\"", ",", " ", 
            "True"}], "]"}]}], "]"}]}], "}"}], ",", 
      RowBox[{"{", "\n", "    ", 
       RowBox[{
        RowBox[{"Button", "[", "\n", "     ", 
         RowBox[{
          RowBox[{"Subscript", "[", 
           RowBox[{"\"\<S\>\"", ",", " ", "\"\<n\>\""}], "]"}], ",", 
          RowBox[{"PostToBox", "[", 
           RowBox[{
           "$CurrentSet", ",", " ", "\"\<Symmetric[\[Placeholder]]\>\"", ",", 
            " ", "True"}], "]"}]}], "]"}], ",", " ", "\n", "    ", 
        RowBox[{"Button", "[", "\n", "     ", 
         RowBox[{
          RowBox[{"Subscript", "[", 
           RowBox[{"\"\<A\>\"", ",", " ", "\"\<n\>\""}], "]"}], ",", 
          RowBox[{"PostToBox", "[", 
           RowBox[{
           "$CurrentSet", ",", " ", "\"\<Alternating[\[Placeholder]]\>\"", 
            ",", " ", "True"}], "]"}]}], "]"}], ",", " ", "\n", "    ", 
        RowBox[{"Button", "[", "\n", "     ", 
         RowBox[{"\"\<generic cyclic\>\"", ",", 
          RowBox[{"PostToBox", "[", 
           RowBox[{
           "$CurrentSet", ",", " ", "\"\<Cyclic[\[Placeholder]]\>\"", ",", 
            " ", "True"}], "]"}]}], "]"}]}], "}"}], ",", 
      RowBox[{"{", "\n", "    ", 
       RowBox[{
        RowBox[{"Button", "[", "\n", "    ", 
         RowBox[{"\"\<\!\(\*SubscriptBox[\(Z\), \(n\)]\)[I]\>\"", ",", 
          RowBox[{"PostToBox", "[", 
           RowBox[{
           "$CurrentSet", ",", " ", "\"\<Z[\[Placeholder], I]\>\"", ",", " ", 
            "True"}], "]"}]}], "]"}], ",", " ", "\n", "    ", 
        RowBox[{"Button", "[", "\n", "     ", 
         RowBox[{
          RowBox[{"Subscript", "[", 
           RowBox[{"\"\<Zx\>\"", ",", " ", "\"\<n\>\""}], "]"}], ",", 
          RowBox[{"PostToBox", "[", 
           RowBox[{
           "$CurrentSet", ",", " ", "\"\<Zx[\[Placeholder]]\>\"", ",", " ", 
            "True"}], "]"}]}], "]"}], ",", " ", "\n", "    ", 
        RowBox[{"Button", "[", "\n", "     ", 
         RowBox[{"\"\<TwistedZ[n]\>\"", ",", 
          RowBox[{"PostToBox", "[", 
           RowBox[{
           "$CurrentSet", ",", " ", "\"\<TwistedZ[\[Placeholder]]\>\"", ",", 
            " ", "True"}], "]"}]}], "]"}]}], "}"}], ",", 
      RowBox[{"{", "\n", "    ", 
       RowBox[{
        RowBox[{"Button", "[", "\n", "     ", 
         RowBox[{"\"\<RootsOfUnity[n]\>\"", ",", 
          RowBox[{"PostToBox", "[", 
           RowBox[{
           "$CurrentSet", ",", " ", "\"\<RootsOfUnity[\[Placeholder]]\>\"", 
            ",", " ", "True"}], "]"}]}], "]"}], ",", " ", "\n", "    ", 
        RowBox[{"Button", "[", "\n", "     ", 
         RowBox[{"\"\<GaussianUnits\>\"", ",", 
          RowBox[{"PostToBox", "[", 
           RowBox[{
           "$CurrentSet", ",", " ", "\"\<GaussianUnits\>\"", ",", " ", 
            "True"}], "]"}]}], "]"}], ",", " ", "\n", "    ", 
        RowBox[{"Button", "[", "\n", "     ", 
         RowBox[{"\"\<Klein4\>\"", ",", 
          RowBox[{"PostToBox", "[", 
           RowBox[{
           "$CurrentSet", ",", " ", "\"\<Klein4\>\"", ",", " ", "True"}], 
           "]"}]}], "]"}]}], "}"}]}], "}"}], "]"}]}], ";"}]}], "Input",
 ShowCellBracket->False,
 CellOpen->False,
 InitializationCell->True],

Cell[BoxData[
 RowBox[{
  RowBox[{"Instructions", "[", "]"}], ":=", " ", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", "nb", "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"nb", " ", "=", 
      RowBox[{"NotebookPut", "[", 
       RowBox[{"Notebook", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"Cell", "[", 
           RowBox[{
            RowBox[{"TextData", "[", 
             RowBox[{"{", 
              RowBox[{
              "\"\<This tool is meant to facilitate the creation of a \
Morphoid by matching elements in the domain with elements in the codomain. \
First, in this palette, we choose the desired domain and codomain. This can \
be done by either typing in the corresponding boxes below or by using the \
palettes provided. When entering a group (oid) family, an index is also \
needed. A blank box is provided and selected in the name of the Groupoid. \
Either type in an index or click on a number in the provided palette. When \
both the domain and codomain are entered, click on the \
\[OpenCurlyDoubleQuote]Ready to form map\[CloseCurlyDoubleQuote] button. This \
will create a new notebook in which the correspondences can be assigned. As \
an alternative to this, consider the function \>\"", ",", 
               RowBox[{"StyleBox", "[", 
                RowBox[{"\"\<MorphoidSetupMenu\>\"", ",", 
                 RowBox[{"FontWeight", "\[Rule]", "\"\<Bold\>\""}]}], "]"}], 
               ",", "\"\<.\>\""}], "}"}], "]"}], ",", "\"\<Text\>\"", ",", 
            RowBox[{"FontSize", "\[Rule]", "14"}]}], "]"}], "}"}], ",", 
         RowBox[{"WindowMargins", "\[Rule]", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{"90", ",", "Automatic"}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{"Automatic", ",", "240"}], "}"}]}], "}"}]}], ",", 
         RowBox[{"WindowSize", "\[Rule]", 
          RowBox[{"{", 
           RowBox[{"400", ",", "Fit"}], "}"}]}], ",", 
         RowBox[{"WindowTitle", "\[Rule]", "\"\<Instructions\>\""}], ",", 
         RowBox[{"WindowFrame", "\[Rule]", "\"\<Normal\>\""}], ",", 
         RowBox[{"CellMargins", "\[Rule]", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{"0", ",", "0"}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{"Inherited", ",", "0"}], "}"}]}], "}"}]}], ",", 
         RowBox[{"WindowElements", "\[Rule]", 
          RowBox[{"{", "\"\<VerticalScrollBar\>\"", "}"}]}], ",", 
         RowBox[{"WindowClickSelect", "\[Rule]", "True"}], ",", 
         RowBox[{"Enabled", "\[Rule]", "True"}], ",", 
         RowBox[{"ScrollingOptions", "\[Rule]", 
          RowBox[{"{", 
           RowBox[{"\"\<PagewiseScrolling\>\"", "\[Rule]", "True"}], "}"}]}], 
         ",", 
         RowBox[{"ShowCellBracket", "\[Rule]", "False"}]}], "]"}], "]"}]}], 
     ";"}]}], "\[IndentingNewLine]", "]"}]}]], "Input",
 ShowCellBracket->False,
 CellOpen->False,
 InitializationCell->True]
}, Closed]],

Cell[TextData[{
 "Click ",
 StyleBox[ButtonBox["here",
  Evaluator->Automatic,
  Active->True,
  ButtonFunction:>Instructions[]],
  Background->RGBColor[0, 1, 1]],
 " for instructions."
}], "Text",
 ShowCellBracket->True,
 CellOpen->True,
 InitializationCell->False],

Cell[TextData[{
 StyleBox["Message: ",
  FontWeight->"Bold",
  FontColor->RGBColor[0, 0, 1]],
 "Enter the codomain by typing or choosing a group (or a group family and an \
index)."
}], "Text",
 ShowCellBracket->True,
 CellOpen->True,
 InitializationCell->False,
 CellTags->"message"],

Cell[BoxData[
 RowBox[{"enter", "  ", "domain", "  ", "here"}]], "Input",
 ShowCellBracket->True,
 CellOpen->True,
 InitializationCell->False,
 CellTags->"domainbox"],

Cell[BoxData[
 RowBox[{"enter", "  ", "codomain", "  ", "here"}]], "Input",
 ShowCellBracket->True,
 CellOpen->True,
 InitializationCell->False,
 CellTags->"codomainbox"],

Cell[BoxData[
 RowBox[{"                             ", 
  ButtonBox[
   RowBox[{"Ready", " ", "to", " ", "form", " ", "map"}],
   Active->True,
   BaseStyle->None,
   ButtonFunction:>SetupPalette[],
   Evaluator->Automatic]}]], "Input",
 ShowCellBracket->True,
 CellOpen->True,
 InitializationCell->False],

Cell[BoxData[
 TagBox[GridBox[{
    {
     ButtonBox[
      SubscriptBox["\<\"D\"\>", "\<\"n\"\>"],
      Appearance->Automatic,
      ButtonFrame->"DialogBox",
      ButtonFunction:>$CellContext`PostToBox[$CellContext`$CurrentSet, 
        "Dihedral[\[Placeholder]]", True],
      Evaluator->Automatic,
      Method->"Preemptive"], 
     ButtonBox[
      SubscriptBox["\<\"Z\"\>", "\<\"n\"\>"],
      Appearance->Automatic,
      ButtonFrame->"DialogBox",
      ButtonFunction:>$CellContext`PostToBox[$CellContext`$CurrentSet, 
        "Z[\[Placeholder]]", True],
      Evaluator->Automatic,
      Method->"Preemptive"], 
     ButtonBox[
      SubscriptBox["\<\"U\"\>", "\<\"n\"\>"],
      Appearance->Automatic,
      ButtonFrame->"DialogBox",
      ButtonFunction:>$CellContext`PostToBox[$CellContext`$CurrentSet, 
        "U[\[Placeholder]]", True],
      Evaluator->Automatic,
      Method->"Preemptive"]},
    {
     ButtonBox[
      SubscriptBox["\<\"S\"\>", "\<\"n\"\>"],
      Appearance->Automatic,
      ButtonFrame->"DialogBox",
      ButtonFunction:>$CellContext`PostToBox[$CellContext`$CurrentSet, 
        "Symmetric[\[Placeholder]]", True],
      Evaluator->Automatic,
      Method->"Preemptive"], 
     ButtonBox[
      SubscriptBox["\<\"A\"\>", "\<\"n\"\>"],
      Appearance->Automatic,
      ButtonFrame->"DialogBox",
      ButtonFunction:>$CellContext`PostToBox[$CellContext`$CurrentSet, 
        "Alternating[\[Placeholder]]", True],
      Evaluator->Automatic,
      Method->"Preemptive"], 
     ButtonBox["\<\"generic cyclic\"\>",
      Appearance->Automatic,
      ButtonFrame->"DialogBox",
      ButtonFunction:>$CellContext`PostToBox[$CellContext`$CurrentSet, 
        "Cyclic[\[Placeholder]]", True],
      Evaluator->Automatic,
      Method->"Preemptive"]},
    {
     ButtonBox["\<\"\\!\\(\\*SubscriptBox[\\(Z\\), \\(n\\)]\\)[I]\"\>",
      Appearance->Automatic,
      ButtonFrame->"DialogBox",
      ButtonFunction:>$CellContext`PostToBox[$CellContext`$CurrentSet, 
        "Z[\[Placeholder], I]", True],
      Evaluator->Automatic,
      Method->"Preemptive"], 
     ButtonBox[
      SubscriptBox["\<\"Zx\"\>", "\<\"n\"\>"],
      Appearance->Automatic,
      ButtonFrame->"DialogBox",
      ButtonFunction:>$CellContext`PostToBox[$CellContext`$CurrentSet, 
        "Zx[\[Placeholder]]", True],
      Evaluator->Automatic,
      Method->"Preemptive"], 
     ButtonBox["\<\"TwistedZ[n]\"\>",
      Appearance->Automatic,
      ButtonFrame->"DialogBox",
      ButtonFunction:>$CellContext`PostToBox[$CellContext`$CurrentSet, 
        "TwistedZ[\[Placeholder]]", True],
      Evaluator->Automatic,
      Method->"Preemptive"]},
    {
     ButtonBox["\<\"RootsOfUnity[n]\"\>",
      Appearance->Automatic,
      ButtonFrame->"DialogBox",
      ButtonFunction:>$CellContext`PostToBox[$CellContext`$CurrentSet, 
        "RootsOfUnity[\[Placeholder]]", True],
      Evaluator->Automatic,
      Method->"Preemptive"], 
     ButtonBox["\<\"GaussianUnits\"\>",
      Appearance->Automatic,
      ButtonFrame->"DialogBox",
      ButtonFunction:>$CellContext`PostToBox[$CellContext`$CurrentSet, 
        "GaussianUnits", True],
      Evaluator->Automatic,
      Method->"Preemptive"], 
     ButtonBox["\<\"Klein4\"\>",
      Appearance->Automatic,
      ButtonFrame->"DialogBox",
      ButtonFunction:>$CellContext`PostToBox[$CellContext`$CurrentSet, 
        "Klein4", True],
      Evaluator->Automatic,
      Method->"Preemptive"]}
   },
   ColumnsEqual->False,
   GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
   RowsEqual->False],
  "Grid"]], "Output",
 CellChangeTimes->{3.43767009592717*^9, 3.437670224881546*^9, 
  3.437670378010907*^9, 3.437670485971942*^9, 3.437670534365035*^9, 
  3.4376706419251633`*^9}],

Cell[BoxData[
 RowBox[{
  ButtonBox["1",
   BaseStyle->"Paste"], 
  ButtonBox["2",
   BaseStyle->"Paste"], 
  ButtonBox["3",
   BaseStyle->"Paste"], 
  ButtonBox["4",
   BaseStyle->"Paste"], 
  ButtonBox["5",
   BaseStyle->"Paste"], 
  ButtonBox["6",
   BaseStyle->"Paste"], 
  ButtonBox["7",
   BaseStyle->"Paste"], 
  ButtonBox["8",
   BaseStyle->"Paste"], 
  ButtonBox["9",
   BaseStyle->"Paste"], 
  ButtonBox["10",
   BaseStyle->"Paste"], 
  ButtonBox["11",
   BaseStyle->"Paste"], 
  ButtonBox["12",
   BaseStyle->"Paste"], 
  ButtonBox["13",
   BaseStyle->"Paste"], 
  ButtonBox["14",
   BaseStyle->"Paste"], 
  ButtonBox["15",
   BaseStyle->"Paste"], 
  ButtonBox["16",
   BaseStyle->"Paste"], 
  ButtonBox["17",
   BaseStyle->"Paste"], 
  ButtonBox["18",
   BaseStyle->"Paste"], 
  ButtonBox["19",
   BaseStyle->"Paste"], 
  ButtonBox["20",
   BaseStyle->"Paste"], 
  ButtonBox["21",
   BaseStyle->"Paste"], 
  ButtonBox["22",
   BaseStyle->"Paste"], 
  ButtonBox["23",
   BaseStyle->"Paste"], 
  ButtonBox["24",
   BaseStyle->"Paste"], 
  ButtonBox["25",
   BaseStyle->"Paste"], 
  ButtonBox["26",
   BaseStyle->"Paste"], 
  ButtonBox["27",
   BaseStyle->"Paste"], 
  ButtonBox["28",
   BaseStyle->"Paste"], 
  ButtonBox["29",
   BaseStyle->"Paste"], 
  ButtonBox["30",
   BaseStyle->"Paste"], 
  ButtonBox["31",
   BaseStyle->"Paste"], 
  ButtonBox["32",
   BaseStyle->"Paste"], 
  ButtonBox["33",
   BaseStyle->"Paste"], 
  ButtonBox["34",
   BaseStyle->"Paste"], 
  ButtonBox["35",
   BaseStyle->"Paste"], 
  ButtonBox["36",
   BaseStyle->"Paste"], 
  ButtonBox["37",
   BaseStyle->"Paste"], 
  ButtonBox["38",
   BaseStyle->"Paste"], 
  ButtonBox["39",
   BaseStyle->"Paste"], 
  ButtonBox["40",
   BaseStyle->"Paste"], 
  ButtonBox["41",
   BaseStyle->"Paste"], 
  ButtonBox["42",
   BaseStyle->"Paste"], 
  ButtonBox["43",
   BaseStyle->"Paste"], 
  ButtonBox["44",
   BaseStyle->"Paste"], 
  ButtonBox["45",
   BaseStyle->"Paste"]}]], "Input",
 ShowCellBracket->True,
 CellOpen->True,
 InitializationCell->False]
},
AutoGeneratedPackage->None,
Saveable->False,
InitializationCellEvaluation->True,
CellGrouping->Manual,
WindowSize->{872, 550},
WindowMargins->{{68, Automatic}, {Automatic, 67}},
WindowFrame->"Normal",
ShowCellBracket->True,
ShowGroupOpener->True,
ShowClosedCellArea->True,
CellElementSpacings->{"ClosedCellHeight"->19,
"ClosedGroupTopMargin"->4},
Magnification->1.,
FrontEndVersion->"6.0 for Mac OS X x86 (32-bit) (March 13, 2008)",
StyleDefinitions->"Default.nb"
]
(* End of Notebook Content *)
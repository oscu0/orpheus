(* Content-type: application/mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 7.0' *)

(*CacheID: 234*)


(* Beginning of Notebook Content *)
Notebook[{
Cell[BoxData[
 PanelBox[
  TagBox[GridBox[{
     {
      TabViewBox[{{1,"\<\"Getting started\"\>"->
       TagBox[GridBox[{
          {
           TagBox[
            TooltipBox[
             ButtonBox[
              StyleBox["\<\"Needs[\\\"AbstractAlgebra`Master`\\\"]\"\>",
               StripOnInput->False,
               FontSize->Small],
              Background->RGBColor[0.740001, 0.990005, 0.790005],
              BaseStyle->"Paste",
              
              ButtonData->
               RowBox[{"Needs", "[", "\"AbstractAlgebra`Master`\"", "]"}]],
             "\"Load the AbstractAlgebra package\"",
             LabelStyle->"TextStyling"],
            Annotation[#, "Load the AbstractAlgebra package", "Tooltip"]& ]},
          {
           TagBox[
            TooltipBox[
             ButtonBox[
              StyleBox["\<\"SwitchStructureTo[Group]\"\>",
               StripOnInput->False,
               FontSize->Small],
              Background->RGBColor[0.740001, 0.990005, 0.790005],
              BaseStyle->"Paste",
              ButtonData->RowBox[{"SwitchStructureTo", "[", "Group", "]"}]],
             "\"Start working with groups\"",
             LabelStyle->"TextStyling"],
            Annotation[#, "Start working with groups", "Tooltip"]& ]},
          {
           TagBox[
            TooltipBox[
             ButtonBox[
              StyleBox["\<\"SwitchStructureTo[Ring]\"\>",
               StripOnInput->False,
               FontSize->Small],
              Background->RGBColor[0.740001, 0.990005, 0.790005],
              BaseStyle->"Paste",
              ButtonData->RowBox[{"SwitchStructureTo", "[", "Ring", "]"}]],
             "\"Start working with rings\"",
             LabelStyle->"TextStyling"],
            Annotation[#, "Start working with rings", "Tooltip"]& ]},
          {
           TagBox[
            TooltipBox[
             TagBox[
              ButtonBox[
               
               PaneSelectorBox[{False->"\<\"Help with this palette\"\>", True->
                
                
                StyleBox["\<\"Help with this palette\"\>", 
                 "HyperlinkActive"]}, Dynamic[
                 CurrentValue["MouseOver"]],
                BaseStyle->{"Hyperlink"},
                BaselinePosition->Baseline,
                FrameMargins->0,
                ImageSize->Automatic],
               BaseStyle->"Hyperlink",
               ButtonData->{
                 FrontEnd`FileName[{
                   ParentDirectory[
                    ParentDirectory[]], "Palettes", "HelpPalette.nb"}], None},
               
               ButtonNote->ButtonData],
              Annotation[#, {
                FrontEnd`FileName[{
                  ParentDirectory[
                   ParentDirectory[]], "Palettes", "HelpPalette.nb"}], None}, 
               "Hyperlink"]& ],
             "\"Information about this palette\"",
             LabelStyle->"TextStyling"],
            Annotation[#, "Information about this palette", "Tooltip"]& ]},
          {
           TagBox[
            TooltipBox[
             TagBox[
              ButtonBox[
               
               PaneSelectorBox[{False->"\<\"AbstractAlgebra Resources\"\>", 
                True->
                
                StyleBox["\<\"AbstractAlgebra Resources\"\>", 
                 "HyperlinkActive"]}, Dynamic[
                 CurrentValue["MouseOver"]],
                BaseStyle->{"Hyperlink"},
                BaselinePosition->Baseline,
                FrameMargins->0,
                ImageSize->Automatic],
               BaseStyle->"Hyperlink",
               ButtonData->{
                 FrontEnd`FileName[{
                   ParentDirectory[
                    ParentDirectory[]], "AAResources.nb"}], None},
               ButtonNote->ButtonData],
              Annotation[#, {
                FrontEnd`FileName[{
                  ParentDirectory[
                   ParentDirectory[]], "AAResources.nb"}], None}, 
               "Hyperlink"]& ],
             "\"Various resources that can be used with AbstractAlgebra\"",
             LabelStyle->"TextStyling"],
            
            Annotation[#, 
             "Various resources that can be used with AbstractAlgebra", 
             "Tooltip"]& ]},
          {
           TagBox[
            TooltipBox[
             TagBox[
              ButtonBox[
               PaneSelectorBox[{False->"\<\"EAAM web site\"\>", True->
                StyleBox["\<\"EAAM web site\"\>", "HyperlinkActive"]}, Dynamic[
                 CurrentValue["MouseOver"]],
                BaseStyle->{"Hyperlink"},
                BaselinePosition->Baseline,
                FrameMargins->0,
                ImageSize->Automatic],
               BaseStyle->"Hyperlink",
               ButtonData->{
                 URL["http://www.central.edu/eaam/"], None},
               ButtonNote->"http://www.central.edu/eaam/"],
              Annotation[#, "http://www.central.edu/eaam/", "Hyperlink"]& ],
             
             "\"Further Information on the Exploring Abstract Algebra with \
Mathematica web site, which also contains AbstractAlgebra information\"",
             LabelStyle->"TextStyling"],
            
            Annotation[#, 
             "Further Information on the Exploring Abstract Algebra with \
Mathematica web site, which also contains AbstractAlgebra information", 
             "Tooltip"]& ]},
          {
           TagBox[
            TooltipBox[
             StyleBox[
              ButtonBox[
               RowBox[{"package", " ", "documentation"}],
               BaseStyle->"AddOnsLink",
               
               ButtonData:>{
                "Introduction to AbstractAlgebra", 
                 "Introduction to AbstractAlgebra"}],
              FontSize->10],
             "\"Documentation for the AbstractAlgebra package\"",
             LabelStyle->"TextStyling"],
            
            Annotation[#, "Documentation for the AbstractAlgebra package", 
             "Tooltip"]& ]},
          {
           TagBox[
            TooltipBox[
             TagBox[
              ButtonBox[
               PaneSelectorBox[{False->"\<\"AlgebraInvestigator\"\>", True->
                StyleBox["\<\"AlgebraInvestigator\"\>", "HyperlinkActive"]}, 
                Dynamic[
                 CurrentValue["MouseOver"]],
                BaseStyle->{"Hyperlink"},
                BaselinePosition->Baseline,
                FrameMargins->0,
                ImageSize->Automatic],
               BaseStyle->"Hyperlink",
               ButtonData->{
                 FrontEnd`FileName[{
                   ParentDirectory[
                    ParentDirectory[]], "AlgebraInvestigator", 
                   "AlgebraInvestigator.nb"}], None},
               ButtonNote->ButtonData],
              Annotation[#, {
                FrontEnd`FileName[{
                  ParentDirectory[
                   ParentDirectory[]], "AlgebraInvestigator", 
                  "AlgebraInvestigator.nb"}], None}, "Hyperlink"]& ],
             
             "\"AlgebraInvestigator is a structured means of exploring the \
capabilities of the AbstractAlgebra package\"",
             LabelStyle->"TextStyling"],
            
            Annotation[#, 
             "AlgebraInvestigator is a structured means of exploring the \
capabilities of the AbstractAlgebra package", "Tooltip"]& ]}
         },
         AutoDelete->False,
         GridBoxItemSize->{
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
        "Grid"]}, {2,"\<\"Modes\"\>"->
       TagBox[GridBox[{
          {
           TagBox[
            TooltipBox[
             ButtonBox[
              StyleBox["\<\", Mode \[RightArrow] Computational\"\>",
               StripOnInput->False,
               FontSize->Small],
              Background->RGBColor[1, 1, 0],
              BaseStyle->"Paste",
              ButtonData->RowBox[{",", " ", 
                 RowBox[{"Mode", " ", "\[Rule]", " ", "Computational"}]}]],
             "\"Add the Computational mode to a function\"",
             LabelStyle->"TextStyling"],
            
            Annotation[#, "Add the Computational mode to a function", 
             "Tooltip"]& ]},
          {
           TagBox[
            TooltipBox[
             ButtonBox[
              StyleBox["\<\", Mode \[RightArrow] Textual\"\>",
               StripOnInput->False,
               FontSize->Small],
              Background->RGBColor[1, 1, 0],
              BaseStyle->"Paste",
              ButtonData->RowBox[{",", " ", 
                 RowBox[{"Mode", " ", "\[Rule]", " ", "Textual"}]}]],
             "\"Add the Textual mode to a function\"",
             LabelStyle->"TextStyling"],
            Annotation[#, "Add the Textual mode to a function", "Tooltip"]& ]},
          {
           TagBox[
            TooltipBox[
             ButtonBox[
              StyleBox["\<\", Mode \[RightArrow] Visual\"\>",
               StripOnInput->False,
               FontSize->Small],
              Background->RGBColor[1, 1, 0],
              BaseStyle->"Paste",
              ButtonData->RowBox[{",", " ", 
                 RowBox[{"Mode", " ", "\[Rule]", " ", "Visual"}]}]],
             "\"Add the Visual mode to a function\"",
             LabelStyle->"TextStyling"],
            
            Annotation[#, "Add the Visual mode to a function", 
             "Tooltip"]& ]},
          {
           TagBox[
            TooltipBox[
             ButtonBox[
              StyleBox["\<\", Mode \[RightArrow] All\"\>",
               StripOnInput->False,
               FontSize->Small],
              Background->RGBColor[1, 1, 0],
              BaseStyle->"Paste",
              ButtonData->RowBox[{",", " ", 
                 RowBox[{"Mode", " ", "\[Rule]", " ", "All"}]}]],
             "\"Add the All mode to a function\"",
             LabelStyle->"TextStyling"],
            Annotation[#, "Add the All mode to a function", "Tooltip"]& ]},
          {
           TagBox[
            TooltipBox[
             ButtonBox[
              StyleBox["\<\", Mode \[RightArrow] Interactive\"\>",
               StripOnInput->False,
               FontSize->Small],
              Background->RGBColor[1, 1, 0],
              BaseStyle->"Paste",
              ButtonData->RowBox[{",", " ", 
                 RowBox[{"Mode", " ", "\[Rule]", " ", "Interactive"}]}]],
             "\"Add the Interactive mode to a function\"",
             LabelStyle->"TextStyling"],
            
            Annotation[#, "Add the Interactive mode to a function", 
             "Tooltip"]& ]},
          {
           TagBox[
            TooltipBox[
             TagBox[
              ButtonBox[
               PaneSelectorBox[{False->"\<\"Explanation of Modes\"\>", True->
                StyleBox["\<\"Explanation of Modes\"\>", "HyperlinkActive"]}, 
                Dynamic[
                 CurrentValue["MouseOver"]],
                BaseStyle->{"Hyperlink"},
                BaselinePosition->Baseline,
                FrameMargins->0,
                ImageSize->Automatic],
               BaseStyle->"Hyperlink",
               ButtonData->{
                 FrontEnd`FileName[{
                   ParentDirectory[
                    ParentDirectory[]], "AAModes.nb"}], None},
               ButtonNote->ButtonData],
              Annotation[#, {
                FrontEnd`FileName[{
                  ParentDirectory[
                   ParentDirectory[]], "AAModes.nb"}], None}, "Hyperlink"]& ],
             
             
             "\"This short notebook gives explanations and illustrations of \
each of the available modes.\"",
             LabelStyle->"TextStyling"],
            
            Annotation[#, 
             "This short notebook gives explanations and illustrations of \
each of the available modes.", "Tooltip"]& ]}
         },
         AutoDelete->False,
         GridBoxItemSize->{
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
        "Grid"]}}, 1]},
     {
      TagBox[
       DynamicModuleBox[{Typeset`var$$ = False}, 
        InterpretationBox[
         StyleBox[
          PaneSelectorBox[{False->GridBox[{
             {
              OpenerBox[Dynamic[Typeset`var$$],
               Appearance->Automatic,
               AutoAction->False,
               ContinuousAction->False,
               Enabled->Automatic], 
              TagBox[
               TooltipBox["\<\"Groupoids\"\>",
                "\"List of Groupoids available\"",
                LabelStyle->"TextStyling"],
               Annotation[#, "List of Groupoids available", "Tooltip"]& ]}
            },
            AutoDelete->False,
            BaselinePosition->{1, 1},
            GridBoxAlignment->{"Columns" -> {{Left}}},
            GridBoxBackground->{"Columns" -> {{Automatic}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
            GridBoxSpacings->{"Columns" -> {{0.2}}, "Rows" -> {{0.5}}}], True->
           GridBox[{
             {
              OpenerBox[Dynamic[Typeset`var$$],
               Appearance->Automatic,
               AutoAction->False,
               ContinuousAction->False,
               Enabled->Automatic], 
              TagBox[
               TooltipBox["\<\"Groupoids\"\>",
                "\"List of Groupoids available\"",
                LabelStyle->"TextStyling"],
               Annotation[#, "List of Groupoids available", "Tooltip"]& ]},
             {"", 
              PaneBox[
               TagBox[GridBox[{
                  {
                   TagBox[
                    TooltipBox[
                    ButtonBox[
                    RowBox[{"Z", "[", "\[SelectionPlaceholder]", "]"}],
                    BaseStyle->"Paste"],
                    StyleBox[
                    "\"Z[n] returns the cyclic group of integers mod n under \
addition when in the context of groups or the ring of integers mod n when in \
the context of rings. The option Structure can be set to Group or Ring; by \
default, when working with groups, it is set to Group and set to Ring when \
working with rings. (See SwitchStructureTo for further information.) Note \
that ZG[args] is equivalent to Z[args, Structure \[Rule] Group], while \
ZR[args] is equivalent to Z[args, Structure \[Rule] Ring]. Z[n, k] returns \
the group (or ring) of multiples of k mod n, if k is a divisor of n. \
Additionally, Z[n, I] when working with groups (or Z[n, I, Structure \[Rule] \
Group] while working with rings) returns the additive Gaussian integers mod \
n, while Z[n, I] returns the ring of Gaussian integers mod n when working \
with rings. Other available options: Mode (possible values: Computational, \
Textual, Visual, All, and Interactive (on n)).\"", 14, StripOnInput -> False],
                    
                    LabelStyle->"TextStyling"],
                    Annotation[#, 
                    Style[
                    "Z[n] returns the cyclic group of integers mod n under \
addition when in the context of groups or the ring of integers mod n when in \
the context of rings. The option Structure can be set to Group or Ring; by \
default, when working with groups, it is set to Group and set to Ring when \
working with rings. (See SwitchStructureTo for further information.) Note \
that ZG[args] is equivalent to Z[args, Structure \[Rule] Group], while \
ZR[args] is equivalent to Z[args, Structure \[Rule] Ring]. Z[n, k] returns \
the group (or ring) of multiples of k mod n, if k is a divisor of n. \
Additionally, Z[n, I] when working with groups (or Z[n, I, Structure \[Rule] \
Group] while working with rings) returns the additive Gaussian integers mod \
n, while Z[n, I] returns the ring of Gaussian integers mod n when working \
with rings. Other available options: Mode (possible values: Computational, \
Textual, Visual, All, and Interactive (on n)).", 14], "Tooltip"]& ]},
                  {
                   TagBox[
                    TooltipBox[
                    ButtonBox[
                    RowBox[{"Z", "[", 
                    RowBox[{
                    "\[SelectionPlaceholder]", ",", "\[Placeholder]"}], "]"}],
                    
                    BaseStyle->"Paste"],
                    StyleBox[
                    "\"Z[n] returns the cyclic group of integers mod n under \
addition when in the context of groups or the ring of integers mod n when in \
the context of rings. The option Structure can be set to Group or Ring; by \
default, when working with groups, it is set to Group and set to Ring when \
working with rings. (See SwitchStructureTo for further information.) Note \
that ZG[args] is equivalent to Z[args, Structure \[Rule] Group], while \
ZR[args] is equivalent to Z[args, Structure \[Rule] Ring]. Z[n, k] returns \
the group (or ring) of multiples of k mod n, if k is a divisor of n. \
Additionally, Z[n, I] when working with groups (or Z[n, I, Structure \[Rule] \
Group] while working with rings) returns the additive Gaussian integers mod \
n, while Z[n, I] returns the ring of Gaussian integers mod n when working \
with rings. Other available options: Mode (possible values: Computational, \
Textual, Visual, All, and Interactive (on n)).\"", 14, StripOnInput -> False],
                    
                    LabelStyle->"TextStyling"],
                    Annotation[#, 
                    Style[
                    "Z[n] returns the cyclic group of integers mod n under \
addition when in the context of groups or the ring of integers mod n when in \
the context of rings. The option Structure can be set to Group or Ring; by \
default, when working with groups, it is set to Group and set to Ring when \
working with rings. (See SwitchStructureTo for further information.) Note \
that ZG[args] is equivalent to Z[args, Structure \[Rule] Group], while \
ZR[args] is equivalent to Z[args, Structure \[Rule] Ring]. Z[n, k] returns \
the group (or ring) of multiples of k mod n, if k is a divisor of n. \
Additionally, Z[n, I] when working with groups (or Z[n, I, Structure \[Rule] \
Group] while working with rings) returns the additive Gaussian integers mod \
n, while Z[n, I] returns the ring of Gaussian integers mod n when working \
with rings. Other available options: Mode (possible values: Computational, \
Textual, Visual, All, and Interactive (on n)).", 14], "Tooltip"]& ]},
                  {
                   TagBox[
                    TooltipBox[
                    ButtonBox[
                    RowBox[{"Z", "[", 
                    RowBox[{"\[SelectionPlaceholder]", ",", "\[ImaginaryI]"}],
                     "]"}],
                    BaseStyle->"Paste"],
                    StyleBox[
                    "\"Z[n] returns the cyclic group of integers mod n under \
addition when in the context of groups or the ring of integers mod n when in \
the context of rings. The option Structure can be set to Group or Ring; by \
default, when working with groups, it is set to Group and set to Ring when \
working with rings. (See SwitchStructureTo for further information.) Note \
that ZG[args] is equivalent to Z[args, Structure \[Rule] Group], while \
ZR[args] is equivalent to Z[args, Structure \[Rule] Ring]. Z[n, k] returns \
the group (or ring) of multiples of k mod n, if k is a divisor of n. \
Additionally, Z[n, I] when working with groups (or Z[n, I, Structure \[Rule] \
Group] while working with rings) returns the additive Gaussian integers mod \
n, while Z[n, I] returns the ring of Gaussian integers mod n when working \
with rings. Other available options: Mode (possible values: Computational, \
Textual, Visual, All, and Interactive (on n)).\"", 14, StripOnInput -> False],
                    
                    LabelStyle->"TextStyling"],
                    Annotation[#, 
                    Style[
                    "Z[n] returns the cyclic group of integers mod n under \
addition when in the context of groups or the ring of integers mod n when in \
the context of rings. The option Structure can be set to Group or Ring; by \
default, when working with groups, it is set to Group and set to Ring when \
working with rings. (See SwitchStructureTo for further information.) Note \
that ZG[args] is equivalent to Z[args, Structure \[Rule] Group], while \
ZR[args] is equivalent to Z[args, Structure \[Rule] Ring]. Z[n, k] returns \
the group (or ring) of multiples of k mod n, if k is a divisor of n. \
Additionally, Z[n, I] when working with groups (or Z[n, I, Structure \[Rule] \
Group] while working with rings) returns the additive Gaussian integers mod \
n, while Z[n, I] returns the ring of Gaussian integers mod n when working \
with rings. Other available options: Mode (possible values: Computational, \
Textual, Visual, All, and Interactive (on n)).", 14], "Tooltip"]& ]},
                  {
                   TagBox[
                    TooltipBox[
                    ButtonBox[
                    RowBox[{"Zx", "[", "\[SelectionPlaceholder]", "]"}],
                    BaseStyle->"Paste"],
                    StyleBox[
                    "\"Zx[n] returns the Groupoid of integers mod n under \
multiplication. Zx[n, k] returns the Groupoid of multiples of k mod n, if k \
is a divisor of n. Finally, Zx[n, I] returns the Groupoid of the Gaussian \
integers under mod n multiplication. Available options: Mode (possible \
values: Computational, Textual, Visual, and All).\"", 14, StripOnInput -> 
                    False],
                    LabelStyle->"TextStyling"],
                    Annotation[#, 
                    Style[
                    "Zx[n] returns the Groupoid of integers mod n under \
multiplication. Zx[n, k] returns the Groupoid of multiples of k mod n, if k \
is a divisor of n. Finally, Zx[n, I] returns the Groupoid of the Gaussian \
integers under mod n multiplication. Available options: Mode (possible \
values: Computational, Textual, Visual, and All).", 14], "Tooltip"]& ]},
                  {
                   TagBox[
                    TooltipBox[
                    ButtonBox[
                    RowBox[{"U", "[", "\[SelectionPlaceholder]", "]"}],
                    BaseStyle->"Paste"],
                    StyleBox[
                    "\"U[n] returns the group of integers mod n which are \
relatively prime to n, under multiplication. These elements are also the \
units in the ring Z[n]. (In other words, these are the elements that have \
inverses in the Groupoid Zx[n].) Other available options: Mode (possible \
values: Computational, Textual, Visual, All, and Interactive (on n)).\"", 14, 
                    StripOnInput -> False],
                    LabelStyle->"TextStyling"],
                    Annotation[#, 
                    Style[
                    "U[n] returns the group of integers mod n which are \
relatively prime to n, under multiplication. These elements are also the \
units in the ring Z[n]. (In other words, these are the elements that have \
inverses in the Groupoid Zx[n].) Other available options: Mode (possible \
values: Computational, Textual, Visual, All, and Interactive (on n)).", 14], 
                    "Tooltip"]& ]},
                  {
                   TagBox[
                    TooltipBox[
                    ButtonBox[
                    RowBox[{"TwistedZ", "[", "\[SelectionPlaceholder]", "]"}],
                    
                    BaseStyle->"Paste"],
                    StyleBox[
                    "\"TwistedZ[n] returns the Groupoid with elements {0, 1, \
... n-2} and operation Mod[#1 + #2 + #1 #2, n]&.\"", 14, StripOnInput -> 
                    False],
                    LabelStyle->"TextStyling"],
                    Annotation[#, 
                    Style[
                    "TwistedZ[n] returns the Groupoid with elements {0, 1, \
... n-2} and operation Mod[#1 + #2 + #1 #2, n]&.", 14], "Tooltip"]& ]},
                  {
                   TagBox[
                    TooltipBox[
                    ButtonBox[
                    RowBox[{"MaxTaker", "[", "\[SelectionPlaceholder]", "]"}],
                    
                    BaseStyle->"Paste"],
                    StyleBox[
                    "\"MaxTaker[n] returns the Groupoid with elements \
{1,2,...n} and the operation that returns the maximum of the two inputs. \
MaxTaker[m, n] is similar but the elements range over [m, n].\"", 14, 
                    StripOnInput -> False],
                    LabelStyle->"TextStyling"],
                    Annotation[#, 
                    Style[
                    "MaxTaker[n] returns the Groupoid with elements \
{1,2,...n} and the operation that returns the maximum of the two inputs. \
MaxTaker[m, n] is similar but the elements range over [m, n].", 14], 
                    "Tooltip"]& ]},
                  {
                   TagBox[
                    TooltipBox[
                    ButtonBox[
                    RowBox[{"MinTaker", "[", "\[SelectionPlaceholder]", "]"}],
                    
                    BaseStyle->"Paste"],
                    StyleBox[
                    "\"MinTaker[n] returns the Groupoid with elements \
{1,2,...n} and the operation that returns the minimum of the two inputs. \
MinTaker[m, n] is similar but the elements range over [m, n].\"", 14, 
                    StripOnInput -> False],
                    LabelStyle->"TextStyling"],
                    Annotation[#, 
                    Style[
                    "MinTaker[n] returns the Groupoid with elements \
{1,2,...n} and the operation that returns the minimum of the two inputs. \
MinTaker[m, n] is similar but the elements range over [m, n].", 14], 
                    "Tooltip"]& ]},
                  {
                   TagBox[
                    TooltipBox[
                    ButtonBox[
                    RowBox[{
                    "FirstTaker", "[", "\[SelectionPlaceholder]", "]"}],
                    BaseStyle->"Paste"],
                    StyleBox[
                    "\"FirstTaker[n] returns the Groupoid with elements \
{1,2,...n} and the operation that returns the first of the two inputs.\"", 14,
                     StripOnInput -> False],
                    LabelStyle->"TextStyling"],
                    Annotation[#, 
                    Style[
                    "FirstTaker[n] returns the Groupoid with elements \
{1,2,...n} and the operation that returns the first of the two inputs.", 14], 
                    "Tooltip"]& ]},
                  {
                   TagBox[
                    TooltipBox[
                    ButtonBox[
                    RowBox[{
                    "MeetDivisors", "[", "\[SelectionPlaceholder]", "]"}],
                    BaseStyle->"Paste"],
                    StyleBox[
                    "\"MeetDivisors[n] returns the Groupoid consisting of the \
divisors of n with operation GCD.\"", 14, StripOnInput -> False],
                    LabelStyle->"TextStyling"],
                    Annotation[#, 
                    Style[
                    "MeetDivisors[n] returns the Groupoid consisting of the \
divisors of n with operation GCD.", 14], "Tooltip"]& ]},
                  {
                   TagBox[
                    TooltipBox[
                    ButtonBox[
                    RowBox[{
                    "JoinDivisors", "[", "\[SelectionPlaceholder]", "]"}],
                    BaseStyle->"Paste"],
                    StyleBox[
                    "\"JoinDivisors[n] returns the Groupoid consisting of the \
divisors of n with operation LCM.\"", 14, StripOnInput -> False],
                    LabelStyle->"TextStyling"],
                    Annotation[#, 
                    Style[
                    "JoinDivisors[n] returns the Groupoid consisting of the \
divisors of n with operation LCM.", 14], "Tooltip"]& ]},
                  {
                   TagBox[
                    TooltipBox[
                    ButtonBox[
                    RowBox[{
                    "MixedDivisors", "[", "\[SelectionPlaceholder]", "]"}],
                    BaseStyle->"Paste"],
                    StyleBox[
                    "\"MixedDivisors[n] returns the Groupoid consisting of \
the divisors of n with operation LCM/GCD.\"", 14, StripOnInput -> False],
                    LabelStyle->"TextStyling"],
                    Annotation[#, 
                    Style[
                    "MixedDivisors[n] returns the Groupoid consisting of the \
divisors of n with operation LCM/GCD.", 14], "Tooltip"]& ]},
                  {
                   TagBox[
                    TooltipBox[
                    ButtonBox[
                    RowBox[{
                    "RootsOfUnity", "[", "\[SelectionPlaceholder]", "]"}],
                    BaseStyle->"Paste"],
                    StyleBox[
                    "\"RootsOfUnity[n] returns the Groupoid consisting of the \
n complex roots of the equation z^n = 1, under multiplication. Available \
options: Mode (possible values: Computational, Textual, Visual, All, and \
Interactive (on n)).\"", 14, StripOnInput -> False],
                    LabelStyle->"TextStyling"],
                    Annotation[#, 
                    Style[
                    "RootsOfUnity[n] returns the Groupoid consisting of the n \
complex roots of the equation z^n = 1, under multiplication. Available \
options: Mode (possible values: Computational, Textual, Visual, All, and \
Interactive (on n)).", 14], "Tooltip"]& ]},
                  {
                   TagBox[
                    TooltipBox[
                    ButtonBox[
                    RowBox[{"Dihedral", "[", "\[SelectionPlaceholder]", "]"}],
                    
                    BaseStyle->"Paste"],
                    StyleBox[
                    "\"Dihedral[n] returns the dihedral group of index n with \
order 2n. By default, the generators are indicated by Rot (for the smallest \
angle of rotation) and Ref (for any reflection). D[n, Form \[Rule] \
Permutations] uses the permutations corresponding to Rot and Ref; the default \
is Form \[Rule] RotRef. D[n, RotSym \[Rule] newsy1, RefSym \[Rule] newsy2] \
uses the symbols newsy1 and newsy2 for Rot and Ref respectively. Alternate \
names for Dihedral are D and DihedralGroupAA.\"", 14, StripOnInput -> False],
                    LabelStyle->"TextStyling"],
                    Annotation[#, 
                    Style[
                    "Dihedral[n] returns the dihedral group of index n with \
order 2n. By default, the generators are indicated by Rot (for the smallest \
angle of rotation) and Ref (for any reflection). D[n, Form \[Rule] \
Permutations] uses the permutations corresponding to Rot and Ref; the default \
is Form \[Rule] RotRef. D[n, RotSym \[Rule] newsy1, RefSym \[Rule] newsy2] \
uses the symbols newsy1 and newsy2 for Rot and Ref respectively. Alternate \
names for Dihedral are D and DihedralGroupAA.", 14], "Tooltip"]& ]},
                  {
                   TagBox[
                    TooltipBox[
                    ButtonBox[
                    RowBox[{"Cyclic", "[", "\[SelectionPlaceholder]", "]"}],
                    BaseStyle->"Paste"],
                    StyleBox[
                    "\"Cyclic[n] returns the cyclic group of order n with the \
default generator the string 'g'. Cyclic[n, Generator \[Rule] gen] returns \
the same group but written with generator gen (which could be a string or a \
symbol with no value). Cyclic[n, k] returns the Groupoid generated by g^k. \
Another available option: Mode (possible values: Computational, Textual, \
Visual, All, and Interactive (on n)).\"", 14, StripOnInput -> False],
                    LabelStyle->"TextStyling"],
                    Annotation[#, 
                    Style[
                    "Cyclic[n] returns the cyclic group of order n with the \
default generator the string 'g'. Cyclic[n, Generator \[Rule] gen] returns \
the same group but written with generator gen (which could be a string or a \
symbol with no value). Cyclic[n, k] returns the Groupoid generated by g^k. \
Another available option: Mode (possible values: Computational, Textual, \
Visual, All, and Interactive (on n)).", 14], "Tooltip"]& ]},
                  {
                   TagBox[
                    TooltipBox[
                    ButtonBox[
                    RowBox[{"Symmetric", "[", "\[SelectionPlaceholder]", "]"}],
                    BaseStyle->"Paste"],
                    StyleBox[
                    "\"Symmetric[n] returns the group of permutations on the \
set {1,2,..n} under composition. There are two options for this function, \
ProductOrder and IndexLimit. Since the elements of this group are \
permutations, one can specify the order that the product is taken by using \
ProductOrder; see ProductOrder for more information, including the values \
which can be used. IndexLimit defaults to 6 and indicates the upper limit for \
the value of the index n.\"", 14, StripOnInput -> False],
                    LabelStyle->"TextStyling"],
                    Annotation[#, 
                    Style[
                    "Symmetric[n] returns the group of permutations on the \
set {1,2,..n} under composition. There are two options for this function, \
ProductOrder and IndexLimit. Since the elements of this group are \
permutations, one can specify the order that the product is taken by using \
ProductOrder; see ProductOrder for more information, including the values \
which can be used. IndexLimit defaults to 6 and indicates the upper limit for \
the value of the index n.", 14], "Tooltip"]& ]},
                  {
                   TagBox[
                    TooltipBox[
                    ButtonBox[
                    RowBox[{
                    "Alternating", "[", "\[SelectionPlaceholder]", "]"}],
                    BaseStyle->"Paste"],
                    StyleBox[
                    "\"Alternating[n] returns the group of even permutations \
on the set {1,2,..n} under composition. There are two options for this \
function, ProductOrder and IndexLimit. Since the elements of this group are \
permutations, one can specify the order that the product is taken. See \
ProductOrder for more information, including the values that can be used. \
IndexLimit defaults to 6 and indicates the upper limit for the value of the \
index n. There is also the Textual Mode for this group.\"", 14, StripOnInput -> 
                    False],
                    LabelStyle->"TextStyling"],
                    Annotation[#, 
                    Style[
                    "Alternating[n] returns the group of even permutations on \
the set {1,2,..n} under composition. There are two options for this function, \
ProductOrder and IndexLimit. Since the elements of this group are \
permutations, one can specify the order that the product is taken. See \
ProductOrder for more information, including the values that can be used. \
IndexLimit defaults to 6 and indicates the upper limit for the value of the \
index n. There is also the Textual Mode for this group.", 14], 
                    "Tooltip"]& ]},
                  {
                   TagBox[
                    TooltipBox[
                    ButtonBox[
                    RowBox[{"QuaternionGroup", "[", "]"}],
                    BaseStyle->"Paste"],
                    StyleBox[
                    "\"QuaternionGroup[] returns the 8 element quaternion \
group. This group can be represented in various forms; the default is to \
represent it as 2-by-2 matrices. The option Form controls what form to use, \
with the default value being AsMatrices. Other values are AsIJK and \
AsSymbols.\"", 14, StripOnInput -> False],
                    LabelStyle->"TextStyling"],
                    Annotation[#, 
                    Style[
                    "QuaternionGroup[] returns the 8 element quaternion \
group. This group can be represented in various forms; the default is to \
represent it as 2-by-2 matrices. The option Form controls what form to use, \
with the default value being AsMatrices. Other values are AsIJK and \
AsSymbols.", 14], "Tooltip"]& ]},
                  {
                   TagBox[
                    TooltipBox[
                    ButtonBox["Klein4",
                    BaseStyle->"Paste"],
                    StyleBox[
                    "\"Klein4 returns the Klein-4 group (Viergruppe).\"", 14, 
                    StripOnInput -> False],
                    LabelStyle->"TextStyling"],
                    Annotation[#, 
                    Style[
                    "Klein4 returns the Klein-4 group (Viergruppe).", 14], 
                    "Tooltip"]& ]}
                 },
                 GridBoxAlignment->{"Columns" -> {{Left}}},
                 
                 GridBoxItemSize->{
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
                "Column"],
               ImageMargins->0]}
            },
            AutoDelete->False,
            BaselinePosition->{1, 1},
            GridBoxAlignment->{"Columns" -> {{Left}}},
            GridBoxBackground->{"Columns" -> {{Automatic}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
            GridBoxSpacings->{"Columns" -> {{0.2}}, "Rows" -> {{0.5}}}]}, 
           Dynamic[Typeset`var$$],
           Alignment->Automatic,
           BaselinePosition->Baseline,
           DefaultBaseStyle->"OpenerView",
           ImageMargins->0,
           ImageSize->Automatic],
          Deployed->False,
          StripOnInput->False],
         OpenerView[{
           Tooltip["Groupoids", "List of Groupoids available"], 
           Column[{
             Tooltip[
              PasteButton[
               Defer[
                
                AbstractAlgebra`Master`Z[$CellContext` \
\[SelectionPlaceholder]]]], 
              Style[
              "Z[n] returns the cyclic group of integers mod n under addition \
when in the context of groups or the ring of integers mod n when in the \
context of rings. The option Structure can be set to Group or Ring; by \
default, when working with groups, it is set to Group and set to Ring when \
working with rings. (See SwitchStructureTo for further information.) Note \
that ZG[args] is equivalent to Z[args, Structure \[Rule] Group], while \
ZR[args] is equivalent to Z[args, Structure \[Rule] Ring]. Z[n, k] returns \
the group (or ring) of multiples of k mod n, if k is a divisor of n. \
Additionally, Z[n, I] when working with groups (or Z[n, I, Structure \[Rule] \
Group] while working with rings) returns the additive Gaussian integers mod \
n, while Z[n, I] returns the ring of Gaussian integers mod n when working \
with rings. Other available options: Mode (possible values: Computational, \
Textual, Visual, All, and Interactive (on n)).", 14]], 
             Tooltip[
              PasteButton[
               Defer[
                
                AbstractAlgebra`Master`Z[$CellContext` \
\[SelectionPlaceholder], $CellContext` \[Placeholder]]]], 
              Style[
              "Z[n] returns the cyclic group of integers mod n under addition \
when in the context of groups or the ring of integers mod n when in the \
context of rings. The option Structure can be set to Group or Ring; by \
default, when working with groups, it is set to Group and set to Ring when \
working with rings. (See SwitchStructureTo for further information.) Note \
that ZG[args] is equivalent to Z[args, Structure \[Rule] Group], while \
ZR[args] is equivalent to Z[args, Structure \[Rule] Ring]. Z[n, k] returns \
the group (or ring) of multiples of k mod n, if k is a divisor of n. \
Additionally, Z[n, I] when working with groups (or Z[n, I, Structure \[Rule] \
Group] while working with rings) returns the additive Gaussian integers mod \
n, while Z[n, I] returns the ring of Gaussian integers mod n when working \
with rings. Other available options: Mode (possible values: Computational, \
Textual, Visual, All, and Interactive (on n)).", 14]], 
             Tooltip[
              PasteButton[
               Defer[
                
                AbstractAlgebra`Master`Z[$CellContext` \
\[SelectionPlaceholder], I]]], 
              Style[
              "Z[n] returns the cyclic group of integers mod n under addition \
when in the context of groups or the ring of integers mod n when in the \
context of rings. The option Structure can be set to Group or Ring; by \
default, when working with groups, it is set to Group and set to Ring when \
working with rings. (See SwitchStructureTo for further information.) Note \
that ZG[args] is equivalent to Z[args, Structure \[Rule] Group], while \
ZR[args] is equivalent to Z[args, Structure \[Rule] Ring]. Z[n, k] returns \
the group (or ring) of multiples of k mod n, if k is a divisor of n. \
Additionally, Z[n, I] when working with groups (or Z[n, I, Structure \[Rule] \
Group] while working with rings) returns the additive Gaussian integers mod \
n, while Z[n, I] returns the ring of Gaussian integers mod n when working \
with rings. Other available options: Mode (possible values: Computational, \
Textual, Visual, All, and Interactive (on n)).", 14]], 
             Tooltip[
              PasteButton[
               Defer[
                
                AbstractAlgebra`Master`Zx[$CellContext` \
\[SelectionPlaceholder]]]], 
              Style[
              "Zx[n] returns the Groupoid of integers mod n under \
multiplication. Zx[n, k] returns the Groupoid of multiples of k mod n, if k \
is a divisor of n. Finally, Zx[n, I] returns the Groupoid of the Gaussian \
integers under mod n multiplication. Available options: Mode (possible \
values: Computational, Textual, Visual, and All).", 14]], 
             Tooltip[
              PasteButton[
               Defer[
                
                AbstractAlgebra`Master`U[$CellContext` \
\[SelectionPlaceholder]]]], 
              Style[
              "U[n] returns the group of integers mod n which are relatively \
prime to n, under multiplication. These elements are also the units in the \
ring Z[n]. (In other words, these are the elements that have inverses in the \
Groupoid Zx[n].) Other available options: Mode (possible values: \
Computational, Textual, Visual, All, and Interactive (on n)).", 14]], 
             Tooltip[
              PasteButton[
               Defer[
                
                AbstractAlgebra`Master`TwistedZ[$CellContext` \
\[SelectionPlaceholder]]]], 
              Style[
              "TwistedZ[n] returns the Groupoid with elements {0, 1, ... n-2} \
and operation Mod[#1 + #2 + #1 #2, n]&.", 14]], 
             Tooltip[
              PasteButton[
               Defer[
                
                AbstractAlgebra`Master`MaxTaker[$CellContext` \
\[SelectionPlaceholder]]]], 
              Style[
              "MaxTaker[n] returns the Groupoid with elements {1,2,...n} and \
the operation that returns the maximum of the two inputs. MaxTaker[m, n] is \
similar but the elements range over [m, n].", 14]], 
             Tooltip[
              PasteButton[
               Defer[
                
                AbstractAlgebra`Master`MinTaker[$CellContext` \
\[SelectionPlaceholder]]]], 
              Style[
              "MinTaker[n] returns the Groupoid with elements {1,2,...n} and \
the operation that returns the minimum of the two inputs. MinTaker[m, n] is \
similar but the elements range over [m, n].", 14]], 
             Tooltip[
              PasteButton[
               Defer[
                
                AbstractAlgebra`Master`FirstTaker[$CellContext` \
\[SelectionPlaceholder]]]], 
              Style[
              "FirstTaker[n] returns the Groupoid with elements {1,2,...n} \
and the operation that returns the first of the two inputs.", 14]], 
             Tooltip[
              PasteButton[
               Defer[
                
                AbstractAlgebra`Master`MeetDivisors[$CellContext` \
\[SelectionPlaceholder]]]], 
              Style[
              "MeetDivisors[n] returns the Groupoid consisting of the \
divisors of n with operation GCD.", 14]], 
             Tooltip[
              PasteButton[
               Defer[
                
                AbstractAlgebra`Master`JoinDivisors[$CellContext` \
\[SelectionPlaceholder]]]], 
              Style[
              "JoinDivisors[n] returns the Groupoid consisting of the \
divisors of n with operation LCM.", 14]], 
             Tooltip[
              PasteButton[
               Defer[
                
                AbstractAlgebra`Master`MixedDivisors[$CellContext` \
\[SelectionPlaceholder]]]], 
              Style[
              "MixedDivisors[n] returns the Groupoid consisting of the \
divisors of n with operation LCM/GCD.", 14]], 
             Tooltip[
              PasteButton[
               Defer[
                
                AbstractAlgebra`Master`RootsOfUnity[$CellContext` \
\[SelectionPlaceholder]]]], 
              Style[
              "RootsOfUnity[n] returns the Groupoid consisting of the n \
complex roots of the equation z^n = 1, under multiplication. Available \
options: Mode (possible values: Computational, Textual, Visual, All, and \
Interactive (on n)).", 14]], 
             Tooltip[
              PasteButton[
               Defer[
                
                AbstractAlgebra`Master`Dihedral[$CellContext` \
\[SelectionPlaceholder]]]], 
              Style[
              "Dihedral[n] returns the dihedral group of index n with order \
2n. By default, the generators are indicated by Rot (for the smallest angle \
of rotation) and Ref (for any reflection). D[n, Form \[Rule] Permutations] \
uses the permutations corresponding to Rot and Ref; the default is Form \
\[Rule] RotRef. D[n, RotSym \[Rule] newsy1, RefSym \[Rule] newsy2] uses the \
symbols newsy1 and newsy2 for Rot and Ref respectively. Alternate names for \
Dihedral are D and DihedralGroup.", 14]], 
             Tooltip[
              PasteButton[
               Defer[
                
                AbstractAlgebra`Master`Cyclic[$CellContext` \
\[SelectionPlaceholder]]]], 
              Style[
              "Cyclic[n] returns the cyclic group of order n with the default \
generator the string 'g'. Cyclic[n, Generator \[Rule] gen] returns the same \
group but written with generator gen (which could be a string or a symbol \
with no value). Cyclic[n, k] returns the Groupoid generated by g^k. Another \
available option: Mode (possible values: Computational, Textual, Visual, All, \
and Interactive (on n)).", 14]], 
             Tooltip[
              PasteButton[
               Defer[
                
                AbstractAlgebra`Master`Symmetric[$CellContext` \
\[SelectionPlaceholder]]]], 
              Style[
              "Symmetric[n] returns the group of permutations on the set \
{1,2,..n} under composition. There are two options for this function, \
ProductOrder and IndexLimit. Since the elements of this group are \
permutations, one can specify the order that the product is taken by using \
ProductOrder; see ProductOrder for more information, including the values \
which can be used. IndexLimit defaults to 6 and indicates the upper limit for \
the value of the index n.", 14]], 
             Tooltip[
              PasteButton[
               Defer[
                
                AbstractAlgebra`Master`Alternating[$CellContext` \
\[SelectionPlaceholder]]]], 
              Style[
              "Alternating[n] returns the group of even permutations on the \
set {1,2,..n} under composition. There are two options for this function, \
ProductOrder and IndexLimit. Since the elements of this group are \
permutations, one can specify the order that the product is taken. See \
ProductOrder for more information, including the values that can be used. \
IndexLimit defaults to 6 and indicates the upper limit for the value of the \
index n. There is also the Textual Mode for this group.", 14]], 
             Tooltip[
              PasteButton[
               Defer[
                AbstractAlgebra`Master`QuaternionGroup[]]], 
              Style[
              "QuaternionGroup[] returns the 8 element quaternion group. This \
group can be represented in various forms; the default is to represent it as \
2-by-2 matrices. The option Form controls what form to use, with the default \
value being AsMatrices. Other values are AsIJK and AsSymbols.", 14]], 
             Tooltip[
              PasteButton[
               Defer[AbstractAlgebra`Master`Klein4]], 
              Style["Klein4 returns the Klein-4 group (Viergruppe).", 14]]}]},
           False]],
        DynamicModuleValues:>{}],
       Setting[#, {0}]& ]},
     {
      TagBox[
       DynamicModuleBox[{Typeset`var$$ = False}, 
        InterpretationBox[
         StyleBox[
          PaneSelectorBox[{False->GridBox[{
             {
              OpenerBox[Dynamic[Typeset`var$$],
               Appearance->Automatic,
               AutoAction->False,
               ContinuousAction->False,
               Enabled->Automatic], 
              TagBox[
               TooltipBox["\<\"Ringoids\"\>",
                
                "\"List of Ringoids available -- You may wish to use \
SwitchStructureTo[Ring]\"",
                LabelStyle->"TextStyling"],
               
               Annotation[#, 
                "List of Ringoids available -- You may wish to use \
SwitchStructureTo[Ring]", "Tooltip"]& ]}
            },
            AutoDelete->False,
            BaselinePosition->{1, 1},
            GridBoxAlignment->{"Columns" -> {{Left}}},
            GridBoxBackground->{"Columns" -> {{Automatic}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
            GridBoxSpacings->{"Columns" -> {{0.2}}, "Rows" -> {{0.5}}}], True->
           GridBox[{
             {
              OpenerBox[Dynamic[Typeset`var$$],
               Appearance->Automatic,
               AutoAction->False,
               ContinuousAction->False,
               Enabled->Automatic], 
              TagBox[
               TooltipBox["\<\"Ringoids\"\>",
                
                "\"List of Ringoids available -- You may wish to use \
SwitchStructureTo[Ring]\"",
                LabelStyle->"TextStyling"],
               
               Annotation[#, 
                "List of Ringoids available -- You may wish to use \
SwitchStructureTo[Ring]", "Tooltip"]& ]},
             {"", 
              PaneBox[
               TagBox[GridBox[{
                  {
                   TagBox[
                    TooltipBox[
                    ButtonBox[
                    RowBox[{
                    "BooleanRing", "[", "\[SelectionPlaceholder]", "]"}],
                    BaseStyle->"Paste"],
                    StyleBox[
                    "\"BooleanRing[n] constructs the Boolean Ring consisting \
of the set of subsets of {1, 2, ..., n} with the operations symmetric \
difference and intersection. BooleanRing[B] constructs the ring with subsets \
of the list B.\"", StripOnInput -> False],
                    LabelStyle->"TextStyling"],
                    Annotation[#, 
                    Style[
                    "BooleanRing[n] constructs the Boolean Ring consisting of \
the set of subsets of {1, 2, ..., n} with the operations symmetric difference \
and intersection. BooleanRing[B] constructs the ring with subsets of the list \
B."], "Tooltip"]& ]},
                  {
                   TagBox[
                    TooltipBox[
                    ButtonBox[
                    RowBox[{
                    "LatticeRing", "[", "\[SelectionPlaceholder]", "]"}],
                    BaseStyle->"Paste"],
                    StyleBox[
                    "\"LatticeRing[n] returns the Ringoid of divisors of n \
with LCM/GCD for the addition and GCD for the multiplication.\"", 14, 
                    StripOnInput -> False],
                    LabelStyle->"TextStyling"],
                    Annotation[#, 
                    Style[
                    "LatticeRing[n] returns the Ringoid of divisors of n with \
LCM/GCD for the addition and GCD for the multiplication.", 14], "Tooltip"]& ]},
                  {
                   TagBox[
                    TooltipBox[
                    ButtonBox[
                    RowBox[{"TrivialZR", "[", "\[SelectionPlaceholder]", "]"}],
                    BaseStyle->"Paste"],
                    StyleBox[
                    "\"LatticeRing[n] returns the Ringoid of divisors of n \
with LCM/GCD for the addition and GCD for the multiplication.\"", 14, 
                    StripOnInput -> False],
                    LabelStyle->"TextStyling"],
                    Annotation[#, 
                    Style[
                    "LatticeRing[n] returns the Ringoid of divisors of n with \
LCM/GCD for the addition and GCD for the multiplication.", 14], "Tooltip"]& ]},
                  {
                   TagBox[
                    TooltipBox[
                    ButtonBox[
                    RowBox[{"Z", "[", "\[SelectionPlaceholder]", "]"}],
                    BaseStyle->"Paste"],
                    StyleBox[
                    "\"Z[n] returns the cyclic group of integers mod n under \
addition when in the context of groups or the ring of integers mod n when in \
the context of rings. The option Structure can be set to Group or Ring; by \
default, when working with groups, it is set to Group and set to Ring when \
working with rings. (See SwitchStructureTo for further information.) Note \
that ZG[args] is equivalent to Z[args, Structure \[Rule] Group], while \
ZR[args] is equivalent to Z[args, Structure \[Rule] Ring]. Z[n, k] returns \
the group (or ring) of multiples of k mod n, if k is a divisor of n. \
Additionally, Z[n, I] when working with groups (or Z[n, I, Structure \[Rule] \
Group] while working with rings) returns the additive Gaussian integers mod \
n, while Z[n, I] returns the ring of Gaussian integers mod n when working \
with rings. Other available options: Mode (possible values: Computational, \
Textual, Visual, All, and Interactive (on n)).\"", 14, StripOnInput -> False],
                    
                    LabelStyle->"TextStyling"],
                    Annotation[#, 
                    Style[
                    "Z[n] returns the cyclic group of integers mod n under \
addition when in the context of groups or the ring of integers mod n when in \
the context of rings. The option Structure can be set to Group or Ring; by \
default, when working with groups, it is set to Group and set to Ring when \
working with rings. (See SwitchStructureTo for further information.) Note \
that ZG[args] is equivalent to Z[args, Structure \[Rule] Group], while \
ZR[args] is equivalent to Z[args, Structure \[Rule] Ring]. Z[n, k] returns \
the group (or ring) of multiples of k mod n, if k is a divisor of n. \
Additionally, Z[n, I] when working with groups (or Z[n, I, Structure \[Rule] \
Group] while working with rings) returns the additive Gaussian integers mod \
n, while Z[n, I] returns the ring of Gaussian integers mod n when working \
with rings. Other available options: Mode (possible values: Computational, \
Textual, Visual, All, and Interactive (on n)).", 14], "Tooltip"]& ]},
                  {
                   TagBox[
                    TooltipBox[
                    ButtonBox[
                    RowBox[{"Z", "[", 
                    RowBox[{
                    "\[SelectionPlaceholder]", ",", "\[Placeholder]"}], "]"}],
                    
                    BaseStyle->"Paste"],
                    StyleBox[
                    "\"Z[n] returns the cyclic group of integers mod n under \
addition when in the context of groups or the ring of integers mod n when in \
the context of rings. The option Structure can be set to Group or Ring; by \
default, when working with groups, it is set to Group and set to Ring when \
working with rings. (See SwitchStructureTo for further information.) Note \
that ZG[args] is equivalent to Z[args, Structure \[Rule] Group], while \
ZR[args] is equivalent to Z[args, Structure \[Rule] Ring]. Z[n, k] returns \
the group (or ring) of multiples of k mod n, if k is a divisor of n. \
Additionally, Z[n, I] when working with groups (or Z[n, I, Structure \[Rule] \
Group] while working with rings) returns the additive Gaussian integers mod \
n, while Z[n, I] returns the ring of Gaussian integers mod n when working \
with rings. Other available options: Mode (possible values: Computational, \
Textual, Visual, All, and Interactive (on n)).\"", 14, StripOnInput -> False],
                    
                    LabelStyle->"TextStyling"],
                    Annotation[#, 
                    Style[
                    "Z[n] returns the cyclic group of integers mod n under \
addition when in the context of groups or the ring of integers mod n when in \
the context of rings. The option Structure can be set to Group or Ring; by \
default, when working with groups, it is set to Group and set to Ring when \
working with rings. (See SwitchStructureTo for further information.) Note \
that ZG[args] is equivalent to Z[args, Structure \[Rule] Group], while \
ZR[args] is equivalent to Z[args, Structure \[Rule] Ring]. Z[n, k] returns \
the group (or ring) of multiples of k mod n, if k is a divisor of n. \
Additionally, Z[n, I] when working with groups (or Z[n, I, Structure \[Rule] \
Group] while working with rings) returns the additive Gaussian integers mod \
n, while Z[n, I] returns the ring of Gaussian integers mod n when working \
with rings. Other available options: Mode (possible values: Computational, \
Textual, Visual, All, and Interactive (on n)).", 14], "Tooltip"]& ]},
                  {
                   TagBox[
                    TooltipBox[
                    ButtonBox[
                    RowBox[{"Z", "[", 
                    RowBox[{"\[SelectionPlaceholder]", ",", "\[ImaginaryI]"}],
                     "]"}],
                    BaseStyle->"Paste"],
                    StyleBox[
                    "\"LatticeRing[n] returns the Ringoid of divisors of n \
with LCM/GCD for the addition and GCD for the multiplication.\"", 14, 
                    StripOnInput -> False],
                    LabelStyle->"TextStyling"],
                    Annotation[#, 
                    Style[
                    "LatticeRing[n] returns the Ringoid of divisors of n with \
LCM/GCD for the addition and GCD for the multiplication.", 14], 
                    "Tooltip"]& ]}
                 },
                 GridBoxAlignment->{"Columns" -> {{Left}}},
                 
                 GridBoxItemSize->{
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
                "Column"],
               ImageMargins->0]}
            },
            AutoDelete->False,
            BaselinePosition->{1, 1},
            GridBoxAlignment->{"Columns" -> {{Left}}},
            GridBoxBackground->{"Columns" -> {{Automatic}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
            GridBoxSpacings->{"Columns" -> {{0.2}}, "Rows" -> {{0.5}}}]}, 
           Dynamic[Typeset`var$$],
           Alignment->Automatic,
           BaselinePosition->Baseline,
           DefaultBaseStyle->"OpenerView",
           ImageMargins->0,
           ImageSize->Automatic],
          Deployed->False,
          StripOnInput->False],
         OpenerView[{
           Tooltip[
           "Ringoids", 
            "List of Ringoids available -- You may wish to use \
SwitchStructureTo[Ring]"], 
           Column[{
             Tooltip[
              PasteButton[
               Defer[
                
                AbstractAlgebra`Master`BooleanRing[$CellContext` \
\[SelectionPlaceholder]]]], 
              Style[
              "BooleanRing[n] constructs the Boolean Ring consisting of the \
set of subsets of {1, 2, ..., n} with the operations symmetric difference and \
intersection. BooleanRing[B] constructs the ring with subsets of the list \
B."]], 
             Tooltip[
              PasteButton[
               Defer[
                
                AbstractAlgebra`Master`LatticeRing[$CellContext` \
\[SelectionPlaceholder]]]], 
              Style[
              "LatticeRing[n] returns the Ringoid of divisors of n with \
LCM/GCD for the addition and GCD for the multiplication.", 14]], 
             Tooltip[
              PasteButton[
               Defer[
                
                AbstractAlgebra`Master`TrivialZR[$CellContext` \
\[SelectionPlaceholder]]]], 
              Style[
              "LatticeRing[n] returns the Ringoid of divisors of n with \
LCM/GCD for the addition and GCD for the multiplication.", 14]], 
             Tooltip[
              PasteButton[
               Defer[
                
                AbstractAlgebra`Master`Z[$CellContext` \
\[SelectionPlaceholder]]]], 
              Style[
              "Z[n] returns the cyclic group of integers mod n under addition \
when in the context of groups or the ring of integers mod n when in the \
context of rings. The option Structure can be set to Group or Ring; by \
default, when working with groups, it is set to Group and set to Ring when \
working with rings. (See SwitchStructureTo for further information.) Note \
that ZG[args] is equivalent to Z[args, Structure \[Rule] Group], while \
ZR[args] is equivalent to Z[args, Structure \[Rule] Ring]. Z[n, k] returns \
the group (or ring) of multiples of k mod n, if k is a divisor of n. \
Additionally, Z[n, I] when working with groups (or Z[n, I, Structure \[Rule] \
Group] while working with rings) returns the additive Gaussian integers mod \
n, while Z[n, I] returns the ring of Gaussian integers mod n when working \
with rings. Other available options: Mode (possible values: Computational, \
Textual, Visual, All, and Interactive (on n)).", 14]], 
             Tooltip[
              PasteButton[
               Defer[
                
                AbstractAlgebra`Master`Z[$CellContext` \
\[SelectionPlaceholder], $CellContext` \[Placeholder]]]], 
              Style[
              "Z[n] returns the cyclic group of integers mod n under addition \
when in the context of groups or the ring of integers mod n when in the \
context of rings. The option Structure can be set to Group or Ring; by \
default, when working with groups, it is set to Group and set to Ring when \
working with rings. (See SwitchStructureTo for further information.) Note \
that ZG[args] is equivalent to Z[args, Structure \[Rule] Group], while \
ZR[args] is equivalent to Z[args, Structure \[Rule] Ring]. Z[n, k] returns \
the group (or ring) of multiples of k mod n, if k is a divisor of n. \
Additionally, Z[n, I] when working with groups (or Z[n, I, Structure \[Rule] \
Group] while working with rings) returns the additive Gaussian integers mod \
n, while Z[n, I] returns the ring of Gaussian integers mod n when working \
with rings. Other available options: Mode (possible values: Computational, \
Textual, Visual, All, and Interactive (on n)).", 14]], 
             Tooltip[
              PasteButton[
               Defer[
                
                AbstractAlgebra`Master`Z[$CellContext` \
\[SelectionPlaceholder], I]]], 
              Style[
              "LatticeRing[n] returns the Ringoid of divisors of n with \
LCM/GCD for the addition and GCD for the multiplication.", 14]]}]}, False]],
        DynamicModuleValues:>{}],
       Setting[#, {0}]& ]},
     {
      TagBox[
       DynamicModuleBox[{Typeset`var$$ = False}, 
        InterpretationBox[
         StyleBox[
          PaneSelectorBox[{False->GridBox[{
             {
              OpenerBox[Dynamic[Typeset`var$$],
               Appearance->Automatic,
               AutoAction->False,
               ContinuousAction->False,
               Enabled->Automatic], 
              TagBox[
               TooltipBox["\<\"Morphoids\"\>",
                "\"List of Morphoids available\"",
                LabelStyle->"TextStyling"],
               Annotation[#, "List of Morphoids available", "Tooltip"]& ]}
            },
            AutoDelete->False,
            BaselinePosition->{1, 1},
            GridBoxAlignment->{"Columns" -> {{Left}}},
            GridBoxBackground->{"Columns" -> {{Automatic}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
            GridBoxSpacings->{"Columns" -> {{0.2}}, "Rows" -> {{0.5}}}], True->
           GridBox[{
             {
              OpenerBox[Dynamic[Typeset`var$$],
               Appearance->Automatic,
               AutoAction->False,
               ContinuousAction->False,
               Enabled->Automatic], 
              TagBox[
               TooltipBox["\<\"Morphoids\"\>",
                "\"List of Morphoids available\"",
                LabelStyle->"TextStyling"],
               Annotation[#, "List of Morphoids available", "Tooltip"]& ]},
             {"", 
              PaneBox[
               TagBox[GridBox[{
                  {
                   TagBox[
                    TooltipBox[
                    ButtonBox[
                    RowBox[{
                    "InducedCanonical", "[", "\[SelectionPlaceholder]", "]"}],
                    
                    BaseStyle->"Paste"],
                    StyleBox[
                    "\"InducedCanonical[f], given a Morphoid f: G \[Rule] H, \
returns the Morphoid g : G \[Rule] G/Ker[f].\"", 14, StripOnInput -> False],
                    LabelStyle->"TextStyling"],
                    Annotation[#, 
                    Style[
                    "InducedCanonical[f], given a Morphoid f: G \[Rule] H, \
returns the Morphoid g : G \[Rule] G/Ker[f].", 14], "Tooltip"]& ]},
                  {
                   TagBox[
                    TooltipBox[
                    ButtonBox[
                    RowBox[{
                    "InducedIsomorphism", "[", "\[SelectionPlaceholder]", 
                    "]"}],
                    BaseStyle->"Paste"],
                    StyleBox[
                    "\"InducedIsomorphism[f], given a Morphoid f: G \[Rule] \
H, returns the Morphoid g : G/Kernel[f] \[Rule] Image[H].\"", 14, 
                    StripOnInput -> False],
                    LabelStyle->"TextStyling"],
                    Annotation[#, 
                    Style[
                    "InducedIsomorphism[f], given a Morphoid f: G \[Rule] H, \
returns the Morphoid g : G/Kernel[f] \[Rule] Image[H].", 14], "Tooltip"]& ]},
                  {
                   TagBox[
                    TooltipBox[
                    ButtonBox[
                    RowBox[{"Sign", "[", "\[SelectionPlaceholder]", "]"}],
                    BaseStyle->"Paste"],
                    StyleBox[
                    "\"\\!\\(\\*RowBox[{\\\"Sign\\\", \\\"[\\\", \
StyleBox[\\\"x\\\", \\\"TI\\\"], \\\"]\\\"}]\\) gives \
\\!\\(\\*RowBox[{\\\"-\\\", \\\"1\\\"}]\\), 0 or 1 depending on whether \
\\!\\(\\*StyleBox[\\\"x\\\", \\\"TI\\\"]\\) is negative, zero, or positive. \
\"", 14, StripOnInput -> False],
                    LabelStyle->"TextStyling"],
                    Annotation[#, 
                    Style[
                    "\!\(\*RowBox[{\"Sign\", \"[\", StyleBox[\"x\", \"TI\"], \
\"]\"}]\) gives \!\(\*RowBox[{\"-\", \"1\"}]\), 0 or 1 depending on whether \
\!\(\*StyleBox[\"x\", \"TI\"]\) is negative, zero, or positive. ", 14], 
                    "Tooltip"]& ]},
                  {
                   TagBox[
                    TooltipBox[
                    ButtonBox[
                    RowBox[{"ZMap", "[", 
                    RowBox[{
                    "\[SelectionPlaceholder]", ",", "\[Placeholder]"}], "]"}],
                    
                    BaseStyle->"Paste"],
                    StyleBox[
                    "\"ZMap[m, n] creates Morphoid[Mod[#, n]&, Z[m], Z[n]]. \
ZMap[m, n, g \[Rule] h] creates Morphoid[g \[Rule] h, Z[m], Z[n]], where g \
must be a generator in Z[m]. In either case, one can add the option Structure \
\[Rule] Ring to indicate that Z[m] and Z[n] should be considered rings.\"", 
                    14, StripOnInput -> False],
                    LabelStyle->"TextStyling"],
                    Annotation[#, 
                    Style[
                    "ZMap[m, n] creates Morphoid[Mod[#, n]&, Z[m], Z[n]]. \
ZMap[m, n, g \[Rule] h] creates Morphoid[g \[Rule] h, Z[m], Z[n]], where g \
must be a generator in Z[m]. In either case, one can add the option Structure \
\[Rule] Ring to indicate that Z[m] and Z[n] should be considered rings.", 14],
                     "Tooltip"]& ]},
                  {
                   TagBox[
                    TooltipBox[
                    ButtonBox[
                    RowBox[{"ZMap", "[", 
                    RowBox[{
                    "\[SelectionPlaceholder]", ",", "\[Placeholder]", ",", 
                    RowBox[{"\[Placeholder]", "\[Rule]", "\[Placeholder]"}]}],
                     "]"}],
                    BaseStyle->"Paste"],
                    StyleBox[
                    "\"ZMap[m, n] creates Morphoid[Mod[#, n]&, Z[m], Z[n]]. \
ZMap[m, n, g \[Rule] h] creates Morphoid[g \[Rule] h, Z[m], Z[n]], where g \
must be a generator in Z[m]. In either case, one can add the option Structure \
\[Rule] Ring to indicate that Z[m] and Z[n] should be considered rings.\"", 
                    14, StripOnInput -> False],
                    LabelStyle->"TextStyling"],
                    Annotation[#, 
                    Style[
                    "ZMap[m, n] creates Morphoid[Mod[#, n]&, Z[m], Z[n]]. \
ZMap[m, n, g \[Rule] h] creates Morphoid[g \[Rule] h, Z[m], Z[n]], where g \
must be a generator in Z[m]. In either case, one can add the option Structure \
\[Rule] Ring to indicate that Z[m] and Z[n] should be considered rings.", 14],
                     "Tooltip"]& ]}
                 },
                 GridBoxAlignment->{"Columns" -> {{Left}}},
                 
                 GridBoxItemSize->{
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
                "Column"],
               ImageMargins->0]}
            },
            AutoDelete->False,
            BaselinePosition->{1, 1},
            GridBoxAlignment->{"Columns" -> {{Left}}},
            GridBoxBackground->{"Columns" -> {{Automatic}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
            GridBoxSpacings->{"Columns" -> {{0.2}}, "Rows" -> {{0.5}}}]}, 
           Dynamic[Typeset`var$$],
           Alignment->Automatic,
           BaselinePosition->Baseline,
           DefaultBaseStyle->"OpenerView",
           ImageMargins->0,
           ImageSize->Automatic],
          Deployed->False,
          StripOnInput->False],
         OpenerView[{
           Tooltip["Morphoids", "List of Morphoids available"], 
           Column[{
             Tooltip[
              PasteButton[
               Defer[
                
                AbstractAlgebra`Master`InducedCanonical[$CellContext` \
\[SelectionPlaceholder]]]], 
              Style[
              "InducedCanonical[f], given a Morphoid f: G \[Rule] H, returns \
the Morphoid g : G \[Rule] G/Ker[f].", 14]], 
             Tooltip[
              PasteButton[
               Defer[
                
                AbstractAlgebra`Master`InducedIsomorphism[$CellContext` \
\[SelectionPlaceholder]]]], 
              Style[
              "InducedIsomorphism[f], given a Morphoid f: G \[Rule] H, \
returns the Morphoid g : G/Kernel[f] \[Rule] Image[H].", 14]], 
             Tooltip[
              PasteButton[
               Defer[
                Sign[$CellContext` \[SelectionPlaceholder]]]], 
              Style[
              "\!\(\*RowBox[{\"Sign\", \"[\", StyleBox[\"x\", \"TI\"], \
\"]\"}]\) gives \!\(\*RowBox[{\"-\", \"1\"}]\), 0 or 1 depending on whether \
\!\(\*StyleBox[\"x\", \"TI\"]\) is negative, zero, or positive. ", 14]], 
             Tooltip[
              PasteButton[
               Defer[
                
                AbstractAlgebra`Master`ZMap[$CellContext` \
\[SelectionPlaceholder], $CellContext` \[Placeholder]]]], 
              Style[
              "ZMap[m, n] creates Morphoid[Mod[#, n]&, Z[m], Z[n]]. ZMap[m, \
n, g \[Rule] h] creates Morphoid[g \[Rule] h, Z[m], Z[n]], where g must be a \
generator in Z[m]. In either case, one can add the option Structure \[Rule] \
Ring to indicate that Z[m] and Z[n] should be considered rings.", 14]], 
             Tooltip[
              PasteButton[
               Defer[
                
                AbstractAlgebra`Master`ZMap[$CellContext` \
\[SelectionPlaceholder], $CellContext` \[Placeholder], $CellContext` \
\[Placeholder] -> $CellContext` \[Placeholder]]]], 
              Style[
              "ZMap[m, n] creates Morphoid[Mod[#, n]&, Z[m], Z[n]]. ZMap[m, \
n, g \[Rule] h] creates Morphoid[g \[Rule] h, Z[m], Z[n]], where g must be a \
generator in Z[m]. In either case, one can add the option Structure \[Rule] \
Ring to indicate that Z[m] and Z[n] should be considered rings.", 14]]}]}, 
          False]],
        DynamicModuleValues:>{}],
       Setting[#, {0}]& ]},
     {
      TagBox[
       DynamicModuleBox[{Typeset`var$$ = False}, 
        InterpretationBox[
         StyleBox[
          PaneSelectorBox[{False->GridBox[{
             {
              OpenerBox[Dynamic[Typeset`var$$],
               Appearance->Automatic,
               AutoAction->False,
               ContinuousAction->False,
               Enabled->Automatic], 
              TagBox[
               TooltipBox["\<\"General AbstractAlgebra\"\>",
                "\"List of general functions available for AbstractAlgebra\"",
                
                LabelStyle->"TextStyling"],
               
               Annotation[#, 
                "List of general functions available for AbstractAlgebra", 
                "Tooltip"]& ]}
            },
            AutoDelete->False,
            BaselinePosition->{1, 1},
            GridBoxAlignment->{"Columns" -> {{Left}}},
            GridBoxBackground->{"Columns" -> {{Automatic}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
            GridBoxSpacings->{"Columns" -> {{0.2}}, "Rows" -> {{0.5}}}], True->
           GridBox[{
             {
              OpenerBox[Dynamic[Typeset`var$$],
               Appearance->Automatic,
               AutoAction->False,
               ContinuousAction->False,
               Enabled->Automatic], 
              TagBox[
               TooltipBox["\<\"General AbstractAlgebra\"\>",
                "\"List of general functions available for AbstractAlgebra\"",
                
                LabelStyle->"TextStyling"],
               
               Annotation[#, 
                "List of general functions available for AbstractAlgebra", 
                "Tooltip"]& ]},
             {"", 
              PaneBox[
               TagBox[GridBox[{
                  {
                   TagBox[
                    TooltipBox[
                    ButtonBox[
                    RowBox[{
                    "AssociativeQ", "[", "\[SelectionPlaceholder]", "]"}],
                    BaseStyle->"Paste"],
                    StyleBox[
                    "\"AssociativeQ[S] returns True if the structure S is \
associative, and False otherwise. When used with rings, one has the Operation \
option, which can have the value Addition, Multiplication or Both. Another \
option: Mode (possible values: Computational, Textual, Visual, and All)\"", 
                    14, StripOnInput -> False],
                    LabelStyle->"TextStyling"],
                    Annotation[#, 
                    Style[
                    "AssociativeQ[S] returns True if the structure S is \
associative, and False otherwise. When used with rings, one has the Operation \
option, which can have the value Addition, Multiplication or Both. Another \
option: Mode (possible values: Computational, Textual, Visual, and All)", 14],
                     "Tooltip"]& ]},
                  {
                   TagBox[
                    TooltipBox[
                    ButtonBox[
                    RowBox[{"CartesianProduct", "[", 
                    RowBox[{
                    "\[SelectionPlaceholder]", ",", "\[Placeholder]"}], "]"}],
                    
                    BaseStyle->"Paste"],
                    StyleBox[
                    "\"CartesianProduct[els1, els2] returns the Cartesian \
product, as a list of ordered pairs, of the two sets  els1 and els2. \
CartesianProduct[els1, els2, Partition \[Rule] True] partitions the ordered \
pairs using the Partition function, cut to the length of els2. \
CartesianProduct[ListOfLists] returns the Cartesian product of the lists of \
elements in ListOfLists.\"", 14, StripOnInput -> False],
                    LabelStyle->"TextStyling"],
                    Annotation[#, 
                    Style[
                    "CartesianProduct[els1, els2] returns the Cartesian \
product, as a list of ordered pairs, of the two sets  els1 and els2. \
CartesianProduct[els1, els2, Partition \[Rule] True] partitions the ordered \
pairs using the Partition function, cut to the length of els2. \
CartesianProduct[ListOfLists] returns the Cartesian product of the lists of \
elements in ListOfLists.", 14], "Tooltip"]& ]},
                  {
                   TagBox[
                    TooltipBox[
                    ButtonBox[
                    RowBox[{
                    "CayleyTable", "[", "\[SelectionPlaceholder]", "]"}],
                    BaseStyle->"Paste"],
                    StyleBox[
                    "\"CayleyTable[G] returns the Cayley table for the \
structure G colored with a different color for each element in G. If it is \
desired that the elements (Elements[G]) be reordered, then CayleyTable[G, \
TheSet \[Rule] NewOrder] will return a new Cayley table according to the new \
ordering of the elements as found in the list NewOrder. When used with rings, \
the Operation option can be used, which can have the value Addition, \
Multiplication or Both. Other options specific to CayleyTable (with the \
default value given in parentheses) are HeadingsColored (True), ShowOperator \
(True), ShowName (True), ShowBodyText (True), ShowSidesText (True), ShowKey \
(True), VarToUse ('g'), KeyForm (InputForm), and CayleyForm (InputForm). \
CayleyTable[{G1,G2,..Gn},opts] returns CayleyTable[G1,opts], \
CayleyTable[G2,opts] and so on. Multiple CayleyTables can also be obtained by \
using the following variant forms: CayleyTable[{G1,G2,..Gn}, {opts1, opts2, \
.. optsn}] (optsi applies to Gi) and CayleyTable[{{G1, opts1}, {G2, \
opts2},..{Gn, optsn}}] (optsi applies to Gi).\"", 14, StripOnInput -> False],
                    LabelStyle->"TextStyling"],
                    Annotation[#, 
                    Style[
                    "CayleyTable[G] returns the Cayley table for the \
structure G colored with a different color for each element in G. If it is \
desired that the elements (Elements[G]) be reordered, then CayleyTable[G, \
TheSet \[Rule] NewOrder] will return a new Cayley table according to the new \
ordering of the elements as found in the list NewOrder. When used with rings, \
the Operation option can be used, which can have the value Addition, \
Multiplication or Both. Other options specific to CayleyTable (with the \
default value given in parentheses) are HeadingsColored (True), ShowOperator \
(True), ShowName (True), ShowBodyText (True), ShowSidesText (True), ShowKey \
(True), VarToUse ('g'), KeyForm (InputForm), and CayleyForm (InputForm). \
CayleyTable[{G1,G2,..Gn},opts] returns CayleyTable[G1,opts], \
CayleyTable[G2,opts] and so on. Multiple CayleyTables can also be obtained by \
using the following variant forms: CayleyTable[{G1,G2,..Gn}, {opts1, opts2, \
.. optsn}] (optsi applies to Gi) and CayleyTable[{{G1, opts1}, {G2, \
opts2},..{Gn, optsn}}] (optsi applies to Gi).", 14], "Tooltip"]& ]},
                  {
                   TagBox[
                    TooltipBox[
                    ButtonBox[
                    RowBox[{
                    "CayleyTables", "[", "\[SelectionPlaceholder]", "]"}],
                    BaseStyle->"Paste"],
                    StyleBox[
                    "\"CayleyTables[R] returns the Cayley tables (in double \
array form), for the additive and multiplicative Groupoids associated with \
the Ringoid R. CayleyTables[R, Mode \[Rule] Visual] returns a graphical view \
of these tables. See CayleyTable for a description of the available \
options.\"", 14, StripOnInput -> False],
                    LabelStyle->"TextStyling"],
                    Annotation[#, 
                    Style[
                    
                    "CayleyTables[R] returns the Cayley tables (in double \
array form), for the additive and multiplicative Groupoids associated with \
the Ringoid R. CayleyTables[R, Mode \[Rule] Visual] returns a graphical view \
of these tables. See CayleyTable for a description of the available options.",
                     14], "Tooltip"]& ]},
                  {
                   TagBox[
                    TooltipBox[
                    ButtonBox[
                    RowBox[{"ClosedQ", "[", "\[SelectionPlaceholder]", "]"}],
                    BaseStyle->"Paste"],
                    StyleBox[
                    "\"ClosedQ[S] returns True if the set of elements in the \
structure S is closed under its operation, and False otherwise. Additionally, \
ClosedQ[S, H] determines whether H is a closed subset of the structure S. \
When used with rings, the Operation option can be used, which can have the \
value Addition, Multiplication or Both. Another available option: Mode \
(possible values: Computational, Textual, Visual, and All).\"", 14, 
                    StripOnInput -> False],
                    LabelStyle->"TextStyling"],
                    Annotation[#, 
                    Style[
                    "ClosedQ[S] returns True if the set of elements in the \
structure S is closed under its operation, and False otherwise. Additionally, \
ClosedQ[S, H] determines whether H is a closed subset of the structure S. \
When used with rings, the Operation option can be used, which can have the \
value Addition, Multiplication or Both. Another available option: Mode \
(possible values: Computational, Textual, Visual, and All).", 14], 
                    "Tooltip"]& ]},
                  {
                   TagBox[
                    TooltipBox[
                    ButtonBox[
                    RowBox[{"CosetToList", "[", 
                    RowBox[{
                    "\[SelectionPlaceholder]", ",", "\[Placeholder]"}], "]"}],
                    
                    BaseStyle->"Paste"],
                    StyleBox[
                    "\"CosetToList[G, coset] returns the coset (represented \
as a list) in the quotient group/ring corresponding to the coset represented \
in the form g + NS (or g NS).\"", 14, StripOnInput -> False],
                    LabelStyle->"TextStyling"],
                    Annotation[#, 
                    Style[
                    "CosetToList[G, coset] returns the coset (represented as \
a list) in the quotient group/ring corresponding to the coset represented in \
the form g + NS (or g NS).", 14], "Tooltip"]& ]},
                  {
                   TagBox[
                    TooltipBox[
                    ButtonBox[
                    RowBox[{"DirectProduct", "[", 
                    RowBox[{
                    "\[SelectionPlaceholder]", ",", "\[Placeholder]"}], "]"}],
                    
                    BaseStyle->"Paste"],
                    StyleBox[
                    "\"DirectProduct[S1, S2] returns the direct product of \
the structured sets (Groupoids or Ringoids) S1 and S2. (Any number of \
arguments can be used.)\"", 14, StripOnInput -> False],
                    LabelStyle->"TextStyling"],
                    Annotation[#, 
                    Style[
                    "DirectProduct[S1, S2] returns the direct product of the \
structured sets (Groupoids or Ringoids) S1 and S2. (Any number of arguments \
can be used.)", 14], "Tooltip"]& ]},
                  {
                   TagBox[
                    TooltipBox[
                    ButtonBox[
                    RowBox[{"ElementQ", "[", 
                    RowBox[{
                    "\[SelectionPlaceholder]", ",", "\[Placeholder]"}], "]"}],
                    
                    BaseStyle->"Paste"],
                    StyleBox[
                    "\"ElementQ[x, S] yields True or False depending on \
whether or not x is an element of the structured set S.\"", 14, StripOnInput -> 
                    False],
                    LabelStyle->"TextStyling"],
                    Annotation[#, 
                    Style[
                    "ElementQ[x, S] yields True or False depending on whether \
or not x is an element of the structured set S.", 14], "Tooltip"]& ]},
                  {
                   TagBox[
                    TooltipBox[
                    ButtonBox[
                    RowBox[{"Elements", "[", "\[SelectionPlaceholder]", "]"}],
                    
                    BaseStyle->"Paste"],
                    StyleBox[
                    "\"Elements[S] returns the list of elements contained in \
the structured set S (either a Groupoid or Ringoid). Elements[{S1,S2,..}] \
returns the elements in each of the structured sets.\"", 14, StripOnInput -> 
                    False],
                    LabelStyle->"TextStyling"],
                    Annotation[#, 
                    Style[
                    "Elements[S] returns the list of elements contained in \
the structured set S (either a Groupoid or Ringoid). Elements[{S1,S2,..}] \
returns the elements in each of the structured sets.", 14], "Tooltip"]& ]},
                  {
                   TagBox[
                    TooltipBox[
                    ButtonBox[
                    RowBox[{"ElementToCoset", "[", 
                    RowBox[{
                    "\[SelectionPlaceholder]", ",", "\[Placeholder]"}], "]"}],
                    
                    BaseStyle->"Paste"],
                    StyleBox[
                    "\"ElementToCoset[Q, el], assuming Q is the quotient \
group G/N and el is an element in G, this returns the coset containing el.\"",
                     14, StripOnInput -> False],
                    LabelStyle->"TextStyling"],
                    Annotation[#, 
                    Style[
                    "ElementToCoset[Q, el], assuming Q is the quotient group \
G/N and el is an element in G, this returns the coset containing el.", 14], 
                    "Tooltip"]& ]},
                  {
                   TagBox[
                    TooltipBox[
                    ButtonBox[
                    RowBox[{"ElementToPower", "[", 
                    RowBox[{
                    "\[SelectionPlaceholder]", ",", "\[Placeholder]", ",", 
                    "\[Placeholder]"}], "]"}],
                    BaseStyle->"Paste"],
                    StyleBox[
                    "\"ElementToPower[G, g, n] returns the nth power \
(multiple, in an additive groupoid) of the element g in the structure G, \
where n can be any integer).\"", 14, StripOnInput -> False],
                    LabelStyle->"TextStyling"],
                    Annotation[#, 
                    Style[
                    "ElementToPower[G, g, n] returns the nth power (multiple, \
in an additive groupoid) of the element g in the structure G, where n can be \
any integer).", 14], "Tooltip"]& ]},
                  {
                   TagBox[
                    TooltipBox[
                    ButtonBox[
                    RowBox[{
                    "HasIdentityQ", "[", "\[SelectionPlaceholder]", "]"}],
                    BaseStyle->"Paste"],
                    StyleBox[
                    "\"HasIdentityQ[S] returns True or False depending on \
whether or not the (two-sided) identity (or identities for rings) of the \
structure S exists. When used with rings, the Operation option can be used, \
which can have the value Addition, Multiplication or Both. If S is a group, \
GroupIdentity[S] returns the identity, if one exists, while for rings, \
Zero[S] and Unity[S] return the additive and multiplicative identities, if \
they exist. Available option: Mode (possible values: Computational, Textual, \
Visual, and All).\"", 14, StripOnInput -> False],
                    LabelStyle->"TextStyling"],
                    Annotation[#, 
                    Style[
                    "HasIdentityQ[S] returns True or False depending on \
whether or not the (two-sided) identity (or identities for rings) of the \
structure S exists. When used with rings, the Operation option can be used, \
which can have the value Addition, Multiplication or Both. If S is a group, \
GroupIdentity[S] returns the identity, if one exists, while for rings, \
Zero[S] and Unity[S] return the additive and multiplicative identities, if \
they exist. Available option: Mode (possible values: Computational, Textual, \
Visual, and All).", 14], "Tooltip"]& ]},
                  {
                   TagBox[
                    TooltipBox[
                    ButtonBox[
                    RowBox[{
                    "HasInversesQ", "[", "\[SelectionPlaceholder]", "]"}],
                    BaseStyle->"Paste"],
                    StyleBox[
                    "\"HasInversesQ[G] returns True or False depending on \
whether all the elements in G have inverses or not. When used with rings,  \
the Operation option can be used, which can have the value Addition, \
Multiplication or Both. Available option: Mode (possible values: \
Computational, Textual, Visual1, Visual2, and All).\"", 14, StripOnInput -> 
                    False],
                    LabelStyle->"TextStyling"],
                    Annotation[#, 
                    Style[
                    "HasInversesQ[G] returns True or False depending on \
whether all the elements in G have inverses or not. When used with rings,  \
the Operation option can be used, which can have the value Addition, \
Multiplication or Both. Available option: Mode (possible values: \
Computational, Textual, Visual1, Visual2, and All).", 14], "Tooltip"]& ]},
                  {
                   TagBox[
                    TooltipBox[
                    ButtonBox[
                    RowBox[{"MultipleOfElement", "[", 
                    RowBox[{
                    "\[SelectionPlaceholder]", ",", "\[Placeholder]", ",", 
                    "\[Placeholder]"}], "]"}],
                    BaseStyle->"Paste"],
                    StyleBox[
                    "\"MultipleOfElement[R, r, n] returns the nth multiple of \
the element r in the structure R. In other words, r + r + ... + r (n times) \
is returned. This is the additive version of ElementToPower.\"", 14, 
                    StripOnInput -> False],
                    LabelStyle->"TextStyling"],
                    Annotation[#, 
                    Style[
                    "MultipleOfElement[R, r, n] returns the nth multiple of \
the element r in the structure R. In other words, r + r + ... + r (n times) \
is returned. This is the additive version of ElementToPower.", 14], 
                    "Tooltip"]& ]},
                  {
                   TagBox[
                    TooltipBox[
                    ButtonBox[
                    RowBox[{
                    "RandomElement", "[", "\[SelectionPlaceholder]", "]"}],
                    BaseStyle->"Paste"],
                    StyleBox[
                    "\"RandomElement[S] returns a random element from the \
Groupoid or Ringoid (or simply the list) S. Available options are SelectFrom \
\[Rule] NonIdentity (this, the default, guarantees that the identity is not \
selected for Groupoids and neither the zero nor the unit is selected for \
Ringoids), SelectFrom \[Rule] NonUnity (which guarantees the unity is not \
selected with Ringoids), SelectFrom \[Rule] NonZero (which guarantees the \
zero is not selected with Ringoids), and SelectFrom \[Rule] Any (which \
imposes no restrictions). For polynomial extension rings, the options \
LowerDegreeOK and Monic are also available; see these for details (after \
working with rings). Additionally, one can obtain a random element from some \
specialized sets as follows: RandomElement[Z[Sqrt[p]],max] (for p square-free \
and max defaulting to 100) returns a + b Sqrt[p] with both a and b in the \
range [-max, max]. One can use p = -1 also, or use equivalently use Z[I].\"", 
                    14, StripOnInput -> False],
                    LabelStyle->"TextStyling"],
                    Annotation[#, 
                    Style[
                    "RandomElement[S] returns a random element from the \
Groupoid or Ringoid (or simply the list) S. Available options are SelectFrom \
\[Rule] NonIdentity (this, the default, guarantees that the identity is not \
selected for Groupoids and neither the zero nor the unit is selected for \
Ringoids), SelectFrom \[Rule] NonUnity (which guarantees the unity is not \
selected with Ringoids), SelectFrom \[Rule] NonZero (which guarantees the \
zero is not selected with Ringoids), and SelectFrom \[Rule] Any (which \
imposes no restrictions). For polynomial extension rings, the options \
LowerDegreeOK and Monic are also available; see these for details (after \
working with rings). Additionally, one can obtain a random element from some \
specialized sets as follows: RandomElement[Z[Sqrt[p]],max] (for p square-free \
and max defaulting to 100) returns a + b Sqrt[p] with both a and b in the \
range [-max, max]. One can use p = -1 also, or use equivalently use Z[I].", 
                    14], "Tooltip"]& ]},
                  {
                   TagBox[
                    TooltipBox[
                    ButtonBox[
                    RowBox[{"RandomElements", "[", 
                    RowBox[{
                    "\[SelectionPlaceholder]", ",", "\[Placeholder]"}], "]"}],
                    
                    BaseStyle->"Paste"],
                    StyleBox[
                    "\"RandomElements[S, n] returns a set of n random \
elements from the Groupoid or Ringoid (or list) S. Available options are \
SelectFrom \[Rule] NonIdentity (this default guarantees that the identity is \
not selected for Groupoids and neither the zero nor the unit is selected for \
Ringoids), SelectFrom \[Rule] NonZero (which guarantees the zero is not \
selected with Ringoids), and SelectFrom \[Rule] Any (which imposes no \
restrictions). Additionally, Replacement \[Rule] True will allow an element \
to be selected more than once (while set to False will not allow this). \
Additionally, one obtain a random element from some specialized sets as \
indicated under RandomElement, by adding the final parameter indicating how \
many to choose.\"", 14, StripOnInput -> False],
                    LabelStyle->"TextStyling"],
                    Annotation[#, 
                    Style[
                    "RandomElements[S, n] returns a set of n random elements \
from the Groupoid or Ringoid (or list) S. Available options are SelectFrom \
\[Rule] NonIdentity (this default guarantees that the identity is not \
selected for Groupoids and neither the zero nor the unit is selected for \
Ringoids), SelectFrom \[Rule] NonZero (which guarantees the zero is not \
selected with Ringoids), and SelectFrom \[Rule] Any (which imposes no \
restrictions). Additionally, Replacement \[Rule] True will allow an element \
to be selected more than once (while set to False will not allow this). \
Additionally, one obtain a random element from some specialized sets as \
indicated under RandomElement, by adding the final parameter indicating how \
many to choose.", 14], "Tooltip"]& ]},
                  {
                   TagBox[
                    TooltipBox[
                    ButtonBox[
                    RowBox[{"Randomize", "[", "\[SelectionPlaceholder]", "]"}],
                    BaseStyle->"Paste"],
                    StyleBox[
                    "\"Randomize[list] will randomly permute the elements in \
list. It is also an option, which takes True or False, to \
DisguiseGroupoid.\"", 14, StripOnInput -> False],
                    LabelStyle->"TextStyling"],
                    Annotation[#, 
                    Style[
                    "Randomize[list] will randomly permute the elements in \
list. It is also an option, which takes True or False, to DisguiseGroupoid.", 
                    14], "Tooltip"]& ]},
                  {
                   TagBox[
                    TooltipBox[
                    ButtonBox[
                    RowBox[{"Size", "[", "\[SelectionPlaceholder]", "]"}],
                    BaseStyle->"Paste"],
                    StyleBox[
                    "\"Size[S] returns the cardinality of the set of elements \
in the structured set S. This is identical to the function Order.\"", 14, 
                    StripOnInput -> False],
                    LabelStyle->"TextStyling"],
                    Annotation[#, 
                    Style[
                    "Size[S] returns the cardinality of the set of elements \
in the structured set S. This is identical to the function Order.", 14], 
                    "Tooltip"]& ]},
                  {
                   TagBox[
                    TooltipBox[
                    ButtonBox[
                    RowBox[{"SubsetQ", "[", 
                    RowBox[{
                    "\[SelectionPlaceholder]", ",", "\[Placeholder]"}], "]"}],
                    
                    BaseStyle->"Paste"],
                    StyleBox[
                    "\"SubsetQ[A, B] returns True if A is a subset of B, and \
False otherwise.\"", 14, StripOnInput -> False],
                    LabelStyle->"TextStyling"],
                    Annotation[#, 
                    Style[
                    "SubsetQ[A, B] returns True if A is a subset of B, and \
False otherwise.", 14], "Tooltip"]& ]}
                 },
                 GridBoxAlignment->{"Columns" -> {{Left}}},
                 
                 GridBoxItemSize->{
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
                "Column"],
               ImageMargins->0]}
            },
            AutoDelete->False,
            BaselinePosition->{1, 1},
            GridBoxAlignment->{"Columns" -> {{Left}}},
            GridBoxBackground->{"Columns" -> {{Automatic}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
            GridBoxSpacings->{"Columns" -> {{0.2}}, "Rows" -> {{0.5}}}]}, 
           Dynamic[Typeset`var$$],
           Alignment->Automatic,
           BaselinePosition->Baseline,
           DefaultBaseStyle->"OpenerView",
           ImageMargins->0,
           ImageSize->Automatic],
          Deployed->False,
          StripOnInput->False],
         OpenerView[{
           Tooltip[
           "General AbstractAlgebra", 
            "List of general functions available for AbstractAlgebra"], 
           Column[{
             Tooltip[
              PasteButton[
               Defer[
                
                AbstractAlgebra`Master`AssociativeQ[$CellContext` \
\[SelectionPlaceholder]]]], 
              Style[
              "AssociativeQ[S] returns True if the structure S is \
associative, and False otherwise. When used with rings, one has the Operation \
option, which can have the value Addition, Multiplication or Both. Another \
option: Mode (possible values: Computational, Textual, Visual, and All)", 
               14]], 
             Tooltip[
              PasteButton[
               Defer[
                
                AbstractAlgebra`Master`CartesianProduct[$CellContext` \
\[SelectionPlaceholder], $CellContext` \[Placeholder]]]], 
              Style[
              "CartesianProduct[els1, els2] returns the Cartesian product, as \
a list of ordered pairs, of the two sets  els1 and els2. \
CartesianProduct[els1, els2, Partition \[Rule] True] partitions the ordered \
pairs using the Partition function, cut to the length of els2. \
CartesianProduct[ListOfLists] returns the Cartesian product of the lists of \
elements in ListOfLists.", 14]], 
             Tooltip[
              PasteButton[
               Defer[
                
                AbstractAlgebra`Master`CayleyTable[$CellContext` \
\[SelectionPlaceholder]]]], 
              Style[
              "CayleyTable[G] returns the Cayley table for the structure G \
colored with a different color for each element in G. If it is desired that \
the elements (Elements[G]) be reordered, then CayleyTable[G, TheSet \[Rule] \
NewOrder] will return a new Cayley table according to the new ordering of the \
elements as found in the list NewOrder. When used with rings, the Operation \
option can be used, which can have the value Addition, Multiplication or \
Both. Other options specific to CayleyTable (with the default value given in \
parentheses) are HeadingsColored (True), ShowOperator (True), ShowName \
(True), ShowBodyText (True), ShowSidesText (True), ShowKey (True), VarToUse \
('g'), KeyForm (InputForm), and CayleyForm (InputForm). \
CayleyTable[{G1,G2,..Gn},opts] returns CayleyTable[G1,opts], \
CayleyTable[G2,opts] and so on. Multiple CayleyTables can also be obtained by \
using the following variant forms: CayleyTable[{G1,G2,..Gn}, {opts1, opts2, \
.. optsn}] (optsi applies to Gi) and CayleyTable[{{G1, opts1}, {G2, \
opts2},..{Gn, optsn}}] (optsi applies to Gi).", 14]], 
             Tooltip[
              PasteButton[
               Defer[
                
                AbstractAlgebra`Master`CayleyTables[$CellContext` \
\[SelectionPlaceholder]]]], 
              Style[
              "CayleyTables[R] returns the Cayley tables (in double array \
form), for the additive and multiplicative Groupoids associated with the \
Ringoid R. CayleyTables[R, Mode \[Rule] Visual] returns a graphical view of \
these tables. See CayleyTable for a description of the available options.", 
               14]], 
             Tooltip[
              PasteButton[
               Defer[
                
                AbstractAlgebra`Master`ClosedQ[$CellContext` \
\[SelectionPlaceholder]]]], 
              Style[
              "ClosedQ[S] returns True if the set of elements in the \
structure S is closed under its operation, and False otherwise. Additionally, \
ClosedQ[S, H] determines whether H is a closed subset of the structure S. \
When used with rings, the Operation option can be used, which can have the \
value Addition, Multiplication or Both. Another available option: Mode \
(possible values: Computational, Textual, Visual, and All).", 14]], 
             Tooltip[
              PasteButton[
               Defer[
                
                AbstractAlgebra`Master`CosetToList[$CellContext` \
\[SelectionPlaceholder], $CellContext` \[Placeholder]]]], 
              Style[
              "CosetToList[G, coset] returns the coset (represented as a \
list) in the quotient group/ring corresponding to the coset represented in \
the form g + NS (or g NS).", 14]], 
             Tooltip[
              PasteButton[
               Defer[
                
                AbstractAlgebra`Master`DirectProduct[$CellContext` \
\[SelectionPlaceholder], $CellContext` \[Placeholder]]]], 
              Style[
              "DirectProduct[S1, S2] returns the direct product of the \
structured sets (Groupoids or Ringoids) S1 and S2. (Any number of arguments \
can be used.)", 14]], 
             Tooltip[
              PasteButton[
               Defer[
                
                AbstractAlgebra`Master`ElementQ[$CellContext` \
\[SelectionPlaceholder], $CellContext` \[Placeholder]]]], 
              Style[
              "ElementQ[x, S] yields True or False depending on whether or \
not x is an element of the structured set S.", 14]], 
             Tooltip[
              PasteButton[
               Defer[
                
                AbstractAlgebra`Master`Elements[$CellContext` \
\[SelectionPlaceholder]]]], 
              Style[
              "Elements[S] returns the list of elements contained in the \
structured set S (either a Groupoid or Ringoid). Elements[{S1,S2,..}] returns \
the elements in each of the structured sets.", 14]], 
             Tooltip[
              PasteButton[
               Defer[
                
                AbstractAlgebra`Master`ElementToCoset[$CellContext` \
\[SelectionPlaceholder], $CellContext` \[Placeholder]]]], 
              Style[
              "ElementToCoset[Q, el], assuming Q is the quotient group G/N \
and el is an element in G, this returns the coset containing el.", 14]], 
             Tooltip[
              PasteButton[
               Defer[
                
                AbstractAlgebra`Master`ElementToPower[$CellContext` \
\[SelectionPlaceholder], $CellContext` \[Placeholder], $CellContext` \
\[Placeholder]]]], 
              Style[
              "ElementToPower[G, g, n] returns the nth power (multiple, in an \
additive groupoid) of the element g in the structure G, where n can be any \
integer).", 14]], 
             Tooltip[
              PasteButton[
               Defer[
                
                AbstractAlgebra`Master`HasIdentityQ[$CellContext` \
\[SelectionPlaceholder]]]], 
              Style[
              "HasIdentityQ[S] returns True or False depending on whether or \
not the (two-sided) identity (or identities for rings) of the structure S \
exists. When used with rings, the Operation option can be used, which can \
have the value Addition, Multiplication or Both. If S is a group, \
GroupIdentity[S] returns the identity, if one exists, while for rings, \
Zero[S] and Unity[S] return the additive and multiplicative identities, if \
they exist. Available option: Mode (possible values: Computational, Textual, \
Visual, and All).", 14]], 
             Tooltip[
              PasteButton[
               Defer[
                
                AbstractAlgebra`Master`HasInversesQ[$CellContext` \
\[SelectionPlaceholder]]]], 
              Style[
              "HasInversesQ[G] returns True or False depending on whether all \
the elements in G have inverses or not. When used with rings,  the Operation \
option can be used, which can have the value Addition, Multiplication or \
Both. Available option: Mode (possible values: Computational, Textual, \
Visual1, Visual2, and All).", 14]], 
             Tooltip[
              PasteButton[
               Defer[
                
                AbstractAlgebra`Master`MultipleOfElement[$CellContext` \
\[SelectionPlaceholder], $CellContext` \[Placeholder], $CellContext` \
\[Placeholder]]]], 
              Style[
              "MultipleOfElement[R, r, n] returns the nth multiple of the \
element r in the structure R. In other words, r + r + ... + r (n times) is \
returned. This is the additive version of ElementToPower.", 14]], 
             Tooltip[
              PasteButton[
               Defer[
                
                AbstractAlgebra`Master`RandomElement[$CellContext` \
\[SelectionPlaceholder]]]], 
              Style[
              "RandomElement[S] returns a random element from the Groupoid or \
Ringoid (or simply the list) S. Available options are SelectFrom \[Rule] \
NonIdentity (this, the default, guarantees that the identity is not selected \
for Groupoids and neither the zero nor the unit is selected for Ringoids), \
SelectFrom \[Rule] NonUnity (which guarantees the unity is not selected with \
Ringoids), SelectFrom \[Rule] NonZero (which guarantees the zero is not \
selected with Ringoids), and SelectFrom \[Rule] Any (which imposes no \
restrictions). For polynomial extension rings, the options LowerDegreeOK and \
Monic are also available; see these for details (after working with rings). \
Additionally, one can obtain a random element from some specialized sets as \
follows: RandomElement[Z[Sqrt[p]],max] (for p square-free and max defaulting \
to 100) returns a + b Sqrt[p] with both a and b in the range [-max, max]. One \
can use p = -1 also, or use equivalently use Z[I].", 14]], 
             Tooltip[
              PasteButton[
               Defer[
                
                AbstractAlgebra`Master`RandomElements[$CellContext` \
\[SelectionPlaceholder], $CellContext` \[Placeholder]]]], 
              Style[
              "RandomElements[S, n] returns a set of n random elements from \
the Groupoid or Ringoid (or list) S. Available options are SelectFrom \[Rule] \
NonIdentity (this default guarantees that the identity is not selected for \
Groupoids and neither the zero nor the unit is selected for Ringoids), \
SelectFrom \[Rule] NonZero (which guarantees the zero is not selected with \
Ringoids), and SelectFrom \[Rule] Any (which imposes no restrictions). \
Additionally, Replacement \[Rule] True will allow an element to be selected \
more than once (while set to False will not allow this). Additionally, one \
obtain a random element from some specialized sets as indicated under \
RandomElement, by adding the final parameter indicating how many to choose.", 
               14]], 
             Tooltip[
              PasteButton[
               Defer[
                
                AbstractAlgebra`Master`Randomize[$CellContext` \
\[SelectionPlaceholder]]]], 
              Style[
              "Randomize[list] will randomly permute the elements in list. It \
is also an option, which takes True or False, to DisguiseGroupoid.", 14]], 
             Tooltip[
              PasteButton[
               Defer[
                
                AbstractAlgebra`Master`Size[$CellContext` \
\[SelectionPlaceholder]]]], 
              Style[
              "Size[S] returns the cardinality of the set of elements in the \
structured set S. This is identical to the function Order.", 14]], 
             Tooltip[
              PasteButton[
               Defer[
                
                AbstractAlgebra`Master`SubsetQ[$CellContext` \
\[SelectionPlaceholder], $CellContext` \[Placeholder]]]], 
              Style[
              "SubsetQ[A, B] returns True if A is a subset of B, and False \
otherwise.", 14]]}]}, False]],
        DynamicModuleValues:>{}],
       Setting[#, {0}]& ]},
     {
      TagBox[
       DynamicModuleBox[{Typeset`var$$ = False}, 
        InterpretationBox[
         StyleBox[
          PaneSelectorBox[{False->GridBox[{
             {
              OpenerBox[Dynamic[Typeset`var$$],
               Appearance->Automatic,
               AutoAction->False,
               ContinuousAction->False,
               Enabled->Automatic], 
              TagBox[
               TooltipBox["\<\"Group functions\"\>",
                "\"List of Group functions available\"",
                LabelStyle->"TextStyling"],
               
               Annotation[#, "List of Group functions available", 
                "Tooltip"]& ]}
            },
            AutoDelete->False,
            BaselinePosition->{1, 1},
            GridBoxAlignment->{"Columns" -> {{Left}}},
            GridBoxBackground->{"Columns" -> {{Automatic}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
            GridBoxSpacings->{"Columns" -> {{0.2}}, "Rows" -> {{0.5}}}], True->
           GridBox[{
             {
              OpenerBox[Dynamic[Typeset`var$$],
               Appearance->Automatic,
               AutoAction->False,
               ContinuousAction->False,
               Enabled->Automatic], 
              TagBox[
               TooltipBox["\<\"Group functions\"\>",
                "\"List of Group functions available\"",
                LabelStyle->"TextStyling"],
               
               Annotation[#, "List of Group functions available", 
                "Tooltip"]& ]},
             {"", 
              PaneBox[
               TagBox[GridBox[{
                  {
                   TagBox[
                    TooltipBox[
                    ButtonBox[
                    RowBox[{"AbelianQ", "[", "\[SelectionPlaceholder]", "]"}],
                    
                    BaseStyle->"Paste"],
                    StyleBox[
                    "\"AbelianQ[G] returns True if the Groupoid G is Abelian \
(commutative), and False otherwise. This is equivalent to CommutativeQ[G]. \
Available options: Mode (possible values: Computational, Textual, Visual, \
All, and Interactive (for indexed groups)).\"", 14, StripOnInput -> False],
                    LabelStyle->"TextStyling"],
                    Annotation[#, 
                    Style[
                    "AbelianQ[G] returns True if the Groupoid G is Abelian \
(commutative), and False otherwise. This is equivalent to CommutativeQ[G]. \
Available options: Mode (possible values: Computational, Textual, Visual, \
All, and Interactive (for indexed groups)).", 14], "Tooltip"]& ]},
                  {
                   TagBox[
                    TooltipBox[
                    ButtonBox[
                    RowBox[{"Centralizer", "[", 
                    RowBox[{
                    "\[SelectionPlaceholder]", ",", "\[Placeholder]"}], "]"}],
                    
                    BaseStyle->"Paste"],
                    StyleBox[
                    "\"Centralizer[G, g] returns the centralizer of g in the \
group G. Centralizer[G, H] returns the centralizer of the subgroup H in the \
group G. Available option: Mode (possible values: Computational, Textual, \
Visual, All, and Interactive (on group elements)).\"", 14, StripOnInput -> 
                    False],
                    LabelStyle->"TextStyling"],
                    Annotation[#, 
                    Style[
                    "Centralizer[G, g] returns the centralizer of g in the \
group G. Centralizer[G, H] returns the centralizer of the subgroup H in the \
group G. Available option: Mode (possible values: Computational, Textual, \
Visual, All, and Interactive (on group elements)).", 14], "Tooltip"]& ]},
                  {
                   TagBox[
                    TooltipBox[
                    ButtonBox[
                    RowBox[{"Closure", "[", 
                    RowBox[{
                    "\[SelectionPlaceholder]", ",", "\[Placeholder]"}], "]"}],
                    
                    BaseStyle->"Paste"],
                    StyleBox[
                    "\"Closure[G, H] returns the subgroup of G generated by \
the elements in the set H (assuming H is a subset of G or a Groupoid whose \
elements are a subset of G). The option ReportIterations (defaulting to \
False) indicates whether the result of each iteration is also returned. The \
option Sort, when set to False (default), returns the elements in the order \
they are generated, while when set to True, returns the elements sorted. \
Another available option: Mode (possible values: Computational, Textual, \
Visual, All, and Interactive (on group elements)).\"", 14, StripOnInput -> 
                    False],
                    LabelStyle->"TextStyling"],
                    Annotation[#, 
                    Style[
                    "Closure[G, H] returns the subgroup of G generated by the \
elements in the set H (assuming H is a subset of G or a Groupoid whose \
elements are a subset of G). The option ReportIterations (defaulting to \
False) indicates whether the result of each iteration is also returned. The \
option Sort, when set to False (default), returns the elements in the order \
they are generated, while when set to True, returns the elements sorted. \
Another available option: Mode (possible values: Computational, Textual, \
Visual, All, and Interactive (on group elements)).", 14], "Tooltip"]& ]},
                  {
                   TagBox[
                    TooltipBox[
                    ButtonBox[
                    RowBox[{
                    "CommutatorSubgroup", "[", "\[SelectionPlaceholder]", 
                    "]"}],
                    BaseStyle->"Paste"],
                    StyleBox[
                    "\"CommutatorSubgroup[G] returns the commutator subgroup \
of the Groupoid G generated by the commutators of G. Available option: Mode \
(possible values: Computational, Textual, Visual, All, and Interactive (for \
indexed groups)).\"", 14, StripOnInput -> False],
                    LabelStyle->"TextStyling"],
                    Annotation[#, 
                    Style[
                    "CommutatorSubgroup[G] returns the commutator subgroup of \
the Groupoid G generated by the commutators of G. Available option: Mode \
(possible values: Computational, Textual, Visual, All, and Interactive (for \
indexed groups)).", 14], "Tooltip"]& ]},
                  {
                   TagBox[
                    TooltipBox[
                    ButtonBox[
                    RowBox[{"ConjugacyClass", "[", 
                    RowBox[{
                    "\[SelectionPlaceholder]", ",", "\[Placeholder]"}], "]"}],
                    
                    BaseStyle->"Paste"],
                    StyleBox[
                    "\"ConjugacyClass[G, h] returns the conjugacy class of \
the element h in G.\"", 14, StripOnInput -> False],
                    LabelStyle->"TextStyling"],
                    Annotation[#, 
                    Style[
                    "ConjugacyClass[G, h] returns the conjugacy class of the \
element h in G.", 14], "Tooltip"]& ]},
                  {
                   TagBox[
                    TooltipBox[
                    ButtonBox[
                    RowBox[{
                    "CyclicGenerators", "[", "\[SelectionPlaceholder]", "]"}],
                    
                    BaseStyle->"Paste"],
                    StyleBox[
                    "\"CyclicGenerators[G] returns a list of elements that \
are generators for the cyclic group G. Available option: Mode (possible \
values: Computational, Textual, Visual, All, and Interactive (for indexed \
groups)).\"", 14, StripOnInput -> False],
                    LabelStyle->"TextStyling"],
                    Annotation[#, 
                    Style[
                    "CyclicGenerators[G] returns a list of elements that are \
generators for the cyclic group G. Available option: Mode (possible values: \
Computational, Textual, Visual, All, and Interactive (for indexed groups)).", 
                    14], "Tooltip"]& ]},
                  {
                   TagBox[
                    TooltipBox[
                    ButtonBox[
                    RowBox[{"CyclicQ", "[", "\[SelectionPlaceholder]", "]"}],
                    BaseStyle->"Paste"],
                    StyleBox[
                    "\"CyclicQ[G] returns True if the Groupoid G is cyclic, \
and False otherwise. Available option: Mode (possible values: Computational, \
Textual, Visual, All, and Interactive (for indexed groups)).\"", 14, 
                    StripOnInput -> False],
                    LabelStyle->"TextStyling"],
                    Annotation[#, 
                    Style[
                    "CyclicQ[G] returns True if the Groupoid G is cyclic, and \
False otherwise. Available option: Mode (possible values: Computational, \
Textual, Visual, All, and Interactive (for indexed groups)).", 14], 
                    "Tooltip"]& ]},
                  {
                   TagBox[
                    TooltipBox[
                    ButtonBox[
                    RowBox[{"FormGroupoid", "[", 
                    RowBox[{
                    "\[SelectionPlaceholder]", ",", "\[Placeholder]"}], "]"}],
                    
                    BaseStyle->"Paste"],
                    StyleBox[
                    "\"FormGroupoid[els, op, opsym, opts] is the basic \
command for forming a Groupoid consisting of the list els governed by the \
operation op. The symbol opsym defaults to * if not specified. The available \
options for opts are WideElements, IsAGroup, Generators, GroupoidDescription, \
GroupoidName, FormatOperator, FormatElements, MaxElementsToList, KeyForm, and \
CayleyForm. See each one for more information. \\n\\nThis function, rather \
than just wrapping Groupoid around a list and an operation, is strongly \
recommended.\"", 14, StripOnInput -> False],
                    LabelStyle->"TextStyling"],
                    Annotation[#, 
                    Style[
                    "FormGroupoid[els, op, opsym, opts] is the basic command \
for forming a Groupoid consisting of the list els governed by the operation \
op. The symbol opsym defaults to * if not specified. The available options \
for opts are WideElements, IsAGroup, Generators, GroupoidDescription, \
GroupoidName, FormatOperator, FormatElements, MaxElementsToList, KeyForm, and \
CayleyForm. See each one for more information. \n\nThis function, rather than \
just wrapping Groupoid around a list and an operation, is strongly \
recommended.", 14], "Tooltip"]& ]},
                  {
                   TagBox[
                    TooltipBox[
                    ButtonBox[
                    RowBox[{"GenerateGroupoid", "[", 
                    RowBox[{
                    "\[SelectionPlaceholder]", ",", "\[Placeholder]"}], "]"}],
                    
                    BaseStyle->"Paste"],
                    StyleBox[
                    "\"GenerateGroupoid[gens, op, opsym, opts] is a command \
for generating a Groupoid by using the generators in the list gens governed \
by the operation op. The symbol opsym defaults to * unless specified \
otherwise. The options for opts can be WideElements, IsAGroup, SizeLimit, \
Generators, GroupoidDescription, GroupoidName, FormatOperator, \
FormatElements, MaxElementsToList, KeyForm, and CayleyForm. See each of these \
individually for more information.\"", 14, StripOnInput -> False],
                    LabelStyle->"TextStyling"],
                    Annotation[#, 
                    Style[
                    "GenerateGroupoid[gens, op, opsym, opts] is a command for \
generating a Groupoid by using the generators in the list gens governed by \
the operation op. The symbol opsym defaults to * unless specified otherwise. \
The options for opts can be WideElements, IsAGroup, SizeLimit, Generators, \
GroupoidDescription, GroupoidName, FormatOperator, FormatElements, \
MaxElementsToList, KeyForm, and CayleyForm. See each of these individually \
for more information.", 14], "Tooltip"]& ]},
                  {
                   TagBox[
                    TooltipBox[
                    ButtonBox[
                    RowBox[{
                    "GroupCenter", "[", "\[SelectionPlaceholder]", "]"}],
                    BaseStyle->"Paste"],
                    StyleBox[
                    "\"GroupCenter[G] returns the center of the group G. This \
is identical to Center.\"", 14, StripOnInput -> False],
                    LabelStyle->"TextStyling"],
                    Annotation[#, 
                    Style[
                    "GroupCenter[G] returns the center of the group G. This \
is identical to Center.", 14], "Tooltip"]& ]},
                  {
                   TagBox[
                    TooltipBox[
                    ButtonBox[
                    RowBox[{
                    "GroupExponent", "[", "\[SelectionPlaceholder]", "]"}],
                    BaseStyle->"Paste"],
                    StyleBox[
                    "\"GroupExponent[G] returns the smallest positive integer \
n such that g^n is the identity for all elements g in the Groupoid G. \
Available option: Mode (possible values: Computational, Textual, Visual, and \
All).\"", 14, StripOnInput -> False],
                    LabelStyle->"TextStyling"],
                    Annotation[#, 
                    Style[
                    "GroupExponent[G] returns the smallest positive integer n \
such that g^n is the identity for all elements g in the Groupoid G. Available \
option: Mode (possible values: Computational, Textual, Visual, and All).", 
                    14], "Tooltip"]& ]},
                  {
                   TagBox[
                    TooltipBox[
                    ButtonBox[
                    RowBox[{
                    "GroupIdentity", "[", "\[SelectionPlaceholder]", "]"}],
                    BaseStyle->"Paste"],
                    StyleBox[
                    "\"GroupIdentity[G] returns the (two-sided) identity of \
the Groupoid G, if it exists. If there is no identity, a message indicates \
this and $Failed is returned. HasIdentityQ[G] is similar, except it only \
returns True or False regarding the existence of an identity. Available \
option: Mode (possible values: Computational, Textual, Visual, and All).\"", 
                    14, StripOnInput -> False],
                    LabelStyle->"TextStyling"],
                    Annotation[#, 
                    Style[
                    "GroupIdentity[G] returns the (two-sided) identity of the \
Groupoid G, if it exists. If there is no identity, a message indicates this \
and $Failed is returned. HasIdentityQ[G] is similar, except it only returns \
True or False regarding the existence of an identity. Available option: Mode \
(possible values: Computational, Textual, Visual, and All).", 14], 
                    "Tooltip"]& ]},
                  {
                   TagBox[
                    TooltipBox[
                    ButtonBox[
                    RowBox[{"GroupInfo", "[", "\[SelectionPlaceholder]", "]"}],
                    BaseStyle->"Paste"],
                    StyleBox[
                    "\"GroupInfo[G] returns a list of information obtained \
about the Groupoid G that has been gathered thus far by calling various \
functions.\"", 14, StripOnInput -> False],
                    LabelStyle->"TextStyling"],
                    Annotation[#, 
                    Style[
                    "GroupInfo[G] returns a list of information obtained \
about the Groupoid G that has been gathered thus far by calling various \
functions.", 14], "Tooltip"]& ]},
                  {
                   TagBox[
                    TooltipBox[
                    ButtonBox[
                    RowBox[{"GroupInverse", "[", 
                    RowBox[{
                    "\[SelectionPlaceholder]", ",", "\[Placeholder]"}], "]"}],
                    
                    BaseStyle->"Paste"],
                    StyleBox[
                    "\"GroupInverse[G, g] returns the inverse of g in G, if \
it exists, and $Failed otherwise. Available option: Mode (possible values: \
Computational, Textual, Visual, All, and Interactive (on group elements)).\"",
                     14, StripOnInput -> False],
                    LabelStyle->"TextStyling"],
                    Annotation[#, 
                    Style[
                    "GroupInverse[G, g] returns the inverse of g in G, if it \
exists, and $Failed otherwise. Available option: Mode (possible values: \
Computational, Textual, Visual, All, and Interactive (on group elements)).", 
                    14], "Tooltip"]& ]},
                  {
                   TagBox[
                    TooltipBox[
                    ButtonBox[
                    RowBox[{"Index", "[", 
                    RowBox[{
                    "\[SelectionPlaceholder]", ",", "\[Placeholder]"}], "]"}],
                    
                    BaseStyle->"Paste"],
                    StyleBox[
                    "\"Index[G, H] returns the index of the subgroup H in the \
group G. Available option: Mode (possible values: Computational, Textual, \
Visual, and All).\"", 14, StripOnInput -> False],
                    LabelStyle->"TextStyling"],
                    Annotation[#, 
                    Style[
                    "Index[G, H] returns the index of the subgroup H in the \
group G. Available option: Mode (possible values: Computational, Textual, \
Visual, and All).", 14], "Tooltip"]& ]},
                  {
                   TagBox[
                    TooltipBox[
                    ButtonBox[
                    RowBox[{"QuotientGroup", "[", 
                    RowBox[{
                    "\[SelectionPlaceholder]", ",", "\[Placeholder]"}], "]"}],
                    
                    BaseStyle->"Paste"],
                    StyleBox[
                    "\"QuotientGroup[G, N] returns the quotient group formed \
by the group G and the normal subgroup N. Options for this function are Form \
and Representatives. Form can have the value Cosets (default) which returns \
the elements in coset form g + NS or g NS where NS is a symbol representing \
the Normal Subgroup. The value CosetLists returns the quotient group as a \
list of all the cosets in list form. Alternatively, one can use Form \[Rule] \
Representatives and then only the representatives of the cosets will be \
returned. The default list of representatives uses the 'smallest' element in \
the coset and is indicated by Representatives \[Rule] Canonical; if you wish \
to change this list, use Representatives \[Rule] list, where list is a list \
of one element from each coset, or use Representatives \[Rule] Random to have \
these representatives randomly chosen. This can be used also if one has Form \
\[Rule] Cosets. By default, left cosets are used.\"", 14, StripOnInput -> 
                    False],
                    LabelStyle->"TextStyling"],
                    Annotation[#, 
                    Style[
                    "QuotientGroup[G, N] returns the quotient group formed by \
the group G and the normal subgroup N. Options for this function are Form and \
Representatives. Form can have the value Cosets (default) which returns the \
elements in coset form g + NS or g NS where NS is a symbol representing the \
Normal Subgroup. The value CosetLists returns the quotient group as a list of \
all the cosets in list form. Alternatively, one can use Form \[Rule] \
Representatives and then only the representatives of the cosets will be \
returned. The default list of representatives uses the 'smallest' element in \
the coset and is indicated by Representatives \[Rule] Canonical; if you wish \
to change this list, use Representatives \[Rule] list, where list is a list \
of one element from each coset, or use Representatives \[Rule] Random to have \
these representatives randomly chosen. This can be used also if one has Form \
\[Rule] Cosets. By default, left cosets are used.", 14], "Tooltip"]& ]},
                  {
                   TagBox[
                    TooltipBox[
                    ButtonBox[
                    RowBox[{"SubgroupGenerated", "[", 
                    RowBox[{
                    "\[SelectionPlaceholder]", ",", "\[Placeholder]"}], "]"}],
                    
                    BaseStyle->"Paste"],
                    StyleBox[
                    "\"SubgroupGenerated[G, g] returns the subgroup generated \
by the element g in the group G. Available option: Mode (possible values: \
Computational, Textual, Visual1, Visual2, All, and Interactive (on group \
elements)). \"", 14, StripOnInput -> False],
                    LabelStyle->"TextStyling"],
                    Annotation[#, 
                    Style[
                    "SubgroupGenerated[G, g] returns the subgroup generated \
by the element g in the group G. Available option: Mode (possible values: \
Computational, Textual, Visual1, Visual2, All, and Interactive (on group \
elements)). ", 14], "Tooltip"]& ]},
                  {
                   TagBox[
                    TooltipBox[
                    ButtonBox[
                    RowBox[{"SubgroupIntersection", "[", 
                    RowBox[{
                    "\[SelectionPlaceholder]", ",", "\[Placeholder]", ",", 
                    "\[Placeholder]"}], "]"}],
                    BaseStyle->"Paste"],
                    StyleBox[
                    "\"SubgroupIntersection[G, H, K] returns the subGroupoid \
of G which is the intersection of subgroups H and K.\"", 14, StripOnInput -> 
                    False],
                    LabelStyle->"TextStyling"],
                    Annotation[#, 
                    Style[
                    "SubgroupIntersection[G, H, K] returns the subGroupoid of \
G which is the intersection of subgroups H and K.", 14], "Tooltip"]& ]},
                  {
                   TagBox[
                    TooltipBox[
                    ButtonBox[
                    RowBox[{"SubgroupJoin", "[", 
                    RowBox[{
                    "\[SelectionPlaceholder]", ",", "\[Placeholder]", ",", 
                    "\[Placeholder]"}], "]"}],
                    BaseStyle->"Paste"],
                    StyleBox[
                    "\"SubgroupJoin[G, H, K] returns the subGroupoid of G \
generated by the elements in the subgroups H and K.\"", 14, StripOnInput -> 
                    False],
                    LabelStyle->"TextStyling"],
                    Annotation[#, 
                    Style[
                    "SubgroupJoin[G, H, K] returns the subGroupoid of G \
generated by the elements in the subgroups H and K.", 14], "Tooltip"]& ]},
                  {
                   TagBox[
                    TooltipBox[
                    ButtonBox[
                    RowBox[{"SubgroupProduct", "[", 
                    RowBox[{
                    "\[SelectionPlaceholder]", ",", "\[Placeholder]", ",", 
                    "\[Placeholder]"}], "]"}],
                    BaseStyle->"Paste"],
                    StyleBox[
                    "\"SubgroupProduct[G, H, K] returns the subGroupoid (of \
G) HK = {hk | h in H, k in K} for subgroups H and K.\"", 14, StripOnInput -> 
                    False],
                    LabelStyle->"TextStyling"],
                    Annotation[#, 
                    Style[
                    "SubgroupProduct[G, H, K] returns the subGroupoid (of G) \
HK = {hk | h in H, k in K} for subgroups H and K.", 14], "Tooltip"]& ]}
                 },
                 GridBoxAlignment->{"Columns" -> {{Left}}},
                 
                 GridBoxItemSize->{
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
                "Column"],
               ImageMargins->0]}
            },
            AutoDelete->False,
            BaselinePosition->{1, 1},
            GridBoxAlignment->{"Columns" -> {{Left}}},
            GridBoxBackground->{"Columns" -> {{Automatic}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
            GridBoxSpacings->{"Columns" -> {{0.2}}, "Rows" -> {{0.5}}}]}, 
           Dynamic[Typeset`var$$],
           Alignment->Automatic,
           BaselinePosition->Baseline,
           DefaultBaseStyle->"OpenerView",
           ImageMargins->0,
           ImageSize->Automatic],
          Deployed->False,
          StripOnInput->False],
         OpenerView[{
           Tooltip["Group functions", "List of Group functions available"], 
           Column[{
             Tooltip[
              PasteButton[
               Defer[
                
                AbstractAlgebra`Master`AbelianQ[$CellContext` \
\[SelectionPlaceholder]]]], 
              Style[
              "AbelianQ[G] returns True if the Groupoid G is Abelian \
(commutative), and False otherwise. This is equivalent to CommutativeQ[G]. \
Available options: Mode (possible values: Computational, Textual, Visual, \
All, and Interactive (for indexed groups)).", 14]], 
             Tooltip[
              PasteButton[
               Defer[
                
                AbstractAlgebra`Master`Centralizer[$CellContext` \
\[SelectionPlaceholder], $CellContext` \[Placeholder]]]], 
              Style[
              "Centralizer[G, g] returns the centralizer of g in the group G. \
Centralizer[G, H] returns the centralizer of the subgroup H in the group G. \
Available option: Mode (possible values: Computational, Textual, Visual, All, \
and Interactive (on group elements)).", 14]], 
             Tooltip[
              PasteButton[
               Defer[
                
                AbstractAlgebra`Master`Closure[$CellContext` \
\[SelectionPlaceholder], $CellContext` \[Placeholder]]]], 
              Style[
              "Closure[G, H] returns the subgroup of G generated by the \
elements in the set H (assuming H is a subset of G or a Groupoid whose \
elements are a subset of G). The option ReportIterations (defaulting to \
False) indicates whether the result of each iteration is also returned. The \
option Sort, when set to False (default), returns the elements in the order \
they are generated, while when set to True, returns the elements sorted. \
Another available option: Mode (possible values: Computational, Textual, \
Visual, All, and Interactive (on group elements)).", 14]], 
             Tooltip[
              PasteButton[
               Defer[
                
                AbstractAlgebra`Master`CommutatorSubgroup[$CellContext` \
\[SelectionPlaceholder]]]], 
              Style[
              "CommutatorSubgroup[G] returns the commutator subgroup of the \
Groupoid G generated by the commutators of G. Available option: Mode \
(possible values: Computational, Textual, Visual, All, and Interactive (for \
indexed groups)).", 14]], 
             Tooltip[
              PasteButton[
               Defer[
                
                AbstractAlgebra`Master`ConjugacyClass[$CellContext` \
\[SelectionPlaceholder], $CellContext` \[Placeholder]]]], 
              Style[
              "ConjugacyClass[G, h] returns the conjugacy class of the \
element h in G.", 14]], 
             Tooltip[
              PasteButton[
               Defer[
                
                AbstractAlgebra`Master`CyclicGenerators[$CellContext` \
\[SelectionPlaceholder]]]], 
              Style[
              "CyclicGenerators[G] returns a list of elements that are \
generators for the cyclic group G. Available option: Mode (possible values: \
Computational, Textual, Visual, All, and Interactive (for indexed groups)).", 
               14]], 
             Tooltip[
              PasteButton[
               Defer[
                
                AbstractAlgebra`Master`CyclicQ[$CellContext` \
\[SelectionPlaceholder]]]], 
              Style[
              "CyclicQ[G] returns True if the Groupoid G is cyclic, and False \
otherwise. Available option: Mode (possible values: Computational, Textual, \
Visual, All, and Interactive (for indexed groups)).", 14]], 
             Tooltip[
              PasteButton[
               Defer[
                
                AbstractAlgebra`Master`FormGroupoid[$CellContext` \
\[SelectionPlaceholder], $CellContext` \[Placeholder]]]], 
              Style[
              "FormGroupoid[els, op, opsym, opts] is the basic command for \
forming a Groupoid consisting of the list els governed by the operation op. \
The symbol opsym defaults to * if not specified. The available options for \
opts are WideElements, IsAGroup, Generators, GroupoidDescription, \
GroupoidName, FormatOperator, FormatElements, MaxElementsToList, KeyForm, and \
CayleyForm. See each one for more information. \n\nThis function, rather than \
just wrapping Groupoid around a list and an operation, is strongly \
recommended.", 14]], 
             Tooltip[
              PasteButton[
               Defer[
                
                AbstractAlgebra`Master`GenerateGroupoid[$CellContext` \
\[SelectionPlaceholder], $CellContext` \[Placeholder]]]], 
              Style[
              "GenerateGroupoid[gens, op, opsym, opts] is a command for \
generating a Groupoid by using the generators in the list gens governed by \
the operation op. The symbol opsym defaults to * unless specified otherwise. \
The options for opts can be WideElements, IsAGroup, SizeLimit, Generators, \
GroupoidDescription, GroupoidName, FormatOperator, FormatElements, \
MaxElementsToList, KeyForm, and CayleyForm. See each of these individually \
for more information.", 14]], 
             Tooltip[
              PasteButton[
               Defer[
                
                AbstractAlgebra`Master`GroupCenter[$CellContext` \
\[SelectionPlaceholder]]]], 
              Style[
              "GroupCenter[G] returns the center of the group G. This is \
identical to Center.", 14]], 
             Tooltip[
              PasteButton[
               Defer[
                
                AbstractAlgebra`Master`GroupExponent[$CellContext` \
\[SelectionPlaceholder]]]], 
              Style[
              "GroupExponent[G] returns the smallest positive integer n such \
that g^n is the identity for all elements g in the Groupoid G. Available \
option: Mode (possible values: Computational, Textual, Visual, and All).", 
               14]], 
             Tooltip[
              PasteButton[
               Defer[
                
                AbstractAlgebra`Master`GroupIdentity[$CellContext` \
\[SelectionPlaceholder]]]], 
              Style[
              "GroupIdentity[G] returns the (two-sided) identity of the \
Groupoid G, if it exists. If there is no identity, a message indicates this \
and $Failed is returned. HasIdentityQ[G] is similar, except it only returns \
True or False regarding the existence of an identity. Available option: Mode \
(possible values: Computational, Textual, Visual, and All).", 14]], 
             Tooltip[
              PasteButton[
               Defer[
                
                AbstractAlgebra`Master`GroupInfo[$CellContext` \
\[SelectionPlaceholder]]]], 
              Style[
              "GroupInfo[G] returns a list of information obtained about the \
Groupoid G that has been gathered thus far by calling various functions.", 
               14]], 
             Tooltip[
              PasteButton[
               Defer[
                
                AbstractAlgebra`Master`GroupInverse[$CellContext` \
\[SelectionPlaceholder], $CellContext` \[Placeholder]]]], 
              Style[
              "GroupInverse[G, g] returns the inverse of g in G, if it \
exists, and $Failed otherwise. Available option: Mode (possible values: \
Computational, Textual, Visual, All, and Interactive (on group elements)).", 
               14]], 
             Tooltip[
              PasteButton[
               Defer[
                
                AbstractAlgebra`Master`Index[$CellContext` \
\[SelectionPlaceholder], $CellContext` \[Placeholder]]]], 
              Style[
              "Index[G, H] returns the index of the subgroup H in the group \
G. Available option: Mode (possible values: Computational, Textual, Visual, \
and All).", 14]], 
             Tooltip[
              PasteButton[
               Defer[
                
                AbstractAlgebra`Master`QuotientGroup[$CellContext` \
\[SelectionPlaceholder], $CellContext` \[Placeholder]]]], 
              Style[
              "QuotientGroup[G, N] returns the quotient group formed by the \
group G and the normal subgroup N. Options for this function are Form and \
Representatives. Form can have the value Cosets (default) which returns the \
elements in coset form g + NS or g NS where NS is a symbol representing the \
Normal Subgroup. The value CosetLists returns the quotient group as a list of \
all the cosets in list form. Alternatively, one can use Form \[Rule] \
Representatives and then only the representatives of the cosets will be \
returned. The default list of representatives uses the 'smallest' element in \
the coset and is indicated by Representatives \[Rule] Canonical; if you wish \
to change this list, use Representatives \[Rule] list, where list is a list \
of one element from each coset, or use Representatives \[Rule] Random to have \
these representatives randomly chosen. This can be used also if one has Form \
\[Rule] Cosets. By default, left cosets are used.", 14]], 
             Tooltip[
              PasteButton[
               Defer[
                
                AbstractAlgebra`Master`SubgroupGenerated[$CellContext` \
\[SelectionPlaceholder], $CellContext` \[Placeholder]]]], 
              Style[
              "SubgroupGenerated[G, g] returns the subgroup generated by the \
element g in the group G. Available option: Mode (possible values: \
Computational, Textual, Visual1, Visual2, All, and Interactive (on group \
elements)). ", 14]], 
             Tooltip[
              PasteButton[
               Defer[
                
                AbstractAlgebra`Master`SubgroupIntersection[$CellContext` \
\[SelectionPlaceholder], $CellContext` \[Placeholder], $CellContext` \
\[Placeholder]]]], 
              Style[
              "SubgroupIntersection[G, H, K] returns the subGroupoid of G \
which is the intersection of subgroups H and K.", 14]], 
             Tooltip[
              PasteButton[
               Defer[
                
                AbstractAlgebra`Master`SubgroupJoin[$CellContext` \
\[SelectionPlaceholder], $CellContext` \[Placeholder], $CellContext` \
\[Placeholder]]]], 
              Style[
              "SubgroupJoin[G, H, K] returns the subGroupoid of G generated \
by the elements in the subgroups H and K.", 14]], 
             Tooltip[
              PasteButton[
               Defer[
                
                AbstractAlgebra`Master`SubgroupProduct[$CellContext` \
\[SelectionPlaceholder], $CellContext` \[Placeholder], $CellContext` \
\[Placeholder]]]], 
              Style[
              "SubgroupProduct[G, H, K] returns the subGroupoid (of G) HK = \
{hk | h in H, k in K} for subgroups H and K.", 14]]}]}, False]],
        DynamicModuleValues:>{}],
       Setting[#, {0}]& ]},
     {
      TagBox[
       DynamicModuleBox[{Typeset`var$$ = False}, 
        InterpretationBox[
         StyleBox[
          PaneSelectorBox[{False->GridBox[{
             {
              OpenerBox[Dynamic[Typeset`var$$],
               Appearance->Automatic,
               AutoAction->False,
               ContinuousAction->False,
               Enabled->Automatic], 
              TagBox[
               TooltipBox["\<\"Permutation functions\"\>",
                "\"List of permutation functions available\"",
                LabelStyle->"TextStyling"],
               
               Annotation[#, "List of permutation functions available", 
                "Tooltip"]& ]}
            },
            AutoDelete->False,
            BaselinePosition->{1, 1},
            GridBoxAlignment->{"Columns" -> {{Left}}},
            GridBoxBackground->{"Columns" -> {{Automatic}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
            GridBoxSpacings->{"Columns" -> {{0.2}}, "Rows" -> {{0.5}}}], True->
           GridBox[{
             {
              OpenerBox[Dynamic[Typeset`var$$],
               Appearance->Automatic,
               AutoAction->False,
               ContinuousAction->False,
               Enabled->Automatic], 
              TagBox[
               TooltipBox["\<\"Permutation functions\"\>",
                "\"List of permutation functions available\"",
                LabelStyle->"TextStyling"],
               
               Annotation[#, "List of permutation functions available", 
                "Tooltip"]& ]},
             {"", 
              PaneBox[
               TagBox[GridBox[{
                  {
                   TagBox[
                    TooltipBox[
                    ButtonBox[
                    RowBox[{
                    "DisjointCyclesQ", "[", "\[SelectionPlaceholder]", "]"}],
                    BaseStyle->"Paste"],
                    StyleBox[
                    "\"DisjointCyclesQ[cyclist] returns True if the cycles in \
cyclist are disjoint, and False otherwise. The cycles in cyclist can be \
either in List form or using Cycle notation. Also, cyclist can be of any \
length and either given as a list or a sequence of cycles.\"", 14, 
                    StripOnInput -> False],
                    LabelStyle->"TextStyling"],
                    Annotation[#, 
                    Style[
                    "DisjointCyclesQ[cyclist] returns True if the cycles in \
cyclist are disjoint, and False otherwise. The cycles in cyclist can be \
either in List form or using Cycle notation. Also, cyclist can be of any \
length and either given as a list or a sequence of cycles.", 14], 
                    "Tooltip"]& ]},
                  {
                   TagBox[
                    TooltipBox[
                    ButtonBox[
                    RowBox[{
                    "EvenPermutationQ", "[", "\[SelectionPlaceholder]", "]"}],
                    
                    BaseStyle->"Paste"],
                    StyleBox[
                    "\"EvenPermutationQ[p] returns True if p is an even \
permutation, and False otherwise.\"", 14, StripOnInput -> False],
                    LabelStyle->"TextStyling"],
                    Annotation[#, 
                    Style[
                    "EvenPermutationQ[p] returns True if p is an even \
permutation, and False otherwise.", 14], "Tooltip"]& ]},
                  {
                   TagBox[
                    TooltipBox[
                    ButtonBox[
                    RowBox[{"ExtendPermutation", "[", 
                    RowBox[{
                    "\[SelectionPlaceholder]", ",", "\[Placeholder]"}], "]"}],
                    
                    BaseStyle->"Paste"],
                    StyleBox[
                    "\"ExtendPermutation[p, n] takes a permutation p in S[m] \
(for m < n) and returns a permutation in S[n] using the components of p in \
the first m positions and filling out positions m+1 to n with the integers \
m+1 to n, so that p is naturally extended.\"", 14, StripOnInput -> False],
                    LabelStyle->"TextStyling"],
                    Annotation[#, 
                    Style[
                    "ExtendPermutation[p, n] takes a permutation p in S[m] \
(for m < n) and returns a permutation in S[n] using the components of p in \
the first m positions and filling out positions m+1 to n with the integers \
m+1 to n, so that p is naturally extended.", 14], "Tooltip"]& ]},
                  {
                   TagBox[
                    TooltipBox[
                    ButtonBox[
                    RowBox[{
                    "FormGroupoidFromCycles", "[", "\[SelectionPlaceholder]", 
                    "]"}],
                    BaseStyle->"Paste"],
                    StyleBox[
                    "\"FormGroupoidFromCycles[cl, opts] forms the Groupoid of \
permutations whose elements are (initially) written as either cycles or \
products of cycles. The option opts takes on values similar to FormGroupoid, \
as well as the option ProductOrder (since we are working with \
permutations).\"", 14, StripOnInput -> False],
                    LabelStyle->"TextStyling"],
                    Annotation[#, 
                    Style[
                    "FormGroupoidFromCycles[cl, opts] forms the Groupoid of \
permutations whose elements are (initially) written as either cycles or \
products of cycles. The option opts takes on values similar to FormGroupoid, \
as well as the option ProductOrder (since we are working with permutations).",
                     14], "Tooltip"]& ]},
                  {
                   TagBox[
                    TooltipBox[
                    ButtonBox[
                    RowBox[{
                    "FromCycles", "[", "\[SelectionPlaceholder]", "]"}],
                    BaseStyle->"Paste"],
                    StyleBox[
                    "\"FromCycles[{c1, c2,...,cn}] gives the permutation that \
corresponds to the product of the cycles c1, c2, ...cn, assuming that the \
cycles ci are disjoint. This is a modification and improvement on the \
function from the DiscreteMath`Permutations` package.\"", 14, StripOnInput -> 
                    False],
                    LabelStyle->"TextStyling"],
                    Annotation[#, 
                    Style[
                    "FromCycles[{c1, c2,...,cn}] gives the permutation that \
corresponds to the product of the cycles c1, c2, ...cn, assuming that the \
cycles ci are disjoint. This is a modification and improvement on the \
function from the DiscreteMath`Permutations` package.", 14], "Tooltip"]& ]},
                  {
                   TagBox[
                    TooltipBox[
                    ButtonBox[
                    RowBox[{"MultiplyCycles", "[", 
                    RowBox[{
                    "\[SelectionPlaceholder]", ",", "\[Placeholder]"}], "]"}],
                    
                    BaseStyle->"Paste"],
                    StyleBox[
                    "\"MultiplyCycles[c2, c1, n] views both cycles c1 and c2 \
as in S[n] and determines the permutation representing their product. Note \
that the order of the multiplication is from right to left (unless specified \
otherwise by ProductOrder). MultiplyCycles[c2, c1] does the same but \
determines the value for n by the equation n = Max[Join[c1, c2]]. \
MultiplyCycles[c3, c2, c1] starts from the right and multiplies the cycles as \
it moves left through c2 and c3. MultiplyCycles[cyclelist] or \
MultiplyCycles[{cyclelist}] will work on any length of list of cycles and \
finds the product, working from right to left if the option ProductOrder is \
set to RightToLeft, or from left to right if set to LeftToRight. See \
ProductOrder for details on its values.\"", 14, StripOnInput -> False],
                    LabelStyle->"TextStyling"],
                    Annotation[#, 
                    Style[
                    "MultiplyCycles[c2, c1, n] views both cycles c1 and c2 as \
in S[n] and determines the permutation representing their product. Note that \
the order of the multiplication is from right to left (unless specified \
otherwise by ProductOrder). MultiplyCycles[c2, c1] does the same but \
determines the value for n by the equation n = Max[Join[c1, c2]]. \
MultiplyCycles[c3, c2, c1] starts from the right and multiplies the cycles as \
it moves left through c2 and c3. MultiplyCycles[cyclelist] or \
MultiplyCycles[{cyclelist}] will work on any length of list of cycles and \
finds the product, working from right to left if the option ProductOrder is \
set to RightToLeft, or from left to right if set to LeftToRight. See \
ProductOrder for details on its values.", 14], "Tooltip"]& ]},
                  {
                   TagBox[
                    TooltipBox[
                    ButtonBox[
                    RowBox[{"MultiplyPermutations", "[", 
                    RowBox[{
                    "\[SelectionPlaceholder]", ",", "\[Placeholder]"}], "]"}],
                    
                    BaseStyle->"Paste"],
                    StyleBox[
                    "\"MultiplyPermutations[perm2, perm1], by default, \
computes the product of perm1 followed by perm2 (right to left). The option \
ProductOrder is by default set to RightToLeft, but can also be set to \
LeftToRight. Note that the permutations can be expressed as rules (eg., {1\
\[Rule]3, 2\[Rule]2,3\[Rule]1}), or lists (eg., {3,2,1}) or mixed, though the \
output will always be a list.\"", 14, StripOnInput -> False],
                    LabelStyle->"TextStyling"],
                    Annotation[#, 
                    Style[
                    "MultiplyPermutations[perm2, perm1], by default, computes \
the product of perm1 followed by perm2 (right to left). The option \
ProductOrder is by default set to RightToLeft, but can also be set to \
LeftToRight. Note that the permutations can be expressed as rules (eg., {1\
\[Rule]3, 2\[Rule]2,3\[Rule]1}), or lists (eg., {3,2,1}) or mixed, though the \
output will always be a list.", 14], "Tooltip"]& ]},
                  {
                   TagBox[
                    TooltipBox[
                    ButtonBox[
                    RowBox[{
                    "OddPermutationQ", "[", "\[SelectionPlaceholder]", "]"}],
                    BaseStyle->"Paste"],
                    StyleBox[
                    "\"OddPermutationQ[p] returns True if p is an odd \
permutation, and False otherwise.\"", 14, StripOnInput -> False],
                    LabelStyle->"TextStyling"],
                    Annotation[#, 
                    Style[
                    "OddPermutationQ[p] returns True if p is an odd \
permutation, and False otherwise.", 14], "Tooltip"]& ]},
                  {
                   TagBox[
                    TooltipBox[
                    ButtonBox[
                    RowBox[{"Parity", "[", "\[SelectionPlaceholder]", "]"}],
                    BaseStyle->"Paste"],
                    StyleBox[
                    "\"Parity[perm] returns 1 if the permutation perm is an \
even permutation and -1 if odd.\"", 14, StripOnInput -> False],
                    LabelStyle->"TextStyling"],
                    Annotation[#, 
                    Style[
                    "Parity[perm] returns 1 if the permutation perm is an \
even permutation and -1 if odd.", 14], "Tooltip"]& ]},
                  {
                   TagBox[
                    TooltipBox[
                    ButtonBox[
                    RowBox[{
                    "PermutationInverse", "[", "\[SelectionPlaceholder]", 
                    "]"}],
                    BaseStyle->"Paste"],
                    StyleBox[
                    "\"PermutationInverse[perm] gives the permutation that is \
the inverse of perm\"", 14, StripOnInput -> False],
                    LabelStyle->"TextStyling"],
                    Annotation[#, 
                    Style[
                    "PermutationInverse[perm] gives the permutation that is \
the inverse of perm", 14], "Tooltip"]& ]},
                  {
                   TagBox[
                    TooltipBox[
                    ButtonBox[
                    RowBox[{
                    "PermutationQ", "[", "\[SelectionPlaceholder]", "]"}],
                    BaseStyle->"Paste"],
                    StyleBox[
                    "\"PermutationQ[e] yields True if e is a list \
representing a permutation. (This is a modified version of that found in the \
DiscreteMath`Permutations` package.)\"", 14, StripOnInput -> False],
                    LabelStyle->"TextStyling"],
                    Annotation[#, 
                    Style[
                    "PermutationQ[e] yields True if e is a list representing \
a permutation. (This is a modified version of that found in the \
DiscreteMath`Permutations` package.)", 14], "Tooltip"]& ]},
                  {
                   TagBox[
                    TooltipBox[
                    ButtonBox[
                    RowBox[{
                    "RandomPermutationAA", "[", "\[SelectionPlaceholder]", "]"}],
                    BaseStyle->"Paste"],
                    StyleBox[
                    "\"RandomPermutationAA[n] returns a random permutation of \
length n. (This is a modified version of that found in the \
DiscreteMath`Permutations` package.)\"", 14, StripOnInput -> False],
                    LabelStyle->"TextStyling"],
                    Annotation[#, 
                    Style[
                    "RandomPermutationAA[n] returns a random permutation of \
length n. (This is a modified version of that found in the \
DiscreteMath`Permutations` package.)", 14], "Tooltip"]& ]},
                  {
                   TagBox[
                    TooltipBox[
                    ButtonBox[
                    RowBox[{"ToCycles", "[", "\[SelectionPlaceholder]", "]"}],
                    
                    BaseStyle->"Paste"],
                    StyleBox[
                    "\"ToCycles[p] writes the permutation p as a list of \
disjoint cyclic permutations (i.e., cycles) whose product is p. If p is a \
list of permutations, this will return a list of cycles for each permutation. \
There are two options for ToCycles, CycleAs and Normalize. Using CycleAs \
\[Rule] List, the cycles are returned in the form returned by the ToCycles \
function in the DiscreteMath`Permutations` package (so that the permutation \
{2,1,4,3} is returned as {{2,1},{4,3}}), while CycleAs \[Rule] Cycle \
(default) uses Cycle[2,1] for {2,1} in the cycle list. If CycleAs \[Rule] \
Cycle is used, Normalize \[Rule] True (default) applies NormalizeCycleList to \
the list of cycles. See Normalize for details on how this works.\"", 14, 
                    StripOnInput -> False],
                    LabelStyle->"TextStyling"],
                    Annotation[#, 
                    Style[
                    "ToCycles[p] writes the permutation p as a list of \
disjoint cyclic permutations (i.e., cycles) whose product is p. If p is a \
list of permutations, this will return a list of cycles for each permutation. \
There are two options for ToCycles, CycleAs and Normalize. Using CycleAs \
\[Rule] List, the cycles are returned in the form returned by the ToCycles \
function in the DiscreteMath`Permutations` package (so that the permutation \
{2,1,4,3} is returned as {{2,1},{4,3}}), while CycleAs \[Rule] Cycle \
(default) uses Cycle[2,1] for {2,1} in the cycle list. If CycleAs \[Rule] \
Cycle is used, Normalize \[Rule] True (default) applies NormalizeCycleList to \
the list of cycles. See Normalize for details on how this works.", 14], 
                    "Tooltip"]& ]},
                  {
                   TagBox[
                    TooltipBox[
                    ButtonBox[
                    RowBox[{
                    "ToPermutation", "[", "\[SelectionPlaceholder]", "]"}],
                    BaseStyle->"Paste"],
                    StyleBox[
                    "\"ToPermutation[RuleList] returns the permutation \
determined by a list of rules. For example, {1\[Rule]2, 2\[Rule]1} becomes \
{2,1}. Similarly, {{1\[Rule]2}, {2\[Rule]1}} becomes {2,1}. ToPermutation[c, \
n] rewrites the cycle c of length <= n as a permutation of length n (or in \
S[n]). ToPermutation[c] uses the maximum value appearing in c for n.\"", 14, 
                    StripOnInput -> False],
                    LabelStyle->"TextStyling"],
                    Annotation[#, 
                    Style[
                    "ToPermutation[RuleList] returns the permutation \
determined by a list of rules. For example, {1\[Rule]2, 2\[Rule]1} becomes \
{2,1}. Similarly, {{1\[Rule]2}, {2\[Rule]1}} becomes {2,1}. ToPermutation[c, \
n] rewrites the cycle c of length <= n as a permutation of length n (or in \
S[n]). ToPermutation[c] uses the maximum value appearing in c for n.", 14], 
                    "Tooltip"]& ]},
                  {
                   TagBox[
                    TooltipBox[
                    ButtonBox[
                    RowBox[{
                    "ToTranspositions", "[", "\[SelectionPlaceholder]", "]"}],
                    
                    BaseStyle->"Paste"],
                    StyleBox[
                    "\"ToTranspositions[c] rewrites the cycle c as a product \
of transpositions. ToTranspositions[perm] rewrites the permutation perm as a \
product of transpositions.\"", 14, StripOnInput -> False],
                    LabelStyle->"TextStyling"],
                    Annotation[#, 
                    Style[
                    "ToTranspositions[c] rewrites the cycle c as a product of \
transpositions. ToTranspositions[perm] rewrites the permutation perm as a \
product of transpositions.", 14], "Tooltip"]& ]}
                 },
                 GridBoxAlignment->{"Columns" -> {{Left}}},
                 
                 GridBoxItemSize->{
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
                "Column"],
               ImageMargins->0]}
            },
            AutoDelete->False,
            BaselinePosition->{1, 1},
            GridBoxAlignment->{"Columns" -> {{Left}}},
            GridBoxBackground->{"Columns" -> {{Automatic}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
            GridBoxSpacings->{"Columns" -> {{0.2}}, "Rows" -> {{0.5}}}]}, 
           Dynamic[Typeset`var$$],
           Alignment->Automatic,
           BaselinePosition->Baseline,
           DefaultBaseStyle->"OpenerView",
           ImageMargins->0,
           ImageSize->Automatic],
          Deployed->False,
          StripOnInput->False],
         OpenerView[{
           Tooltip[
           "Permutation functions", 
            "List of permutation functions available"], 
           Column[{
             Tooltip[
              PasteButton[
               Defer[
                
                AbstractAlgebra`Master`DisjointCyclesQ[$CellContext` \
\[SelectionPlaceholder]]]], 
              Style[
              "DisjointCyclesQ[cyclist] returns True if the cycles in cyclist \
are disjoint, and False otherwise. The cycles in cyclist can be either in \
List form or using Cycle notation. Also, cyclist can be of any length and \
either given as a list or a sequence of cycles.", 14]], 
             Tooltip[
              PasteButton[
               Defer[
                
                AbstractAlgebra`Master`EvenPermutationQ[$CellContext` \
\[SelectionPlaceholder]]]], 
              Style[
              "EvenPermutationQ[p] returns True if p is an even permutation, \
and False otherwise.", 14]], 
             Tooltip[
              PasteButton[
               Defer[
                
                AbstractAlgebra`Master`ExtendPermutation[$CellContext` \
\[SelectionPlaceholder], $CellContext` \[Placeholder]]]], 
              Style[
              "ExtendPermutation[p, n] takes a permutation p in S[m] (for m < \
n) and returns a permutation in S[n] using the components of p in the first m \
positions and filling out positions m+1 to n with the integers m+1 to n, so \
that p is naturally extended.", 14]], 
             Tooltip[
              PasteButton[
               Defer[
                
                AbstractAlgebra`Master`FormGroupoidFromCycles[$CellContext` \
\[SelectionPlaceholder]]]], 
              Style[
              "FormGroupoidFromCycles[cl, opts] forms the Groupoid of \
permutations whose elements are (initially) written as either cycles or \
products of cycles. The option opts takes on values similar to FormGroupoid, \
as well as the option ProductOrder (since we are working with permutations).",
                14]], 
             Tooltip[
              PasteButton[
               Defer[
                
                AbstractAlgebra`Master`FromCycles[$CellContext` \
\[SelectionPlaceholder]]]], 
              Style[
              "FromCycles[{c1, c2,...,cn}] gives the permutation that \
corresponds to the product of the cycles c1, c2, ...cn, assuming that the \
cycles ci are disjoint. This is a modification and improvement on the \
function from the DiscreteMath`Permutations` package.", 14]], 
             Tooltip[
              PasteButton[
               Defer[
                
                AbstractAlgebra`Master`MultiplyCycles[$CellContext` \
\[SelectionPlaceholder], $CellContext` \[Placeholder]]]], 
              Style[
              "MultiplyCycles[c2, c1, n] views both cycles c1 and c2 as in \
S[n] and determines the permutation representing their product. Note that the \
order of the multiplication is from right to left (unless specified otherwise \
by ProductOrder). MultiplyCycles[c2, c1] does the same but determines the \
value for n by the equation n = Max[Join[c1, c2]]. MultiplyCycles[c3, c2, c1] \
starts from the right and multiplies the cycles as it moves left through c2 \
and c3. MultiplyCycles[cyclelist] or MultiplyCycles[{cyclelist}] will work on \
any length of list of cycles and finds the product, working from right to \
left if the option ProductOrder is set to RightToLeft, or from left to right \
if set to LeftToRight. See ProductOrder for details on its values.", 14]], 
             Tooltip[
              PasteButton[
               Defer[
                
                AbstractAlgebra`Master`MultiplyPermutations[$CellContext` \
\[SelectionPlaceholder], $CellContext` \[Placeholder]]]], 
              Style[
              "MultiplyPermutations[perm2, perm1], by default, computes the \
product of perm1 followed by perm2 (right to left). The option ProductOrder \
is by default set to RightToLeft, but can also be set to LeftToRight. Note \
that the permutations can be expressed as rules (eg., {1\[Rule]3, 2\[Rule]2,3\
\[Rule]1}), or lists (eg., {3,2,1}) or mixed, though the output will always \
be a list.", 14]], 
             Tooltip[
              PasteButton[
               Defer[
                
                AbstractAlgebra`Master`OddPermutationQ[$CellContext` \
\[SelectionPlaceholder]]]], 
              Style[
              "OddPermutationQ[p] returns True if p is an odd permutation, \
and False otherwise.", 14]], 
             Tooltip[
              PasteButton[
               Defer[
                
                AbstractAlgebra`Master`Parity[$CellContext` \
\[SelectionPlaceholder]]]], 
              Style[
              "Parity[perm] returns 1 if the permutation perm is an even \
permutation and -1 if odd.", 14]], 
             Tooltip[
              PasteButton[
               Defer[
                
                AbstractAlgebra`Master`PermutationInverse[$CellContext` \
\[SelectionPlaceholder]]]], 
              Style[
              "PermutationInverse[perm] gives the permutation that is the \
inverse of perm", 14]], 
             Tooltip[
              PasteButton[
               Defer[
                
                AbstractAlgebra`Master`PermutationQ[$CellContext` \
\[SelectionPlaceholder]]]], 
              Style[
              "PermutationQ[e] yields True if e is a list representing a \
permutation. (This is a modified version of that found in the \
DiscreteMath`Permutations` package.)", 14]], 
             Tooltip[
              PasteButton[
               Defer[
                
                AbstractAlgebra`Master`RandomPermutationAA[$CellContext` \
\[SelectionPlaceholder]]]], 
              Style[
              "RandomPermutationAA[n] returns a random permutation of length n. \
(This is a modified version of that found in the DiscreteMath`Permutations` \
package.)", 14]], 
             Tooltip[
              PasteButton[
               Defer[
                
                AbstractAlgebra`Master`ToCycles[$CellContext` \
\[SelectionPlaceholder]]]], 
              Style[
              "ToCycles[p] writes the permutation p as a list of disjoint \
cyclic permutations (i.e., cycles) whose product is p. If p is a list of \
permutations, this will return a list of cycles for each permutation. There \
are two options for ToCycles, CycleAs and Normalize. Using CycleAs \[Rule] \
List, the cycles are returned in the form returned by the ToCycles function \
in the DiscreteMath`Permutations` package (so that the permutation {2,1,4,3} \
is returned as {{2,1},{4,3}}), while CycleAs \[Rule] Cycle (default) uses \
Cycle[2,1] for {2,1} in the cycle list. If CycleAs \[Rule] Cycle is used, \
Normalize \[Rule] True (default) applies NormalizeCycleList to the list of \
cycles. See Normalize for details on how this works.", 14]], 
             Tooltip[
              PasteButton[
               Defer[
                
                AbstractAlgebra`Master`ToPermutation[$CellContext` \
\[SelectionPlaceholder]]]], 
              Style[
              "ToPermutation[RuleList] returns the permutation determined by \
a list of rules. For example, {1\[Rule]2, 2\[Rule]1} becomes {2,1}. \
Similarly, {{1\[Rule]2}, {2\[Rule]1}} becomes {2,1}. ToPermutation[c, n] \
rewrites the cycle c of length <= n as a permutation of length n (or in \
S[n]). ToPermutation[c] uses the maximum value appearing in c for n.", 14]], 
             Tooltip[
              PasteButton[
               Defer[
                
                AbstractAlgebra`Master`ToTranspositions[$CellContext` \
\[SelectionPlaceholder]]]], 
              Style[
              "ToTranspositions[c] rewrites the cycle c as a product of \
transpositions. ToTranspositions[perm] rewrites the permutation perm as a \
product of transpositions.", 14]]}]}, False]],
        DynamicModuleValues:>{}],
       Setting[#, {0}]& ]},
     {
      TagBox[
       DynamicModuleBox[{Typeset`var$$ = False}, 
        InterpretationBox[
         StyleBox[
          PaneSelectorBox[{False->GridBox[{
             {
              OpenerBox[Dynamic[Typeset`var$$],
               Appearance->Automatic,
               AutoAction->False,
               ContinuousAction->False,
               Enabled->Automatic], 
              TagBox[
               TooltipBox["\<\"Morphism functions\"\>",
                "\"List of morphism functions available\"",
                LabelStyle->"TextStyling"],
               
               Annotation[#, "List of morphism functions available", 
                "Tooltip"]& ]}
            },
            AutoDelete->False,
            BaselinePosition->{1, 1},
            GridBoxAlignment->{"Columns" -> {{Left}}},
            GridBoxBackground->{"Columns" -> {{Automatic}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
            GridBoxSpacings->{"Columns" -> {{0.2}}, "Rows" -> {{0.5}}}], True->
           GridBox[{
             {
              OpenerBox[Dynamic[Typeset`var$$],
               Appearance->Automatic,
               AutoAction->False,
               ContinuousAction->False,
               Enabled->Automatic], 
              TagBox[
               TooltipBox["\<\"Morphism functions\"\>",
                "\"List of morphism functions available\"",
                LabelStyle->"TextStyling"],
               
               Annotation[#, "List of morphism functions available", 
                "Tooltip"]& ]},
             {"", 
              PaneBox[
               TagBox[GridBox[{
                  {
                   TagBox[
                    TooltipBox[
                    ButtonBox[
                    RowBox[{"Automorphism", "[", 
                    RowBox[{"\[SelectionPlaceholder]", ",", 
                    RowBox[{"\[Placeholder]", "\[Rule]", "\[Placeholder]"}]}],
                     "]"}],
                    BaseStyle->"Paste"],
                    StyleBox[
                    "\"Automorphism[G, a \[Rule] b] forms the automorphism \
determined by the single rule a \[Rule] b, if a and b are both generators of \
the cyclic group G. Available option : Mode (possible values : Computational, \
Textual, Visual, and All).\"", 14, StripOnInput -> False],
                    LabelStyle->"TextStyling"],
                    Annotation[#, 
                    Style[
                    "Automorphism[G, a \[Rule] b] forms the automorphism \
determined by the single rule a \[Rule] b, if a and b are both generators of \
the cyclic group G. Available option : Mode (possible values : Computational, \
Textual, Visual, and All).", 14], "Tooltip"]& ]},
                  {
                   TagBox[
                    TooltipBox[
                    ButtonBox[
                    RowBox[{
                    "AutomorphismGroup", "[", "\[SelectionPlaceholder]", "]"}],
                    BaseStyle->"Paste"],
                    StyleBox[
                    "\"AutomorphismGroup[G] returns the group of \
automorphisms of a cyclic group G.\"", 14, StripOnInput -> False],
                    LabelStyle->"TextStyling"],
                    Annotation[#, 
                    Style[
                    "AutomorphismGroup[G] returns the group of automorphisms \
of a cyclic group G.", 14], "Tooltip"]& ]},
                  {
                   TagBox[
                    TooltipBox[
                    ButtonBox[
                    RowBox[{"Codomain", "[", "\[SelectionPlaceholder]", "]"}],
                    
                    BaseStyle->"Paste"],
                    StyleBox[
                    "\"Codomain[f] returns the structure used in the image of \
the Morphoid f.\"", 14, StripOnInput -> False],
                    LabelStyle->"TextStyling"],
                    Annotation[#, 
                    Style[
                    "Codomain[f] returns the structure used in the image of \
the Morphoid f.", 14], "Tooltip"]& ]},
                  {
                   TagBox[
                    TooltipBox[
                    ButtonBox[
                    RowBox[{"Domain", "[", "\[SelectionPlaceholder]", "]"}],
                    BaseStyle->"Paste"],
                    StyleBox[
                    "\"Domain[f] returns the structure used in the domain of \
the Morphoid f. Domain[S] returns the elements in the Groupoid or Ringoid S; \
this is equivalent to the Elements function.\"", 14, StripOnInput -> False],
                    LabelStyle->"TextStyling"],
                    Annotation[#, 
                    Style[
                    "Domain[f] returns the structure used in the domain of \
the Morphoid f. Domain[S] returns the elements in the Groupoid or Ringoid S; \
this is equivalent to the Elements function.", 14], "Tooltip"]& ]},
                  {
                   TagBox[
                    TooltipBox[
                    ButtonBox[
                    RowBox[{"FormMorphoid", "[", 
                    RowBox[{
                    "\[SelectionPlaceholder]", ",", "\[Placeholder]", ",", 
                    "\[Placeholder]"}], "]"}],
                    BaseStyle->"Paste"],
                    StyleBox[
                    "\"FormMorphoid[f, S1, S2, (opts)] is the standard means \
for creating a Morphoid. Here, S1 and S2 are Groupoids or Ringoids, and f is \
either a list of Rules, a Function, or a Symbol. In the special case where S1 \
is a cyclic Groupoid, f can consist of just one rule that sets up the \
morphism. Additionally, if S1 consists of n elements and S2 consists of m \
elements, then FormMorphoid[{p1, p2, ... pn}, S1, S2] forms the Morphoid by \
sending the first element in S1 to the element in S2 in position p1, the \
second element in S1 to the element in position p2 in S2, until finally the \
nth element goes to the element in position pn in S2. FormMorphoidSetup may \
be useful in using this method. The options opts can consist of setting the \
Mode or the value of FormatFunction (default is False), which determines if \
the function should be formatted or not. Another alternative to consider is \
to use MorphoidSetupMenu. This function uses drop-down menus to make the \
function assignments. See this function for further details.\"", 14, 
                    StripOnInput -> False],
                    LabelStyle->"TextStyling"],
                    Annotation[#, 
                    Style[
                    "FormMorphoid[f, S1, S2, (opts)] is the standard means \
for creating a Morphoid. Here, S1 and S2 are Groupoids or Ringoids, and f is \
either a list of Rules, a Function, or a Symbol. In the special case where S1 \
is a cyclic Groupoid, f can consist of just one rule that sets up the \
morphism. Additionally, if S1 consists of n elements and S2 consists of m \
elements, then FormMorphoid[{p1, p2, ... pn}, S1, S2] forms the Morphoid by \
sending the first element in S1 to the element in S2 in position p1, the \
second element in S1 to the element in position p2 in S2, until finally the \
nth element goes to the element in position pn in S2. FormMorphoidSetup may \
be useful in using this method. The options opts can consist of setting the \
Mode or the value of FormatFunction (default is False), which determines if \
the function should be formatted or not. Another alternative to consider is \
to use MorphoidSetupMenu. This function uses drop-down menus to make the \
function assignments. See this function for further details.", 14], 
                    "Tooltip"]& ]},
                  {
                   TagBox[
                    TooltipBox[
                    ButtonBox[
                    RowBox[{"FormMorphoidSetup", "[", 
                    RowBox[{
                    "\[SelectionPlaceholder]", ",", "\[Placeholder]"}], "]"}],
                    
                    BaseStyle->"Paste"],
                    StyleBox[
                    "\"FormMorphoidSetup[S1, S2] produces a graphic that \
assists in the preparation of a list of positions to use in FormMorphoid. The \
arguments S2 and S2 must be Groupoids or Ringoids. An alternative to consider \
is to use MorphoidSetupMenu. This function uses drop-down menus to make the \
function assignments. See this function for further details.\"", 14, 
                    StripOnInput -> False],
                    LabelStyle->"TextStyling"],
                    Annotation[#, 
                    Style[
                    "FormMorphoidSetup[S1, S2] produces a graphic that \
assists in the preparation of a list of positions to use in FormMorphoid. The \
arguments S2 and S2 must be Groupoids or Ringoids. An alternative to consider \
is to use MorphoidSetupMenu. This function uses drop-down menus to make the \
function assignments. See this function for further details.", 14], 
                    "Tooltip"]& ]},
                  {
                   TagBox[
                    TooltipBox[
                    ButtonBox[
                    RowBox[{"MorphoidImage", "[", "\[SelectionPlaceholder]", "]"}],
                    BaseStyle->"Paste"],
                    StyleBox[
                    "\"MorphoidImage[f] returns a Groupoid or Ringoid (as \
appropriate) consisting of the image values of the Morphoid f. Additionally, \
MorphoidImage[f, S] returns the images of the substructure S of the domain of f. \
Available option: Mode (possible values: Computational, Textual, Visual, and \
All).\"", 14, StripOnInput -> False],
                    LabelStyle->"TextStyling"],
                    Annotation[#, 
                    Style[
                    "MorphoidImage[f] returns a Groupoid or Ringoid (as appropriate) \
consisting of the image values of the Morphoid f. Additionally, MorphoidImage[f, S] \
returns the images of the substructure S of the domain of f. Available \
option: Mode (possible values: Computational, Textual, Visual, and All).", 
                    14], "Tooltip"]& ]},
                  {
                   TagBox[
                    TooltipBox[
                    ButtonBox[
                    RowBox[{
                    "InjectiveQ", "[", "\[SelectionPlaceholder]", "]"}],
                    BaseStyle->"Paste"],
                    StyleBox[
                    "\"InjectiveQ[f] returns True if the Morphoid f is \
injective (one-to-one), and False otherwise.\"", 14, StripOnInput -> False],
                    LabelStyle->"TextStyling"],
                    Annotation[#, 
                    Style[
                    "InjectiveQ[f] returns True if the Morphoid f is \
injective (one-to-one), and False otherwise.", 14], "Tooltip"]& ]},
                  {
                   TagBox[
                    TooltipBox[
                    ButtonBox[
                    RowBox[{"InnerAutomorphism", "[", 
                    RowBox[{
                    "\[SelectionPlaceholder]", ",", "\[Placeholder]"}], "]"}],
                    
                    BaseStyle->"Paste"],
                    StyleBox[
                    "\"InnerAutomorphism[G, g], when given an element g in \
the group G, returns the inner automorphism of G induced by g.\"", 14, 
                    StripOnInput -> False],
                    LabelStyle->"TextStyling"],
                    Annotation[#, 
                    Style[
                    "InnerAutomorphism[G, g], when given an element g in the \
group G, returns the inner automorphism of G induced by g.", 14], 
                    "Tooltip"]& ]},
                  {
                   TagBox[
                    TooltipBox[
                    ButtonBox[
                    RowBox[{
                    "InnerAutomorphismGroup", "[", "\[SelectionPlaceholder]", 
                    "]"}],
                    BaseStyle->"Paste"],
                    StyleBox[
                    "\"InnerAutomorphismGroup[G] returns the group of inner \
automorphisms of G, if G is a group.\"", 14, StripOnInput -> False],
                    LabelStyle->"TextStyling"],
                    Annotation[#, 
                    Style[
                    "InnerAutomorphismGroup[G] returns the group of inner \
automorphisms of G, if G is a group.", 14], "Tooltip"]& ]},
                  {
                   TagBox[
                    TooltipBox[
                    ButtonBox[
                    RowBox[{"InverseImage", "[", 
                    RowBox[{
                    "\[SelectionPlaceholder]", ",", "\[Placeholder]"}], "]"}],
                    
                    BaseStyle->"Paste"],
                    StyleBox[
                    "\"InverseImage[f, S] returns the elements of the domain \
of the Morphoid f that map into elements of the list or element S (from the \
codomain). There is a Visual mode for this function.\"", 14, StripOnInput -> 
                    False],
                    LabelStyle->"TextStyling"],
                    Annotation[#, 
                    Style[
                    "InverseImage[f, S] returns the elements of the domain of \
the Morphoid f that map into elements of the list or element S (from the \
codomain). There is a Visual mode for this function.", 14], "Tooltip"]& ]},
                  {
                   TagBox[
                    TooltipBox[
                    ButtonBox[
                    RowBox[{
                    "InverseImages", "[", "\[SelectionPlaceholder]", "]"}],
                    BaseStyle->"Paste"],
                    StyleBox[
                    "\"InverseImages[f] returns the set of inverse images. \
This is partially equivalent to InverseImage[f, Elements[Codomain[f]]] except \
the latter returns a single (unsorted) list of the inverse images while this \
function partitions them according to the elements in Codomain[f]. The option \
WithImages (defaulting to False) indicates whether the image elements should \
be included in the output. There is a Visual mode for this function.\"", 14, 
                    StripOnInput -> False],
                    LabelStyle->"TextStyling"],
                    Annotation[#, 
                    Style[
                    "InverseImages[f] returns the set of inverse images. This \
is partially equivalent to InverseImage[f, Elements[Codomain[f]]] except the \
latter returns a single (unsorted) list of the inverse images while this \
function partitions them according to the elements in Codomain[f]. The option \
WithImages (defaulting to False) indicates whether the image elements should \
be included in the output. There is a Visual mode for this function.", 14], 
                    "Tooltip"]& ]},
                  {
                   TagBox[
                    TooltipBox[
                    ButtonBox[
                    RowBox[{
                    "IsomorphismQ", "[", "\[SelectionPlaceholder]", "]"}],
                    BaseStyle->"Paste"],
                    StyleBox[
                    "\"IsomorphismQ[f] returns True if the Morphoid f is an \
isomorphism (group or ring, as appropriate), and False otherwise. The option \
Cautious (defaulting to False) indicates whether MorphismQ (if True) or \
ProbableMorphismQ (if False) should be used for the testing.\"", 14, 
                    StripOnInput -> False],
                    LabelStyle->"TextStyling"],
                    Annotation[#, 
                    Style[
                    "IsomorphismQ[f] returns True if the Morphoid f is an \
isomorphism (group or ring, as appropriate), and False otherwise. The option \
Cautious (defaulting to False) indicates whether MorphismQ (if True) or \
ProbableMorphismQ (if False) should be used for the testing.", 14], 
                    "Tooltip"]& ]},
                  {
                   TagBox[
                    TooltipBox[
                    ButtonBox[
                    RowBox[{"Kernel", "[", "\[SelectionPlaceholder]", "]"}],
                    BaseStyle->"Paste"],
                    StyleBox[
                    "\"Kernel[f] returns the kernel of the Morphoid f, if the \
codomain has an identity element. It is not necessary that f satisfies \
MorphismQ. The object returned is a Groupoid or Ringoid (as appropriate). \
Available option: Mode (possible values: Computational, Textual, Visual, and \
All).\"", 14, StripOnInput -> False],
                    LabelStyle->"TextStyling"],
                    Annotation[#, 
                    Style[
                    "Kernel[f] returns the kernel of the Morphoid f, if the \
codomain has an identity element. It is not necessary that f satisfies \
MorphismQ. The object returned is a Groupoid or Ringoid (as appropriate). \
Available option: Mode (possible values: Computational, Textual, Visual, and \
All).", 14], "Tooltip"]& ]},
                  {
                   TagBox[
                    TooltipBox[
                    ButtonBox[
                    RowBox[{"MorphismQ", "[", "\[SelectionPlaceholder]", "]"}],
                    BaseStyle->"Paste"],
                    StyleBox[
                    "\"MorphismQ[f] returns True if the Morphoid f is a \
homomorphism, and False otherwise. This function automatically checks to see \
if f represents a group homomorphism or a ring homomorphism according to \
whether the structures involved are groups or rings. The Visual mode can be \
used with this function. MorphismQ[f, {S1, op1}, {S2, op2}] or MorphismQ[f, \
{S1, op1, op3}, {S2, op2, op4}] are alternative usages, where f is either a \
list of Rules, a Function or a Symbol. Available option: Mode (possible \
values: Computational, Textual, Visual, and All).\"", 14, StripOnInput -> 
                    False],
                    LabelStyle->"TextStyling"],
                    Annotation[#, 
                    Style[
                    "MorphismQ[f] returns True if the Morphoid f is a \
homomorphism, and False otherwise. This function automatically checks to see \
if f represents a group homomorphism or a ring homomorphism according to \
whether the structures involved are groups or rings. The Visual mode can be \
used with this function. MorphismQ[f, {S1, op1}, {S2, op2}] or MorphismQ[f, \
{S1, op1, op3}, {S2, op2, op4}] are alternative usages, where f is either a \
list of Rules, a Function or a Symbol. Available option: Mode (possible \
values: Computational, Textual, Visual, and All).", 14], "Tooltip"]& ]},
                  {
                   TagBox[
                    TooltipBox[
                    ButtonBox[
                    RowBox[{"PreservesQ", "[", 
                    RowBox[{"\[SelectionPlaceholder]", ",", 
                    RowBox[{"{", 
                    RowBox[{"\[Placeholder]", ",", "\[Placeholder]"}], 
                    "}"}]}], "]"}],
                    BaseStyle->"Paste"],
                    StyleBox[
                    "\"PreservesQ[f, {a, b}] returns True if the Morphoid f \
preserves the binary operation(s) for the pair (a,b), and False otherwise. \
Alternatively, if f is either a list of Rules, a Function or a Symbol, Si is \
a set of Elements, and opi is a binary operation, then the following are also \
acceptable usages: PreservesQ[f, {S1, op1}, {S2, op2}, {a, b}], PreservesQ[f, \
{S1, op1, op3}, {S2, op2, op4}, {a, b}]. Available option: Mode (possible \
values: Computational, Textual, Visual, All, and Interactive (on group \
elements)).\"", 14, StripOnInput -> False],
                    LabelStyle->"TextStyling"],
                    Annotation[#, 
                    Style[
                    "PreservesQ[f, {a, b}] returns True if the Morphoid f \
preserves the binary operation(s) for the pair (a,b), and False otherwise. \
Alternatively, if f is either a list of Rules, a Function or a Symbol, Si is \
a set of Elements, and opi is a binary operation, then the following are also \
acceptable usages: PreservesQ[f, {S1, op1}, {S2, op2}, {a, b}], PreservesQ[f, \
{S1, op1, op3}, {S2, op2, op4}, {a, b}]. Available option: Mode (possible \
values: Computational, Textual, Visual, All, and Interactive (on group \
elements)).", 14], "Tooltip"]& ]},
                  {
                   TagBox[
                    TooltipBox[
                    ButtonBox[
                    RowBox[{
                    "SurjectiveQ", "[", "\[SelectionPlaceholder]", "]"}],
                    BaseStyle->"Paste"],
                    StyleBox[
                    "\"Surjective[f] returns True if the Morphoid f is \
surjective (onto), and False otherwise.\"", 14, StripOnInput -> False],
                    LabelStyle->"TextStyling"],
                    Annotation[#, 
                    Style[
                    "Surjective[f] returns True if the Morphoid f is \
surjective (onto), and False otherwise.", 14], "Tooltip"]& ]},
                  {
                   TagBox[
                    TooltipBox[
                    ButtonBox[
                    RowBox[{
                    "VisualizeMorphoid", "[", "\[SelectionPlaceholder]", "]"}],
                    BaseStyle->"Paste"],
                    StyleBox[
                    "\"VisualizeMorphoid[f, opts] provides a visualization of \
the Morphoid f by using arrows from the domain to the codomain to indicate \
the map. Available options are ColorDomain and ColorCodomain, both of whose \
default value is {}. See these names for more details.\"", 14, StripOnInput -> 
                    False],
                    LabelStyle->"TextStyling"],
                    Annotation[#, 
                    Style[
                    "VisualizeMorphoid[f, opts] provides a visualization of \
the Morphoid f by using arrows from the domain to the codomain to indicate \
the map. Available options are ColorDomain and ColorCodomain, both of whose \
default value is {}. See these names for more details.", 14], "Tooltip"]& ]}
                 },
                 GridBoxAlignment->{"Columns" -> {{Left}}},
                 
                 GridBoxItemSize->{
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
                "Column"],
               ImageMargins->0]}
            },
            AutoDelete->False,
            BaselinePosition->{1, 1},
            GridBoxAlignment->{"Columns" -> {{Left}}},
            GridBoxBackground->{"Columns" -> {{Automatic}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
            GridBoxSpacings->{"Columns" -> {{0.2}}, "Rows" -> {{0.5}}}]}, 
           Dynamic[Typeset`var$$],
           Alignment->Automatic,
           BaselinePosition->Baseline,
           DefaultBaseStyle->"OpenerView",
           ImageMargins->0,
           ImageSize->Automatic],
          Deployed->False,
          StripOnInput->False],
         OpenerView[{
           Tooltip[
           "Morphism functions", "List of morphism functions available"], 
           Column[{
             Tooltip[
              PasteButton[
               Defer[
                
                AbstractAlgebra`Master`Automorphism[$CellContext` \
\[SelectionPlaceholder], $CellContext` \[Placeholder] -> $CellContext` \
\[Placeholder]]]], 
              Style[
              "Automorphism[G, a \[Rule] b] forms the automorphism determined \
by the single rule a \[Rule] b, if a and b are both generators of the cyclic \
group G. Available option : Mode (possible values : Computational, Textual, \
Visual, and All).", 14]], 
             Tooltip[
              PasteButton[
               Defer[
                
                AbstractAlgebra`Master`AutomorphismGroup[$CellContext` \
\[SelectionPlaceholder]]]], 
              Style[
              "AutomorphismGroup[G] returns the group of automorphisms of a \
cyclic group G.", 14]], 
             Tooltip[
              PasteButton[
               Defer[
                
                AbstractAlgebra`Master`Codomain[$CellContext` \
\[SelectionPlaceholder]]]], 
              Style[
              "Codomain[f] returns the structure used in the image of the \
Morphoid f.", 14]], 
             Tooltip[
              PasteButton[
               Defer[
                
                AbstractAlgebra`Master`Domain[$CellContext` \
\[SelectionPlaceholder]]]], 
              Style[
              "Domain[f] returns the structure used in the domain of the \
Morphoid f. Domain[S] returns the elements in the Groupoid or Ringoid S; this \
is equivalent to the Elements function.", 14]], 
             Tooltip[
              PasteButton[
               Defer[
                
                AbstractAlgebra`Master`FormMorphoid[$CellContext` \
\[SelectionPlaceholder], $CellContext` \[Placeholder], $CellContext` \
\[Placeholder]]]], 
              Style[
              "FormMorphoid[f, S1, S2, (opts)] is the standard means for \
creating a Morphoid. Here, S1 and S2 are Groupoids or Ringoids, and f is \
either a list of Rules, a Function, or a Symbol. In the special case where S1 \
is a cyclic Groupoid, f can consist of just one rule that sets up the \
morphism. Additionally, if S1 consists of n elements and S2 consists of m \
elements, then FormMorphoid[{p1, p2, ... pn}, S1, S2] forms the Morphoid by \
sending the first element in S1 to the element in S2 in position p1, the \
second element in S1 to the element in position p2 in S2, until finally the \
nth element goes to the element in position pn in S2. FormMorphoidSetup may \
be useful in using this method. The options opts can consist of setting the \
Mode or the value of FormatFunction (default is False), which determines if \
the function should be formatted or not. Another alternative to consider is \
to use MorphoidSetupMenu. This function uses drop-down menus to make the \
function assignments. See this function for further details.", 14]], 
             Tooltip[
              PasteButton[
               Defer[
                
                AbstractAlgebra`Master`FormMorphoidSetup[$CellContext` \
\[SelectionPlaceholder], $CellContext` \[Placeholder]]]], 
              Style[
              "FormMorphoidSetup[S1, S2] produces a graphic that assists in \
the preparation of a list of positions to use in FormMorphoid. The arguments \
S2 and S2 must be Groupoids or Ringoids. An alternative to consider is to use \
MorphoidSetupMenu. This function uses drop-down menus to make the function \
assignments. See this function for further details.", 14]], 
             Tooltip[
              PasteButton[
               Defer[
                MorphoidImage[$CellContext` \[SelectionPlaceholder]]]], 
              Style[
              "MorphoidImage[f] returns a Groupoid or Ringoid (as appropriate) \
consisting of the image values of the Morphoid f. Additionally, MorphoidImage[f, S] \
returns the images of the substructure S of the domain of f. Available \
option: Mode (possible values: Computational, Textual, Visual, and All).", 
               14]], 
             Tooltip[
              PasteButton[
               Defer[
                
                AbstractAlgebra`Master`InjectiveQ[$CellContext` \
\[SelectionPlaceholder]]]], 
              Style[
              "InjectiveQ[f] returns True if the Morphoid f is injective \
(one-to-one), and False otherwise.", 14]], 
             Tooltip[
              PasteButton[
               Defer[
                
                AbstractAlgebra`Master`InnerAutomorphism[$CellContext` \
\[SelectionPlaceholder], $CellContext` \[Placeholder]]]], 
              Style[
              "InnerAutomorphism[G, g], when given an element g in the group \
G, returns the inner automorphism of G induced by g.", 14]], 
             Tooltip[
              PasteButton[
               Defer[
                
                AbstractAlgebra`Master`InnerAutomorphismGroup[$CellContext` \
\[SelectionPlaceholder]]]], 
              Style[
              "InnerAutomorphismGroup[G] returns the group of inner \
automorphisms of G, if G is a group.", 14]], 
             Tooltip[
              PasteButton[
               Defer[
                
                AbstractAlgebra`Master`InverseImage[$CellContext` \
\[SelectionPlaceholder], $CellContext` \[Placeholder]]]], 
              Style[
              "InverseImage[f, S] returns the elements of the domain of the \
Morphoid f that map into elements of the list or element S (from the \
codomain). There is a Visual mode for this function.", 14]], 
             Tooltip[
              PasteButton[
               Defer[
                
                AbstractAlgebra`Master`InverseImages[$CellContext` \
\[SelectionPlaceholder]]]], 
              Style[
              "InverseImages[f] returns the set of inverse images. This is \
partially equivalent to InverseImage[f, Elements[Codomain[f]]] except the \
latter returns a single (unsorted) list of the inverse images while this \
function partitions them according to the elements in Codomain[f]. The option \
WithImages (defaulting to False) indicates whether the image elements should \
be included in the output. There is a Visual mode for this function.", 14]], 
             Tooltip[
              PasteButton[
               Defer[
                
                AbstractAlgebra`Master`IsomorphismQ[$CellContext` \
\[SelectionPlaceholder]]]], 
              Style[
              "IsomorphismQ[f] returns True if the Morphoid f is an \
isomorphism (group or ring, as appropriate), and False otherwise. The option \
Cautious (defaulting to False) indicates whether MorphismQ (if True) or \
ProbableMorphismQ (if False) should be used for the testing.", 14]], 
             Tooltip[
              PasteButton[
               Defer[
                
                AbstractAlgebra`Master`Kernel[$CellContext` \
\[SelectionPlaceholder]]]], 
              Style[
              "Kernel[f] returns the kernel of the Morphoid f, if the \
codomain has an identity element. It is not necessary that f satisfies \
MorphismQ. The object returned is a Groupoid or Ringoid (as appropriate). \
Available option: Mode (possible values: Computational, Textual, Visual, and \
All).", 14]], 
             Tooltip[
              PasteButton[
               Defer[
                
                AbstractAlgebra`Master`MorphismQ[$CellContext` \
\[SelectionPlaceholder]]]], 
              Style[
              "MorphismQ[f] returns True if the Morphoid f is a homomorphism, \
and False otherwise. This function automatically checks to see if f \
represents a group homomorphism or a ring homomorphism according to whether \
the structures involved are groups or rings. The Visual mode can be used with \
this function. MorphismQ[f, {S1, op1}, {S2, op2}] or MorphismQ[f, {S1, op1, \
op3}, {S2, op2, op4}] are alternative usages, where f is either a list of \
Rules, a Function or a Symbol. Available option: Mode (possible values: \
Computational, Textual, Visual, and All).", 14]], 
             Tooltip[
              PasteButton[
               Defer[
                
                AbstractAlgebra`Master`PreservesQ[$CellContext` \
\[SelectionPlaceholder], {$CellContext` \[Placeholder], $CellContext` \
\[Placeholder]}]]], 
              Style[
              "PreservesQ[f, {a, b}] returns True if the Morphoid f preserves \
the binary operation(s) for the pair (a,b), and False otherwise. \
Alternatively, if f is either a list of Rules, a Function or a Symbol, Si is \
a set of Elements, and opi is a binary operation, then the following are also \
acceptable usages: PreservesQ[f, {S1, op1}, {S2, op2}, {a, b}], PreservesQ[f, \
{S1, op1, op3}, {S2, op2, op4}, {a, b}]. Available option: Mode (possible \
values: Computational, Textual, Visual, All, and Interactive (on group \
elements)).", 14]], 
             Tooltip[
              PasteButton[
               Defer[
                
                AbstractAlgebra`Master`SurjectiveQ[$CellContext` \
\[SelectionPlaceholder]]]], 
              Style[
              
              "Surjective[f] returns True if the Morphoid f is surjective \
(onto), and False otherwise.", 14]], 
             Tooltip[
              PasteButton[
               Defer[
                
                AbstractAlgebra`Master`VisualizeMorphoid[$CellContext` \
\[SelectionPlaceholder]]]], 
              Style[
              "VisualizeMorphoid[f, opts] provides a visualization of the \
Morphoid f by using arrows from the domain to the codomain to indicate the \
map. Available options are ColorDomain and ColorCodomain, both of whose \
default value is {}. See these names for more details.", 14]]}]}, False]],
        DynamicModuleValues:>{}],
       Setting[#, {0}]& ]},
     {
      TagBox[
       DynamicModuleBox[{Typeset`var$$ = False}, 
        InterpretationBox[
         StyleBox[
          PaneSelectorBox[{False->GridBox[{
             {
              OpenerBox[Dynamic[Typeset`var$$],
               Appearance->Automatic,
               AutoAction->False,
               ContinuousAction->False,
               Enabled->Automatic], 
              TagBox[
               TooltipBox["\<\"Ring functions\"\>",
                
                "\"List of ring functions available -- You may wish to use \
SwitchStructureTo[Ring]\"",
                LabelStyle->"TextStyling"],
               
               Annotation[#, 
                "List of ring functions available -- You may wish to use \
SwitchStructureTo[Ring]", "Tooltip"]& ]}
            },
            AutoDelete->False,
            BaselinePosition->{1, 1},
            GridBoxAlignment->{"Columns" -> {{Left}}},
            GridBoxBackground->{"Columns" -> {{Automatic}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
            GridBoxSpacings->{"Columns" -> {{0.2}}, "Rows" -> {{0.5}}}], True->
           GridBox[{
             {
              OpenerBox[Dynamic[Typeset`var$$],
               Appearance->Automatic,
               AutoAction->False,
               ContinuousAction->False,
               Enabled->Automatic], 
              TagBox[
               TooltipBox["\<\"Ring functions\"\>",
                
                "\"List of ring functions available -- You may wish to use \
SwitchStructureTo[Ring]\"",
                LabelStyle->"TextStyling"],
               
               Annotation[#, 
                "List of ring functions available -- You may wish to use \
SwitchStructureTo[Ring]", "Tooltip"]& ]},
             {"", 
              PaneBox[
               TagBox[GridBox[{
                  {
                   TagBox[
                    TooltipBox[
                    ButtonBox[
                    RowBox[{
                    "AdditiveGroupoid", "[", "\[SelectionPlaceholder]", "]"}],
                    
                    BaseStyle->"Paste"],
                    StyleBox[
                    "\"AdditiveGroupoid[R] returns the additive Groupoid of \
the ring R. A shortcut is AGroupoid[R].\"", 14, StripOnInput -> False],
                    LabelStyle->"TextStyling"],
                    Annotation[#, 
                    Style[
                    "AdditiveGroupoid[R] returns the additive Groupoid of the \
ring R. A shortcut is AGroupoid[R].", 14], "Tooltip"]& ]},
                  {
                   TagBox[
                    TooltipBox[
                    ButtonBox[
                    RowBox[{
                    "Characteristic", "[", "\[SelectionPlaceholder]", "]"}],
                    BaseStyle->"Paste"],
                    StyleBox[
                    "\"Characteristic[R] returns the characteristic of the \
structure R.\"", 14, StripOnInput -> False],
                    LabelStyle->"TextStyling"],
                    Annotation[#, 
                    Style[
                    "Characteristic[R] returns the characteristic of the \
structure R.", 14], "Tooltip"]& ]},
                  {
                   TagBox[
                    TooltipBox[
                    ButtonBox[
                    RowBox[{
                    "CommutativeQ", "[", "\[SelectionPlaceholder]", "]"}],
                    BaseStyle->"Paste"],
                    StyleBox[
                    "\"CommutativeQ[S] returns True if the structure S is \
commutative, and False otherwise. When S is a group, this is identical to \
AbelianQ[S]. When used with rings, one has the Operation option, which can \
take on the values Addition, Multiplication or Both. Available option: Mode \
(possible values: Computational, Textual, Visual, All, and Interactive (for \
indexed groups)).\"", 14, StripOnInput -> False],
                    LabelStyle->"TextStyling"],
                    Annotation[#, 
                    Style[
                    "CommutativeQ[S] returns True if the structure S is \
commutative, and False otherwise. When S is a group, this is identical to \
AbelianQ[S]. When used with rings, one has the Operation option, which can \
take on the values Addition, Multiplication or Both. Available option: Mode \
(possible values: Computational, Textual, Visual, All, and Interactive (for \
indexed groups)).", 14], "Tooltip"]& ]},
                  {
                   TagBox[
                    TooltipBox[
                    ButtonBox[
                    RowBox[{
                    "DistributiveQ", "[", "\[SelectionPlaceholder]", "]"}],
                    BaseStyle->"Paste"],
                    StyleBox[
                    "\"DistributiveQ[R] returns True if the Multiplication is \
(two-sided) distributive over the Addition in the structure R, and False \
otherwise.\"", 14, StripOnInput -> False],
                    LabelStyle->"TextStyling"],
                    Annotation[#, 
                    Style[
                    "DistributiveQ[R] returns True if the Multiplication is \
(two-sided) distributive over the Addition in the structure R, and False \
otherwise.", 14], "Tooltip"]& ]},
                  {
                   TagBox[
                    TooltipBox[
                    ButtonBox[
                    RowBox[{"FieldQ", "[", "\[SelectionPlaceholder]", "]"}],
                    BaseStyle->"Paste"],
                    StyleBox[
                    "\"FieldQ[R] returns True if the Ringoid R is a field, \
and False otherwise.\"", 14, StripOnInput -> False],
                    LabelStyle->"TextStyling"],
                    Annotation[#, 
                    Style[
                    "FieldQ[R] returns True if the Ringoid R is a field, and \
False otherwise.", 14], "Tooltip"]& ]},
                  {
                   TagBox[
                    TooltipBox[
                    ButtonBox[
                    RowBox[{"FormRingoid", "[", 
                    RowBox[{
                    "\[SelectionPlaceholder]", ",", "\[Placeholder]", ",", 
                    "\[Placeholder]"}], "]"}],
                    BaseStyle->"Paste"],
                    StyleBox[
                    "\"FormRingoid[list, addition, multiplication, {plussym, \
multsymb}, opts] is the basic command for forming a Ringoid consisting of the \
list of elements found in list governed by the operations addition and \
multiplication. The symbol plussym defaults to + and the multsymb defaults to \
*, if not specified. The options for opts can be WideElements, IsARing, \
RingoidDescription, RingoidName, FormatOperator, FormatElements, \
MaxElementsToList, KeyForm, and CayleyForm. See each one for more \
information. Alternatively, FormRingoid[AG, MG, opts] forms the Ringoid using \
the Groupoid AG for the additive part and the Groupoid MG for the \
multiplicative part (assuming the same elements are used).\\n\\n This \
function, rather than just wrapping Ringoid around a list and the operations, \
is strongly recommended.\"", 14, StripOnInput -> False],
                    LabelStyle->"TextStyling"],
                    Annotation[#, 
                    Style[
                    "FormRingoid[list, addition, multiplication, {plussym, \
multsymb}, opts] is the basic command for forming a Ringoid consisting of the \
list of elements found in list governed by the operations addition and \
multiplication. The symbol plussym defaults to + and the multsymb defaults to \
*, if not specified. The options for opts can be WideElements, IsARing, \
RingoidDescription, RingoidName, FormatOperator, FormatElements, \
MaxElementsToList, KeyForm, and CayleyForm. See each one for more \
information. Alternatively, FormRingoid[AG, MG, opts] forms the Ringoid using \
the Groupoid AG for the additive part and the Groupoid MG for the \
multiplicative part (assuming the same elements are used).\n\n This function, \
rather than just wrapping Ringoid around a list and the operations, is \
strongly recommended.", 14], "Tooltip"]& ]},
                  {
                   TagBox[
                    TooltipBox[
                    ButtonBox[
                    RowBox[{"IdealQ", "[", 
                    RowBox[{
                    "\[SelectionPlaceholder]", ",", "\[Placeholder]"}], "]"}],
                    
                    BaseStyle->"Paste"],
                    StyleBox[
                    "\"IdealQ[S, R] returns True if the set S is an ideal of \
the structure R, and False otherwise.\"", 14, StripOnInput -> False],
                    LabelStyle->"TextStyling"],
                    Annotation[#, 
                    Style[
                    "IdealQ[S, R] returns True if the set S is an ideal of \
the structure R, and False otherwise.", 14], "Tooltip"]& ]},
                  {
                   TagBox[
                    TooltipBox[
                    ButtonBox[
                    RowBox[{"IdempotentQ", "[", 
                    RowBox[{
                    "\[SelectionPlaceholder]", ",", "\[Placeholder]"}], "]"}],
                    
                    BaseStyle->"Paste"],
                    StyleBox[
                    "\"IdempotentQ[R, r] returns True if r is an idempotent \
in the structure R, and False otherwise.\"", 14, StripOnInput -> False],
                    LabelStyle->"TextStyling"],
                    Annotation[#, 
                    Style[
                    "IdempotentQ[R, r] returns True if r is an idempotent in \
the structure R, and False otherwise.", 14], "Tooltip"]& ]},
                  {
                   TagBox[
                    TooltipBox[
                    ButtonBox[
                    RowBox[{
                    "Idempotents", "[", "\[SelectionPlaceholder]", "]"}],
                    BaseStyle->"Paste"],
                    StyleBox[
                    "\"Idempotents[R] returns all the idempotent elements in \
the structure R.\"", 14, StripOnInput -> False],
                    LabelStyle->"TextStyling"],
                    Annotation[#, 
                    Style[
                    "Idempotents[R] returns all the idempotent elements in \
the structure R.", 14], "Tooltip"]& ]},
                  {
                   TagBox[
                    TooltipBox[
                    ButtonBox[
                    RowBox[{
                    "IntegralDomainQ", "[", "\[SelectionPlaceholder]", "]"}],
                    BaseStyle->"Paste"],
                    StyleBox[
                    "\"IntegralDomainQ[R] returns True if the structure R is \
an integral domain, and False otherwise.\"", 14, StripOnInput -> False],
                    LabelStyle->"TextStyling"],
                    Annotation[#, 
                    Style[
                    "IntegralDomainQ[R] returns True if the structure R is an \
integral domain, and False otherwise.", 14], "Tooltip"]& ]},
                  {
                   TagBox[
                    TooltipBox[
                    ButtonBox[
                    RowBox[{"InvertibleQ", "[", 
                    RowBox[{
                    "\[SelectionPlaceholder]", ",", "\[Placeholder]"}], "]"}],
                    
                    BaseStyle->"Paste"],
                    StyleBox[
                    "\"InvertibleQ[S, g] returns True if the (two-sided) \
inverse of g in the structure S exists, and False otherwise. When used with \
rings,  the Operation option can be used, which can have the value Addition, \
Multiplication or Both. Available option: Mode (possible values: \
Computational, Textual, Visual, All, and Interactive (on group elements)).\"",
                     14, StripOnInput -> False],
                    LabelStyle->"TextStyling"],
                    Annotation[#, 
                    Style[
                    "InvertibleQ[S, g] returns True if the (two-sided) \
inverse of g in the structure S exists, and False otherwise. When used with \
rings,  the Operation option can be used, which can have the value Addition, \
Multiplication or Both. Available option: Mode (possible values: \
Computational, Textual, Visual, All, and Interactive (on group elements)).", 
                    14], "Tooltip"]& ]},
                  {
                   TagBox[
                    TooltipBox[
                    ButtonBox[
                    RowBox[{
                    "MultiplicativeGroupoid", "[", "\[SelectionPlaceholder]", 
                    "]"}],
                    BaseStyle->"Paste"],
                    StyleBox[
                    "\"MultiplicativeGroupoid[R] returns the multiplicative \
Groupoid of the ring R. A shortcut is MGroupoid[R].\"", 14, StripOnInput -> 
                    False],
                    LabelStyle->"TextStyling"],
                    Annotation[#, 
                    Style[
                    "MultiplicativeGroupoid[R] returns the multiplicative \
Groupoid of the ring R. A shortcut is MGroupoid[R].", 14], "Tooltip"]& ]},
                  {
                   TagBox[
                    TooltipBox[
                    ButtonBox[
                    RowBox[{"MultiplicativeInverse", "[", 
                    RowBox[{
                    "\[SelectionPlaceholder]", ",", "\[Placeholder]"}], "]"}],
                    
                    BaseStyle->"Paste"],
                    StyleBox[
                    "\"MultiplicativeInverse[R, a] returns the multiplicative \
inverse of a in the structure R, if it exists, and $Failed otherwise.\"", 14, 
                    StripOnInput -> False],
                    LabelStyle->"TextStyling"],
                    Annotation[#, 
                    Style[
                    "MultiplicativeInverse[R, a] returns the multiplicative \
inverse of a in the structure R, if it exists, and $Failed otherwise.", 14], 
                    "Tooltip"]& ]},
                  {
                   TagBox[
                    TooltipBox[
                    ButtonBox[
                    RowBox[{"NegationOf", "[", 
                    RowBox[{
                    "\[SelectionPlaceholder]", ",", "\[Placeholder]"}], "]"}],
                    
                    BaseStyle->"Paste"],
                    StyleBox[
                    "\"NegationOf[R, r] returns the additive inverse of r in \
the structure R, if it exists, and $Failed otherwise.\"", 14, StripOnInput -> 
                    False],
                    LabelStyle->"TextStyling"],
                    Annotation[#, 
                    Style[
                    "NegationOf[R, r] returns the additive inverse of r in \
the structure R, if it exists, and $Failed otherwise.", 14], "Tooltip"]& ]},
                  {
                   TagBox[
                    TooltipBox[
                    ButtonBox[
                    RowBox[{"QuotientRing", "[", 
                    RowBox[{
                    "\[SelectionPlaceholder]", ",", "\[Placeholder]"}], "]"}],
                    
                    BaseStyle->"Paste"],
                    StyleBox[
                    "\"QuotientRing[R, S] returns the quotient ring formed by \
the ring R and the ideal S. Options for this function are Form and \
Representatives. Form can have the value Cosets (default) which returns the \
elements in coset form g + NS or g NS where NS is a symbol representing the \
Ideal (normal subgroup). Alternatively, one can use Form \[Rule] \
Representatives and then only the representatives of the cosets will be \
returned. The default list of representatives uses the 'smallest' element in \
the coset and is indicated by Representatives \[Rule] Canonical; if you wish \
to change this list, use Representatives \[Rule] list, where list is a list \
of one element from each coset. This can be used also if one has Form \[Rule] \
Cosets. By default, left cosets are used. For a polynomial p over the base \
ring R, QuotientRing[R, p] returns the Ringoid of polynomials mod p, if R is \
a Ringoid with unity and the leading coefficient of p is a unit of R. \
QuotientRing[Z[I], z] returns the quotient ring Z[I]/<z> for a Gaussian \
integer z; this has a Visual mode. WARNING: This function may use a lot of \
memory if R is large and/or the degree of p is large. (Note: A portion of the \
code that creates the Visual mode of QuotientRing[Z[I], z] utilize several \
functions in Stan Wagon's 'Mathematica in Action' book, pages 334, 335 (in \
the first edition from Freeman).)\"", 14, StripOnInput -> False],
                    LabelStyle->"TextStyling"],
                    Annotation[#, 
                    Style[
                    "QuotientRing[R, S] returns the quotient ring formed by \
the ring R and the ideal S. Options for this function are Form and \
Representatives. Form can have the value Cosets (default) which returns the \
elements in coset form g + NS or g NS where NS is a symbol representing the \
Ideal (normal subgroup). Alternatively, one can use Form \[Rule] \
Representatives and then only the representatives of the cosets will be \
returned. The default list of representatives uses the 'smallest' element in \
the coset and is indicated by Representatives \[Rule] Canonical; if you wish \
to change this list, use Representatives \[Rule] list, where list is a list \
of one element from each coset. This can be used also if one has Form \[Rule] \
Cosets. By default, left cosets are used. For a polynomial p over the base \
ring R, QuotientRing[R, p] returns the Ringoid of polynomials mod p, if R is \
a Ringoid with unity and the leading coefficient of p is a unit of R. \
QuotientRing[Z[I], z] returns the quotient ring Z[I]/<z> for a Gaussian \
integer z; this has a Visual mode. WARNING: This function may use a lot of \
memory if R is large and/or the degree of p is large. (Note: A portion of the \
code that creates the Visual mode of QuotientRing[Z[I], z] utilize several \
functions in Stan Wagon's 'Mathematica in Action' book, pages 334, 335 (in \
the first edition from Freeman).)", 14], "Tooltip"]& ]},
                  {
                   TagBox[
                    TooltipBox[
                    ButtonBox[
                    RowBox[{"RingInfo", "[", "\[SelectionPlaceholder]", "]"}],
                    
                    BaseStyle->"Paste"],
                    StyleBox[
                    "\"RingInfo[R] returns a list of information obtained \
about the Ringoid R which has been gathered by calling various functions.\"", 
                    14, StripOnInput -> False],
                    LabelStyle->"TextStyling"],
                    Annotation[#, 
                    Style[
                    "RingInfo[R] returns a list of information obtained about \
the Ringoid R which has been gathered by calling various functions.", 14], 
                    "Tooltip"]& ]},
                  {
                   TagBox[
                    TooltipBox[
                    ButtonBox[
                    RowBox[{"SubringQ", "[", 
                    RowBox[{
                    "\[SelectionPlaceholder]", ",", "\[Placeholder]"}], "]"}],
                    
                    BaseStyle->"Paste"],
                    StyleBox[
                    "\"SubringQ[S, R] returns True if S is a subring of R, \
and False otherwise. (This function tests whether S is nonempty and closed \
with respect to difference and multiplication in R.)\"", 14, StripOnInput -> 
                    False],
                    LabelStyle->"TextStyling"],
                    Annotation[#, 
                    Style[
                    "SubringQ[S, R] returns True if S is a subring of R, and \
False otherwise. (This function tests whether S is nonempty and closed with \
respect to difference and multiplication in R.)", 14], "Tooltip"]& ]},
                  {
                   TagBox[
                    TooltipBox[
                    ButtonBox[
                    RowBox[{"UnitQ", "[", 
                    RowBox[{
                    "\[SelectionPlaceholder]", ",", "\[Placeholder]"}], "]"}],
                    
                    BaseStyle->"Paste"],
                    StyleBox[
                    "\"UnitQ[R, r] returns True if r is a unit in the \
structure R, and False otherwise.\"", 14, StripOnInput -> False],
                    LabelStyle->"TextStyling"],
                    Annotation[#, 
                    Style[
                    "UnitQ[R, r] returns True if r is a unit in the structure \
R, and False otherwise.", 14], "Tooltip"]& ]},
                  {
                   TagBox[
                    TooltipBox[
                    ButtonBox[
                    RowBox[{"Units", "[", "\[SelectionPlaceholder]", "]"}],
                    BaseStyle->"Paste"],
                    StyleBox[
                    "\"Units[R] returns the list of units of the structure R.\
\"", 14, StripOnInput -> False],
                    LabelStyle->"TextStyling"],
                    Annotation[#, 
                    Style[
                    "Units[R] returns the list of units of the structure R.", 
                    14], "Tooltip"]& ]},
                  {
                   TagBox[
                    TooltipBox[
                    ButtonBox[
                    RowBox[{
                    "WithUnityQ", "[", "\[SelectionPlaceholder]", "]"}],
                    BaseStyle->"Paste"],
                    StyleBox[
                    "\"WithUnityQ[R] returns True if the structure R has a \
unity, and False otherwise.\"", 14, StripOnInput -> False],
                    LabelStyle->"TextStyling"],
                    Annotation[#, 
                    Style[
                    "WithUnityQ[R] returns True if the structure R has a \
unity, and False otherwise.", 14], "Tooltip"]& ]},
                  {
                   TagBox[
                    TooltipBox[
                    ButtonBox[
                    RowBox[{
                    "ZeroDivisors", "[", "\[SelectionPlaceholder]", "]"}],
                    BaseStyle->"Paste"],
                    StyleBox[
                    
                    "\"ZeroDivisors[R] returns a list of all the zero \
divisors in the structure R. If R does not have a zero (HasZeroQ[R] == \
False), a message is returned. This calculation is based on the definition \
that if nonzero r and nonzero s have the product Zero[R], then r and s are \
both zero divisors.\"", 14, StripOnInput -> False],
                    LabelStyle->"TextStyling"],
                    Annotation[#, 
                    Style[
                    "ZeroDivisors[R] returns a list of all the zero divisors \
in the structure R. If R does not have a zero (HasZeroQ[R] == False), a \
message is returned. This calculation is based on the definition that if \
nonzero r and nonzero s have the product Zero[R], then r and s are both zero \
divisors.", 14], "Tooltip"]& ]}
                 },
                 GridBoxAlignment->{"Columns" -> {{Left}}},
                 
                 GridBoxItemSize->{
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
                "Column"],
               ImageMargins->0]}
            },
            AutoDelete->False,
            BaselinePosition->{1, 1},
            GridBoxAlignment->{"Columns" -> {{Left}}},
            GridBoxBackground->{"Columns" -> {{Automatic}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
            GridBoxSpacings->{"Columns" -> {{0.2}}, "Rows" -> {{0.5}}}]}, 
           Dynamic[Typeset`var$$],
           Alignment->Automatic,
           BaselinePosition->Baseline,
           DefaultBaseStyle->"OpenerView",
           ImageMargins->0,
           ImageSize->Automatic],
          Deployed->False,
          StripOnInput->False],
         OpenerView[{
           Tooltip[
           "Ring functions", 
            "List of ring functions available -- You may wish to use \
SwitchStructureTo[Ring]"], 
           Column[{
             Tooltip[
              PasteButton[
               Defer[
                
                AbstractAlgebra`Master`AdditiveGroupoid[$CellContext` \
\[SelectionPlaceholder]]]], 
              Style[
              "AdditiveGroupoid[R] returns the additive Groupoid of the ring \
R. A shortcut is AGroupoid[R].", 14]], 
             Tooltip[
              PasteButton[
               Defer[
                
                AbstractAlgebra`Master`Characteristic[$CellContext` \
\[SelectionPlaceholder]]]], 
              Style[
              "Characteristic[R] returns the characteristic of the structure \
R.", 14]], 
             Tooltip[
              PasteButton[
               Defer[
                
                AbstractAlgebra`Master`CommutativeQ[$CellContext` \
\[SelectionPlaceholder]]]], 
              Style[
              "CommutativeQ[S] returns True if the structure S is \
commutative, and False otherwise. When S is a group, this is identical to \
AbelianQ[S]. When used with rings, one has the Operation option, which can \
take on the values Addition, Multiplication or Both. Available option: Mode \
(possible values: Computational, Textual, Visual, All, and Interactive (for \
indexed groups)).", 14]], 
             Tooltip[
              PasteButton[
               Defer[
                
                AbstractAlgebra`Master`DistributiveQ[$CellContext` \
\[SelectionPlaceholder]]]], 
              Style[
              "DistributiveQ[R] returns True if the Multiplication is \
(two-sided) distributive over the Addition in the structure R, and False \
otherwise.", 14]], 
             Tooltip[
              PasteButton[
               Defer[
                
                AbstractAlgebra`Master`FieldQ[$CellContext` \
\[SelectionPlaceholder]]]], 
              Style[
              "FieldQ[R] returns True if the Ringoid R is a field, and False \
otherwise.", 14]], 
             Tooltip[
              PasteButton[
               Defer[
                
                AbstractAlgebra`Master`FormRingoid[$CellContext` \
\[SelectionPlaceholder], $CellContext` \[Placeholder], $CellContext` \
\[Placeholder]]]], 
              Style[
              "FormRingoid[list, addition, multiplication, {plussym, \
multsymb}, opts] is the basic command for forming a Ringoid consisting of the \
list of elements found in list governed by the operations addition and \
multiplication. The symbol plussym defaults to + and the multsymb defaults to \
*, if not specified. The options for opts can be WideElements, IsARing, \
RingoidDescription, RingoidName, FormatOperator, FormatElements, \
MaxElementsToList, KeyForm, and CayleyForm. See each one for more \
information. Alternatively, FormRingoid[AG, MG, opts] forms the Ringoid using \
the Groupoid AG for the additive part and the Groupoid MG for the \
multiplicative part (assuming the same elements are used).\n\n This function, \
rather than just wrapping Ringoid around a list and the operations, is \
strongly recommended.", 14]], 
             Tooltip[
              PasteButton[
               Defer[
                
                AbstractAlgebra`Master`IdealQ[$CellContext` \
\[SelectionPlaceholder], $CellContext` \[Placeholder]]]], 
              Style[
              "IdealQ[S, R] returns True if the set S is an ideal of the \
structure R, and False otherwise.", 14]], 
             Tooltip[
              PasteButton[
               Defer[
                
                AbstractAlgebra`Master`IdempotentQ[$CellContext` \
\[SelectionPlaceholder], $CellContext` \[Placeholder]]]], 
              Style[
              "IdempotentQ[R, r] returns True if r is an idempotent in the \
structure R, and False otherwise.", 14]], 
             Tooltip[
              PasteButton[
               Defer[
                
                AbstractAlgebra`Master`Idempotents[$CellContext` \
\[SelectionPlaceholder]]]], 
              Style[
              "Idempotents[R] returns all the idempotent elements in the \
structure R.", 14]], 
             Tooltip[
              PasteButton[
               Defer[
                
                AbstractAlgebra`Master`IntegralDomainQ[$CellContext` \
\[SelectionPlaceholder]]]], 
              Style[
              "IntegralDomainQ[R] returns True if the structure R is an \
integral domain, and False otherwise.", 14]], 
             Tooltip[
              PasteButton[
               Defer[
                
                AbstractAlgebra`Master`InvertibleQ[$CellContext` \
\[SelectionPlaceholder], $CellContext` \[Placeholder]]]], 
              Style[
              "InvertibleQ[S, g] returns True if the (two-sided) inverse of g \
in the structure S exists, and False otherwise. When used with rings,  the \
Operation option can be used, which can have the value Addition, \
Multiplication or Both. Available option: Mode (possible values: \
Computational, Textual, Visual, All, and Interactive (on group elements)).", 
               14]], 
             Tooltip[
              PasteButton[
               Defer[
                
                AbstractAlgebra`Master`MultiplicativeGroupoid[$CellContext` \
\[SelectionPlaceholder]]]], 
              Style[
              "MultiplicativeGroupoid[R] returns the multiplicative Groupoid \
of the ring R. A shortcut is MGroupoid[R].", 14]], 
             Tooltip[
              PasteButton[
               Defer[
                
                AbstractAlgebra`Master`MultiplicativeInverse[$CellContext` \
\[SelectionPlaceholder], $CellContext` \[Placeholder]]]], 
              Style[
              "MultiplicativeInverse[R, a] returns the multiplicative inverse \
of a in the structure R, if it exists, and $Failed otherwise.", 14]], 
             Tooltip[
              PasteButton[
               Defer[
                
                AbstractAlgebra`Master`NegationOf[$CellContext` \
\[SelectionPlaceholder], $CellContext` \[Placeholder]]]], 
              Style[
              "NegationOf[R, r] returns the additive inverse of r in the \
structure R, if it exists, and $Failed otherwise.", 14]], 
             Tooltip[
              PasteButton[
               Defer[
                
                AbstractAlgebra`Master`QuotientRing[$CellContext` \
\[SelectionPlaceholder], $CellContext` \[Placeholder]]]], 
              Style[
              "QuotientRing[R, S] returns the quotient ring formed by the \
ring R and the ideal S. Options for this function are Form and \
Representatives. Form can have the value Cosets (default) which returns the \
elements in coset form g + NS or g NS where NS is a symbol representing the \
Ideal (normal subgroup). Alternatively, one can use Form \[Rule] \
Representatives and then only the representatives of the cosets will be \
returned. The default list of representatives uses the 'smallest' element in \
the coset and is indicated by Representatives \[Rule] Canonical; if you wish \
to change this list, use Representatives \[Rule] list, where list is a list \
of one element from each coset. This can be used also if one has Form \[Rule] \
Cosets. By default, left cosets are used. For a polynomial p over the base \
ring R, QuotientRing[R, p] returns the Ringoid of polynomials mod p, if R is \
a Ringoid with unity and the leading coefficient of p is a unit of R. \
QuotientRing[Z[I], z] returns the quotient ring Z[I]/<z> for a Gaussian \
integer z; this has a Visual mode. WARNING: This function may use a lot of \
memory if R is large and/or the degree of p is large. (Note: A portion of the \
code that creates the Visual mode of QuotientRing[Z[I], z] utilize several \
functions in Stan Wagon's 'Mathematica in Action' book, pages 334, 335 (in \
the first edition from Freeman).)", 14]], 
             Tooltip[
              PasteButton[
               Defer[
                
                AbstractAlgebra`Master`RingInfo[$CellContext` \
\[SelectionPlaceholder]]]], 
              Style[
              "RingInfo[R] returns a list of information obtained about the \
Ringoid R which has been gathered by calling various functions.", 14]], 
             Tooltip[
              PasteButton[
               Defer[
                
                AbstractAlgebra`Master`SubringQ[$CellContext` \
\[SelectionPlaceholder], $CellContext` \[Placeholder]]]], 
              Style[
              "SubringQ[S, R] returns True if S is a subring of R, and False \
otherwise. (This function tests whether S is nonempty and closed with respect \
to difference and multiplication in R.)", 14]], 
             Tooltip[
              PasteButton[
               Defer[
                
                AbstractAlgebra`Master`UnitQ[$CellContext` \
\[SelectionPlaceholder], $CellContext` \[Placeholder]]]], 
              Style[
              "UnitQ[R, r] returns True if r is a unit in the structure R, \
and False otherwise.", 14]], 
             Tooltip[
              PasteButton[
               Defer[
                
                AbstractAlgebra`Master`Units[$CellContext` \
\[SelectionPlaceholder]]]], 
              Style[
              "Units[R] returns the list of units of the structure R.", 14]], 
             
             Tooltip[
              PasteButton[
               Defer[
                
                AbstractAlgebra`Master`WithUnityQ[$CellContext` \
\[SelectionPlaceholder]]]], 
              Style[
              "WithUnityQ[R] returns True if the structure R has a unity, and \
False otherwise.", 14]], 
             Tooltip[
              PasteButton[
               Defer[
                
                AbstractAlgebra`Master`ZeroDivisors[$CellContext` \
\[SelectionPlaceholder]]]], 
              Style[
              "ZeroDivisors[R] returns a list of all the zero divisors in the \
structure R. If R does not have a zero (HasZeroQ[R] == False), a message is \
returned. This calculation is based on the definition that if nonzero r and \
nonzero s have the product Zero[R], then r and s are both zero divisors.", 
               14]]}]}, False]],
        DynamicModuleValues:>{}],
       Setting[#, {0}]& ]},
     {
      TagBox[
       DynamicModuleBox[{Typeset`var$$ = False}, 
        InterpretationBox[
         StyleBox[
          PaneSelectorBox[{False->GridBox[{
             {
              OpenerBox[Dynamic[Typeset`var$$],
               Appearance->Automatic,
               AutoAction->False,
               ContinuousAction->False,
               Enabled->Automatic], 
              TagBox[
               TooltipBox["\<\"Polynomial functions\"\>",
                
                "\"List of polynomial functions available -- You may wish to \
use SwitchStructureTo[Ring]\"",
                LabelStyle->"TextStyling"],
               
               Annotation[#, 
                "List of polynomial functions available -- You may wish to \
use SwitchStructureTo[Ring]", "Tooltip"]& ]}
            },
            AutoDelete->False,
            BaselinePosition->{1, 1},
            GridBoxAlignment->{"Columns" -> {{Left}}},
            GridBoxBackground->{"Columns" -> {{Automatic}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
            GridBoxSpacings->{"Columns" -> {{0.2}}, "Rows" -> {{0.5}}}], True->
           GridBox[{
             {
              OpenerBox[Dynamic[Typeset`var$$],
               Appearance->Automatic,
               AutoAction->False,
               ContinuousAction->False,
               Enabled->Automatic], 
              TagBox[
               TooltipBox["\<\"Polynomial functions\"\>",
                
                "\"List of polynomial functions available -- You may wish to \
use SwitchStructureTo[Ring]\"",
                LabelStyle->"TextStyling"],
               
               Annotation[#, 
                "List of polynomial functions available -- You may wish to \
use SwitchStructureTo[Ring]", "Tooltip"]& ]},
             {"", 
              PaneBox[
               TagBox[GridBox[{
                  {
                   TagBox[
                    TooltipBox[
                    ButtonBox[
                    RowBox[{
                    "EisensteinsCriterionQ", "[", "\[SelectionPlaceholder]", 
                    "]"}],
                    BaseStyle->"Paste"],
                    StyleBox[
                    "\"EisensteinsCriterionQ[zpoly] returns True if \
Eisenstein's Criterion indicates that the polynomial zpoly, with coefficients \
from the integers, is irreducible, and False otherwise. The Textual mode is \
available.\"", 14, StripOnInput -> False],
                    LabelStyle->"TextStyling"],
                    Annotation[#, 
                    Style[
                    "EisensteinsCriterionQ[zpoly] returns True if \
Eisenstein's Criterion indicates that the polynomial zpoly, with coefficients \
from the integers, is irreducible, and False otherwise. The Textual mode is \
available.", 14], "Tooltip"]& ]},
                  {
                   TagBox[
                    TooltipBox[
                    ButtonBox[
                    RowBox[{"ModpIrreducibilityQ", "[", 
                    RowBox[{
                    "\[SelectionPlaceholder]", ",", "\[Placeholder]"}], "]"}],
                    
                    BaseStyle->"Paste"],
                    StyleBox[
                    "\"ModpIrreducibilityQ[zpoly] returns True if the Mod p \
Irreducibility Test indicates that the polynomial zpoly, with coefficients \
from the integers, is irreducible, and False otherwise. (This method tries \
the first 25 primes.) The Textual mode is available. ModpIrreducibilityQ[p, \
zpoly] tests the polynomial zpoly specifically with the prime p.\"", 14, 
                    StripOnInput -> False],
                    LabelStyle->"TextStyling"],
                    Annotation[#, 
                    Style[
                    "ModpIrreducibilityQ[zpoly] returns True if the Mod p \
Irreducibility Test indicates that the polynomial zpoly, with coefficients \
from the integers, is irreducible, and False otherwise. (This method tries \
the first 25 primes.) The Textual mode is available. ModpIrreducibilityQ[p, \
zpoly] tests the polynomial zpoly specifically with the prime p.", 14], 
                    "Tooltip"]& ]},
                  {
                   TagBox[
                    TooltipBox[
                    ButtonBox[
                    RowBox[{"Poly", "[", 
                    RowBox[{
                    "\[SelectionPlaceholder]", ",", "\[Placeholder]"}], "]"}],
                    
                    BaseStyle->"Paste"],
                    StyleBox[
                    
                    "\"Poly[R, expr, opts] creates the polynomial over the \
Ringoid R given by expr and using the options given by opts. A polynomial \
such as 2 + 3x + x^3 (over some ring R) can be constructed by Poly[R, 2 + 3x \
+ x^3], which, by default, would return 2 + 3x + x^3. The form x^3 + 3x + 2 \
could be returned by entering Poly[R, 2 + 3x + x^3, PowersIncrease \[Rule] \
RightToLeft], or by changing this option globally. One can also specify a \
polynomial by just using the coefficients. Thus, Poly[R, 1, 0, 3, 2] returns \
1 + 3x^2 + 2x^3, while Poly[R, 1, 0, 3, 2, PowersIncrease \[Rule] \
RightToLeft] returns x^3 + 3x + 2. When entering just the coefficients, the \
default indeterminate is 'x', but this can be changed by using the option \
Indeterminate \[Rule] var, where var is any (undefined) symbol. \
FlexibleEntering, an option taking either True or False (defaulting to True), \
can be used if one wishes to enter polynomials allowing subtraction of terms \
or allowing entering the negation of an element by using -r. It also allows \
all coefficients of the polynomial to be reduced mod n if the base ring is \
Z[n]. If RP is a ring of polynomials, Poly[RP, expr, opts] works in a similar \
fashion.\"", 14, StripOnInput -> False],
                    LabelStyle->"TextStyling"],
                    Annotation[#, 
                    Style[
                    "Poly[R, expr, opts] creates the polynomial over the \
Ringoid R given by expr and using the options given by opts. A polynomial \
such as 2 + 3x + x^3 (over some ring R) can be constructed by Poly[R, 2 + 3x \
+ x^3], which, by default, would return 2 + 3x + x^3. The form x^3 + 3x + 2 \
could be returned by entering Poly[R, 2 + 3x + x^3, PowersIncrease \[Rule] \
RightToLeft], or by changing this option globally. One can also specify a \
polynomial by just using the coefficients. Thus, Poly[R, 1, 0, 3, 2] returns \
1 + 3x^2 + 2x^3, while Poly[R, 1, 0, 3, 2, PowersIncrease \[Rule] \
RightToLeft] returns x^3 + 3x + 2. When entering just the coefficients, the \
default indeterminate is 'x', but this can be changed by using the option \
Indeterminate \[Rule] var, where var is any (undefined) symbol. \
FlexibleEntering, an option taking either True or False (defaulting to True), \
can be used if one wishes to enter polynomials allowing subtraction of terms \
or allowing entering the negation of an element by using -r. It also allows \
all coefficients of the polynomial to be reduced mod n if the base ring is \
Z[n]. If RP is a ring of polynomials, Poly[RP, expr, opts] works in a similar \
fashion.", 14], "Tooltip"]& ]},
                  {
                   TagBox[
                    TooltipBox[
                    ButtonBox[
                    RowBox[{"PolynomialEvaluation", "[", 
                    RowBox[{
                    "\[SelectionPlaceholder]", ",", "\[Placeholder]"}], "]"}],
                    
                    BaseStyle->"Paste"],
                    StyleBox[
                    "\"PolynomialEvaluation[PolynomialsOver[R], p, alpha] \
evaluates the polynomial p at alpha using the operations of the Ringoid R. \
PolynomialEvaluation[p, alpha] works similarly.\"", 14, StripOnInput -> False],
                    LabelStyle->"TextStyling"],
                    Annotation[#, 
                    Style[
                    "PolynomialEvaluation[PolynomialsOver[R], p, alpha] \
evaluates the polynomial p at alpha using the operations of the Ringoid R. \
PolynomialEvaluation[p, alpha] works similarly.", 14], "Tooltip"]& ]},
                  {
                   TagBox[
                    TooltipBox[
                    ButtonBox[
                    RowBox[{"PolynomialsOfDegreeN", "[", 
                    RowBox[{
                    "\[SelectionPlaceholder]", ",", "\[Placeholder]"}], "]"}],
                    
                    BaseStyle->"Paste"],
                    StyleBox[
                    "\"PolynomialsOfDegreeN[R, n, opts] returns all \
polynomials of degree n over the ring R. Since this number can increase \
rather quickly, the option SizeLimit provides a maximum for the number of \
polynomials that will be produced. The default value is 125, but this can be \
changed using the option. Unless Indeterminate \[Rule] symbol is set, the \
default indeterminate is 'x'. A related function is \
PolynomialsUpToDegreeN.\"", 14, StripOnInput -> False],
                    LabelStyle->"TextStyling"],
                    Annotation[#, 
                    Style[
                    "PolynomialsOfDegreeN[R, n, opts] returns all polynomials \
of degree n over the ring R. Since this number can increase rather quickly, \
the option SizeLimit provides a maximum for the number of polynomials that \
will be produced. The default value is 125, but this can be changed using the \
option. Unless Indeterminate \[Rule] symbol is set, the default indeterminate \
is 'x'. A related function is PolynomialsUpToDegreeN.", 14], "Tooltip"]& ]},
                  {
                   TagBox[
                    TooltipBox[
                    ButtonBox[
                    RowBox[{"PolynomialsUpToDegreeN", "[", 
                    RowBox[{
                    "\[SelectionPlaceholder]", ",", "\[Placeholder]"}], "]"}],
                    
                    BaseStyle->"Paste"],
                    StyleBox[
                    "\"PolynomialsUpToDegreeN[R, n, opts] returns all \
polynomials of degree n or less over the ring R. Since this number can \
increase rather quickly, the option SizeLimit provides a maximum for the \
number of polynomials that will be produced. The default value is 125, but \
this can be changed using the option. Unless Indeterminate \[Rule] symbol is \
set, the default indeterminate is 'x'. A related function is \
PolynomialsOfDegreeN.\"", 14, StripOnInput -> False],
                    LabelStyle->"TextStyling"],
                    Annotation[#, 
                    Style[
                    "PolynomialsUpToDegreeN[R, n, opts] returns all \
polynomials of degree n or less over the ring R. Since this number can \
increase rather quickly, the option SizeLimit provides a maximum for the \
number of polynomials that will be produced. The default value is 125, but \
this can be changed using the option. Unless Indeterminate \[Rule] symbol is \
set, the default indeterminate is 'x'. A related function is \
PolynomialsOfDegreeN.", 14], "Tooltip"]& ]},
                  {
                   TagBox[
                    TooltipBox[
                    ButtonBox[
                    RowBox[{
                    "RationalRootCandidates", "[", "\[SelectionPlaceholder]", 
                    "]"}],
                    BaseStyle->"Paste"],
                    StyleBox[
                    "\"Ration alRootCandidates[poly] returns a list of \
candidates for the Rational Root Theorem, given the polynomial poly.\"", 14, 
                    StripOnInput -> False],
                    LabelStyle->"TextStyling"],
                    Annotation[#, 
                    Style[
                    "Ration alRootCandidates[poly] returns a list of \
candidates for the Rational Root Theorem, given the polynomial poly.", 14], 
                    "Tooltip"]& ]},
                  {
                   TagBox[
                    TooltipBox[
                    ButtonBox[
                    RowBox[{
                    "RationalRootTheorem", "[", "\[SelectionPlaceholder]", 
                    "]"}],
                    BaseStyle->"Paste"],
                    StyleBox[
                    "\"RationalRootTheorem[poly] returns a list of two lists, \
given a polynomial poly. The first list consists of those rational candidates \
which are zeros for poly, while the second list consists of those rational \
candidates which are not zeros for poly.\"", 14, StripOnInput -> False],
                    LabelStyle->"TextStyling"],
                    Annotation[#, 
                    Style[
                    "RationalRootTheorem[poly] returns a list of two lists, \
given a polynomial poly. The first list consists of those rational candidates \
which are zeros for poly, while the second list consists of those rational \
candidates which are not zeros for poly.", 14], "Tooltip"]& ]},
                  {
                   TagBox[
                    TooltipBox[
                    ButtonBox[
                    RowBox[{"Solve", "[", 
                    RowBox[{
                    "\[SelectionPlaceholder]", "\[Equal]", "\[Placeholder]"}],
                     "]"}],
                    BaseStyle->"Paste"],
                    StyleBox[
                    "\"Solve[PolynomialsOver[R], poly == r], when given a \
polynomial poly from the ring of polynomials over the Ringoid R and an \
element r from R, solves the equation poly == r in the indeterminate x. \
(Solve[poly == r] can also be used, with the underlying ring extracted from \
poly.) Solutions are returned as a list of rules (as per normal usage). These \
solutions can be used with ReplaceAll (or its equivalent, /.) just as the \
results of the ordinary (built-in) Solve, whose functionality still works: \
\\nSolve[eqns, vars] attempts to solve an equation or set of equations for \
the variables vars. Any variable in eqns but not vars is regarded as a \
parameter. Solve[eqns] treats all variables encountered as vars above. \
Solve[eqns, vars, elims] attempts to solve the equations for vars, \
eliminating the variables elims.\"", 14, StripOnInput -> False],
                    LabelStyle->"TextStyling"],
                    Annotation[#, 
                    Style[
                    "Solve[PolynomialsOver[R], poly == r], when given a \
polynomial poly from the ring of polynomials over the Ringoid R and an \
element r from R, solves the equation poly == r in the indeterminate x. \
(Solve[poly == r] can also be used, with the underlying ring extracted from \
poly.) Solutions are returned as a list of rules (as per normal usage). These \
solutions can be used with ReplaceAll (or its equivalent, /.) just as the \
results of the ordinary (built-in) Solve, whose functionality still works: \n\
Solve[eqns, vars] attempts to solve an equation or set of equations for the \
variables vars. Any variable in eqns but not vars is regarded as a parameter. \
Solve[eqns] treats all variables encountered as vars above. Solve[eqns, vars, \
elims] attempts to solve the equations for vars, eliminating the variables \
elims.", 14], "Tooltip"]& ]},
                  {
                   TagBox[
                    TooltipBox[
                    ButtonBox[
                    RowBox[{
                    "ToOrdinaryPolynomial", "[", "\[SelectionPlaceholder]", 
                    "]"}],
                    BaseStyle->"Paste"],
                    StyleBox[
                    "\"ToOrdinaryPolynomial[p] returns an expression that \
will be regarded as a polynomial in Mathematica's ordinary sense. Note that \
the underlying ring is lost in this transition and the new polynomial may or \
may not make sense (for ordinary Mathematica functions), depending on the \
ring.\"", 14, StripOnInput -> False],
                    LabelStyle->"TextStyling"],
                    Annotation[#, 
                    Style[
                    "ToOrdinaryPolynomial[p] returns an expression that will \
be regarded as a polynomial in Mathematica's ordinary sense. Note that the \
underlying ring is lost in this transition and the new polynomial may or may \
not make sense (for ordinary Mathematica functions), depending on the ring.", 
                    14], "Tooltip"]& ]},
                  {
                   TagBox[
                    TooltipBox[
                    ButtonBox[
                    RowBox[{"Zeros", "[", "\[SelectionPlaceholder]", "]"}],
                    BaseStyle->"Paste"],
                    StyleBox[
                    "\"Zeros[PolynomialsOver[R], p] returns the zeros, if \
any, of the polynomial p as a polynomial with coefficients from R. In other \
words, if z is the zero of R, this returns {x : p(x) = z}. Zeros[p] is \
another method of obtaining the same result.\"", 14, StripOnInput -> False],
                    LabelStyle->"TextStyling"],
                    Annotation[#, 
                    Style[
                    "Zeros[PolynomialsOver[R], p] returns the zeros, if any, \
of the polynomial p as a polynomial with coefficients from R. In other words, \
if z is the zero of R, this returns {x : p(x) = z}. Zeros[p] is another \
method of obtaining the same result.", 14], "Tooltip"]& ]},
                  {
                   TagBox[
                    TooltipBox[
                    ButtonBox[
                    RowBox[{
                    "\[SelectionPlaceholder]", "/.", "\[InvisibleSpace]", 
                    "\[Placeholder]"}],
                    BaseStyle->"Paste"],
                    ButtonBox[
                    
                    RowBox[{
                    "\[SelectionPlaceholder]", "/.", "\[InvisibleSpace]", 
                    "\[Placeholder]"}], BaseStyle -> "Paste"]],
                    Annotation[#, 
                    PasteButton[
                    Defer[
                    
                    ReplaceAll[$CellContext` \[SelectionPlaceholder], \
$CellContext` \[Placeholder]]]], "Tooltip"]& ]},
                  {
                   
                   StyleBox["\<\"\\!\\(\\*RowBox[{\\\"Replace\\\", \\\"[\\\", \
RowBox[{StyleBox[\\\"expr\\\", \\\"TI\\\"], \\\",\\\", \
StyleBox[\\\"rules\\\", \\\"TI\\\"]}], \\\"]\\\"}]\\) applies a rule or list \
of rules in an attempt to transform the entire expression \
\\!\\(\\*StyleBox[\\\"expr\\\", \\\"TI\\\"]\\). \
\\n\\!\\(\\*RowBox[{\\\"Replace\\\", \\\"[\\\", \
RowBox[{StyleBox[\\\"expr\\\", \\\"TI\\\"], \\\",\\\", \
StyleBox[\\\"rules\\\", \\\"TI\\\"], \\\",\\\", StyleBox[\\\"levelspec\\\", \
\\\"TI\\\"]}], \\\"]\\\"}]\\) applies rules to parts of \
\\!\\(\\*StyleBox[\\\"expr\\\", \\\"TI\\\"]\\) specified by \
\\!\\(\\*StyleBox[\\\"levelspec\\\", \\\"TI\\\"]\\). \"\>",
                    StripOnInput->False,
                    FontSize->14]}
                 },
                 GridBoxAlignment->{"Columns" -> {{Left}}},
                 
                 GridBoxItemSize->{
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
                "Column"],
               ImageMargins->0]}
            },
            AutoDelete->False,
            BaselinePosition->{1, 1},
            GridBoxAlignment->{"Columns" -> {{Left}}},
            GridBoxBackground->{"Columns" -> {{Automatic}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
            GridBoxSpacings->{"Columns" -> {{0.2}}, "Rows" -> {{0.5}}}]}, 
           Dynamic[Typeset`var$$],
           Alignment->Automatic,
           BaselinePosition->Baseline,
           DefaultBaseStyle->"OpenerView",
           ImageMargins->0,
           ImageSize->Automatic],
          Deployed->False,
          StripOnInput->False],
         OpenerView[{
           Tooltip[
           "Polynomial functions", 
            "List of polynomial functions available -- You may wish to use \
SwitchStructureTo[Ring]"], 
           Column[{
             Tooltip[
              PasteButton[
               Defer[
                
                AbstractAlgebra`Master`EisensteinsCriterionQ[$CellContext` \
\[SelectionPlaceholder]]]], 
              Style[
              "EisensteinsCriterionQ[zpoly] returns True if Eisenstein's \
Criterion indicates that the polynomial zpoly, with coefficients from the \
integers, is irreducible, and False otherwise. The Textual mode is \
available.", 14]], 
             Tooltip[
              PasteButton[
               Defer[
                
                AbstractAlgebra`Master`ModpIrreducibilityQ[$CellContext` \
\[SelectionPlaceholder], $CellContext` \[Placeholder]]]], 
              Style[
              "ModpIrreducibilityQ[zpoly] returns True if the Mod p \
Irreducibility Test indicates that the polynomial zpoly, with coefficients \
from the integers, is irreducible, and False otherwise. (This method tries \
the first 25 primes.) The Textual mode is available. ModpIrreducibilityQ[p, \
zpoly] tests the polynomial zpoly specifically with the prime p.", 14]], 
             Tooltip[
              PasteButton[
               Defer[
                
                AbstractAlgebra`Master`Poly[$CellContext` \
\[SelectionPlaceholder], $CellContext` \[Placeholder]]]], 
              Style[
              "Poly[R, expr, opts] creates the polynomial over the Ringoid R \
given by expr and using the options given by opts. A polynomial such as 2 + \
3x + x^3 (over some ring R) can be constructed by Poly[R, 2 + 3x + x^3], \
which, by default, would return 2 + 3x + x^3. The form x^3 + 3x + 2 could be \
returned by entering Poly[R, 2 + 3x + x^3, PowersIncrease \[Rule] \
RightToLeft], or by changing this option globally. One can also specify a \
polynomial by just using the coefficients. Thus, Poly[R, 1, 0, 3, 2] returns \
1 + 3x^2 + 2x^3, while Poly[R, 1, 0, 3, 2, PowersIncrease \[Rule] \
RightToLeft] returns x^3 + 3x + 2. When entering just the coefficients, the \
default indeterminate is 'x', but this can be changed by using the option \
Indeterminate \[Rule] var, where var is any (undefined) symbol. \
FlexibleEntering, an option taking either True or False (defaulting to True), \
can be used if one wishes to enter polynomials allowing subtraction of terms \
or allowing entering the negation of an element by using -r. It also allows \
all coefficients of the polynomial to be reduced mod n if the base ring is \
Z[n]. If RP is a ring of polynomials, Poly[RP, expr, opts] works in a similar \
fashion.", 14]], 
             Tooltip[
              PasteButton[
               Defer[
                
                AbstractAlgebra`Master`PolynomialEvaluation[$CellContext` \
\[SelectionPlaceholder], $CellContext` \[Placeholder]]]], 
              Style[
              "PolynomialEvaluation[PolynomialsOver[R], p, alpha] evaluates \
the polynomial p at alpha using the operations of the Ringoid R. \
PolynomialEvaluation[p, alpha] works similarly.", 14]], 
             Tooltip[
              PasteButton[
               Defer[
                
                AbstractAlgebra`Master`PolynomialsOfDegreeN[$CellContext` \
\[SelectionPlaceholder], $CellContext` \[Placeholder]]]], 
              Style[
              "PolynomialsOfDegreeN[R, n, opts] returns all polynomials of \
degree n over the ring R. Since this number can increase rather quickly, the \
option SizeLimit provides a maximum for the number of polynomials that will \
be produced. The default value is 125, but this can be changed using the \
option. Unless Indeterminate \[Rule] symbol is set, the default indeterminate \
is 'x'. A related function is PolynomialsUpToDegreeN.", 14]], 
             Tooltip[
              PasteButton[
               Defer[
                
                AbstractAlgebra`Master`PolynomialsUpToDegreeN[$CellContext` \
\[SelectionPlaceholder], $CellContext` \[Placeholder]]]], 
              Style[
              "PolynomialsUpToDegreeN[R, n, opts] returns all polynomials of \
degree n or less over the ring R. Since this number can increase rather \
quickly, the option SizeLimit provides a maximum for the number of \
polynomials that will be produced. The default value is 125, but this can be \
changed using the option. Unless Indeterminate \[Rule] symbol is set, the \
default indeterminate is 'x'. A related function is PolynomialsOfDegreeN.", 
               14]], 
             Tooltip[
              PasteButton[
               Defer[
                
                AbstractAlgebra`Master`RationalRootCandidates[$CellContext` \
\[SelectionPlaceholder]]]], 
              Style[
              "Ration alRootCandidates[poly] returns a list of candidates for \
the Rational Root Theorem, given the polynomial poly.", 14]], 
             Tooltip[
              PasteButton[
               Defer[
                
                AbstractAlgebra`Master`RationalRootTheorem[$CellContext` \
\[SelectionPlaceholder]]]], 
              Style[
              "RationalRootTheorem[poly] returns a list of two lists, given a \
polynomial poly. The first list consists of those rational candidates which \
are zeros for poly, while the second list consists of those rational \
candidates which are not zeros for poly.", 14]], 
             Tooltip[
              PasteButton[
               Defer[
                
                Solve[$CellContext` \[SelectionPlaceholder] == $CellContext` \
\[Placeholder]]]], 
              Style[
              "Solve[PolynomialsOver[R], poly == r], when given a polynomial \
poly from the ring of polynomials over the Ringoid R and an element r from R, \
solves the equation poly == r in the indeterminate x. (Solve[poly == r] can \
also be used, with the underlying ring extracted from poly.) Solutions are \
returned as a list of rules (as per normal usage). These solutions can be \
used with ReplaceAll (or its equivalent, /.) just as the results of the \
ordinary (built-in) Solve, whose functionality still works: \nSolve[eqns, \
vars] attempts to solve an equation or set of equations for the variables \
vars. Any variable in eqns but not vars is regarded as a parameter. \
Solve[eqns] treats all variables encountered as vars above. Solve[eqns, vars, \
elims] attempts to solve the equations for vars, eliminating the variables \
elims.", 14]], 
             Tooltip[
              PasteButton[
               Defer[
                
                AbstractAlgebra`Master`ToOrdinaryPolynomial[$CellContext` \
\[SelectionPlaceholder]]]], 
              Style[
              "ToOrdinaryPolynomial[p] returns an expression that will be \
regarded as a polynomial in Mathematica's ordinary sense. Note that the \
underlying ring is lost in this transition and the new polynomial may or may \
not make sense (for ordinary Mathematica functions), depending on the ring.", 
               14]], 
             Tooltip[
              PasteButton[
               Defer[
                
                AbstractAlgebra`Master`Zeros[$CellContext` \
\[SelectionPlaceholder]]]], 
              Style[
              "Zeros[PolynomialsOver[R], p] returns the zeros, if any, of the \
polynomial p as a polynomial with coefficients from R. In other words, if z \
is the zero of R, this returns {x : p(x) = z}. Zeros[p] is another method of \
obtaining the same result.", 14]], 
             Tooltip[
              PasteButton[
               Defer[
                
                ReplaceAll[$CellContext` \[SelectionPlaceholder], \
$CellContext` \[Placeholder]]]]], 
             Style[
             "\!\(\*RowBox[{\"Replace\", \"[\", RowBox[{StyleBox[\"expr\", \
\"TI\"], \",\", StyleBox[\"rules\", \"TI\"]}], \"]\"}]\) applies a rule or \
list of rules in an attempt to transform the entire expression \
\!\(\*StyleBox[\"expr\", \"TI\"]\). \n\!\(\*RowBox[{\"Replace\", \"[\", \
RowBox[{StyleBox[\"expr\", \"TI\"], \",\", StyleBox[\"rules\", \"TI\"], \
\",\", StyleBox[\"levelspec\", \"TI\"]}], \"]\"}]\) applies rules to parts of \
\!\(\*StyleBox[\"expr\", \"TI\"]\) specified by \!\(\*StyleBox[\"levelspec\", \
\"TI\"]\). ", 14]}]}, False]],
        DynamicModuleValues:>{}],
       Setting[#, {0}]& ]},
     {
      TagBox[
       DynamicModuleBox[{Typeset`var$$ = False}, 
        InterpretationBox[
         StyleBox[
          PaneSelectorBox[{False->GridBox[{
             {
              OpenerBox[Dynamic[Typeset`var$$],
               Appearance->Automatic,
               AutoAction->False,
               ContinuousAction->False,
               Enabled->Automatic], 
              TagBox[
               TooltipBox["\<\"Matrix functions\"\>",
                
                "\"List of matrix functions available -- You may wish to use \
SwitchStructureTo[Ring]\"",
                LabelStyle->"TextStyling"],
               
               Annotation[#, 
                "List of matrix functions available -- You may wish to use \
SwitchStructureTo[Ring]", "Tooltip"]& ]}
            },
            AutoDelete->False,
            BaselinePosition->{1, 1},
            GridBoxAlignment->{"Columns" -> {{Left}}},
            GridBoxBackground->{"Columns" -> {{Automatic}}},
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
            GridBoxSpacings->{"Columns" -> {{0.2}}, "Rows" -> {{0.5}}}], True->
           GridBox[{
             {
              OpenerBox[Dynamic[Typeset`var$$],
               Appearance->Automatic,
               AutoAction->False,
               ContinuousAction->False,
               Enabled->Automatic], 
              TagBox[
               TooltipBox["\<\"Matrix functions\"\>",
                
                "\"List of matrix functions available -- You may wish to use \
SwitchStructureTo[Ring]\"",
                LabelStyle->"TextStyling"],
               
               Annotation[#, 
                "List of matrix functions available -- You may wish to use \
SwitchStructureTo[Ring]", "Tooltip"]& ]},
             {"", 
              PaneBox[
               TagBox[GridBox[{
                  {
                   TagBox[
                    TooltipBox[
                    ButtonBox[
                    RowBox[{"Adjoint", "[", "\[SelectionPlaceholder]", "]"}],
                    BaseStyle->"Paste"],
                    StyleBox[
                    "\"Adjoint[A] returns Transpose[MatrixConjugate[A]], the \
transpose of the conjugate of a matrix. (For the usage of adjoint as it \
relates to determinants, see DetAdjoint.)\"", 14, StripOnInput -> False],
                    LabelStyle->"TextStyling"],
                    Annotation[#, 
                    Style[
                    "Adjoint[A] returns Transpose[MatrixConjugate[A]], the \
transpose of the conjugate of a matrix. (For the usage of adjoint as it \
relates to determinants, see DetAdjoint.)", 14], "Tooltip"]& ]},
                  {
                   TagBox[
                    TooltipBox[
                    ButtonBox[
                    RowBox[{"AntiCommutingMatricesQ", "[", 
                    RowBox[{
                    "\[SelectionPlaceholder]", ",", "\[Placeholder]", ",", 
                    "\[Placeholder]"}], "]"}],
                    BaseStyle->"Paste"],
                    StyleBox[
                    "\"AntiCommutingMatricesQ[R, A, B] returns True or False \
depending on whether the matrices A and B over the Ringoid R anti-commute in \
the sense that A B = - B A. AntiCommutingMatricesQ[MatricesOver[R,{n,n}], A, \
B] works similarly. For matrices with numeric entries (over Integers, \
Rationals, Reals or Complex), AntiCommutingMatricesQ[A, B] works \
similarly.\"", 14, StripOnInput -> False],
                    LabelStyle->"TextStyling"],
                    Annotation[#, 
                    Style[
                    "AntiCommutingMatricesQ[R, A, B] returns True or False \
depending on whether the matrices A and B over the Ringoid R anti-commute in \
the sense that A B = - B A. AntiCommutingMatricesQ[MatricesOver[R,{n,n}], A, \
B] works similarly. For matrices with numeric entries (over Integers, \
Rationals, Reals or Complex), AntiCommutingMatricesQ[A, B] works similarly.", 
                    14], "Tooltip"]& ]},
                  {
                   TagBox[
                    TooltipBox[
                    ButtonBox[
                    RowBox[{
                    "DetAdjoint", "[", "\[SelectionPlaceholder]", "]"}],
                    BaseStyle->"Paste"],
                    StyleBox[
                    "\"DetAdjoint[A] returns the adjoint of a matrix A, which \
is defined as (-1)^(i+j) Det[Transpose[Bij]], where Bij is the matrix Aij \
with the ith row and jth column removed.\"", 14, StripOnInput -> False],
                    LabelStyle->"TextStyling"],
                    Annotation[#, 
                    Style[
                    "DetAdjoint[A] returns the adjoint of a matrix A, which \
is defined as (-1)^(i+j) Det[Transpose[Bij]], where Bij is the matrix Aij \
with the ith row and jth column removed.", 14], "Tooltip"]& ]},
                  {
                   TagBox[
                    TooltipBox[
                    ButtonBox[
                    RowBox[{"GeneralLinear", "[", 
                    RowBox[{
                    "\[SelectionPlaceholder]", ",", "\[Placeholder]"}], "]"}],
                    
                    BaseStyle->"Paste"],
                    StyleBox[
                    "\"GeneralLinear[args] - see GL.\"", 14, StripOnInput -> 
                    False],
                    LabelStyle->"TextStyling"],
                    Annotation[#, 
                    Style["GeneralLinear[args] - see GL.", 14], "Tooltip"]& ]},
                  {
                   TagBox[
                    TooltipBox[
                    ButtonBox[
                    RowBox[{"GLQ", "[", 
                    RowBox[{
                    "\[SelectionPlaceholder]", ",", "\[Placeholder]"}], "]"}],
                    
                    BaseStyle->"Paste"],
                    StyleBox[
                    "\"GLQ[R, A] returns True or False depending on whether \
the matrix A over the Ringoid R is in GL[R, n] (where A is an n-by-n matrix).\
\"", 14, StripOnInput -> False],
                    LabelStyle->"TextStyling"],
                    Annotation[#, 
                    Style[
                    "GLQ[R, A] returns True or False depending on whether the \
matrix A over the Ringoid R is in GL[R, n] (where A is an n-by-n matrix).", 
                    14], "Tooltip"]& ]},
                  {
                   TagBox[
                    TooltipBox[
                    ButtonBox[
                    RowBox[{
                    "HermitianQ", "[", "\[SelectionPlaceholder]", "]"}],
                    BaseStyle->"Paste"],
                    StyleBox[
                    "\"HermitianQ[A] returns True or False depending on \
whether the matrix A is Hermitian (i.e., A = Adjoint[A]).\"", 14, 
                    StripOnInput -> False],
                    LabelStyle->"TextStyling"],
                    Annotation[#, 
                    Style[
                    "HermitianQ[A] returns True or False depending on whether \
the matrix A is Hermitian (i.e., A = Adjoint[A]).", 14], "Tooltip"]& ]},
                  {
                   TagBox[
                    TooltipBox[
                    ButtonBox[
                    RowBox[{"Mat", "[", 
                    RowBox[{
                    "\[SelectionPlaceholder]", ",", "\[Placeholder]"}], "]"}],
                    
                    BaseStyle->"Paste"],
                    StyleBox[
                    "\"Mat[R,n] (alternatively, Mat[n, R]) returns the \
extension ring of n-by-n matrices over the Ringoid R. Mat[R, {m,n}] (or \
Mat[{m,n},R]) returns the extension ring of m-by-n matrices over R.\"", 14, 
                    StripOnInput -> False],
                    LabelStyle->"TextStyling"],
                    Annotation[#, 
                    Style[
                    "Mat[R,n] (alternatively, Mat[n, R]) returns the \
extension ring of n-by-n matrices over the Ringoid R. Mat[R, {m,n}] (or \
Mat[{m,n},R]) returns the extension ring of m-by-n matrices over R.", 14], 
                    "Tooltip"]& ]},
                  {
                   TagBox[
                    TooltipBox[
                    ButtonBox[
                    RowBox[{"MatA", "[", 
                    RowBox[{"\[SelectionPlaceholder]", ",", 
                    RowBox[{"{", 
                    RowBox[{"\[Placeholder]", ",", "\[Placeholder]"}], 
                    "}"}]}], "]"}],
                    BaseStyle->"Paste"],
                    StyleBox[
                    "\"MatA[R,{m,n}] (alternatively, MatA[{m,n}, R]) returns \
the extension of m-by-n matrices over the Ringoid R with the operation being \
addition of matrices.\"", 14, StripOnInput -> False],
                    LabelStyle->"TextStyling"],
                    Annotation[#, 
                    Style[
                    "MatA[R,{m,n}] (alternatively, MatA[{m,n}, R]) returns \
the extension of m-by-n matrices over the Ringoid R with the operation being \
addition of matrices.", 14], "Tooltip"]& ]},
                  {
                   TagBox[
                    TooltipBox[
                    ButtonBox[
                    RowBox[{"MatM", "[", 
                    RowBox[{
                    "\[SelectionPlaceholder]", ",", "\[Placeholder]"}], "]"}],
                    
                    BaseStyle->"Paste"],
                    StyleBox[
                    "\"MatM[R,n] (alternatively, MatM[n, R]) returns the \
extension of n-by-n matrices over the Ringoid R with the operation being \
multiplication of matrices.\"", 14, StripOnInput -> False],
                    LabelStyle->"TextStyling"],
                    Annotation[#, 
                    Style[
                    "MatM[R,n] (alternatively, MatM[n, R]) returns the \
extension of n-by-n matrices over the Ringoid R with the operation being \
multiplication of matrices.", 14], "Tooltip"]& ]},
                  {
                   TagBox[
                    TooltipBox[
                    ButtonBox[
                    RowBox[{
                    "MatrixConjugate", "[", "\[SelectionPlaceholder]", "]"}],
                    BaseStyle->"Paste"],
                    StyleBox[
                    "\"MatrixConjugate[A], where A is a matrix, returns the \
matrix with all of the entries being the complex conjugate of those that \
occur in A.\"", 14, StripOnInput -> False],
                    LabelStyle->"TextStyling"],
                    Annotation[#, 
                    Style[
                    "MatrixConjugate[A], where A is a matrix, returns the \
matrix with all of the entries being the complex conjugate of those that \
occur in A.", 14], "Tooltip"]& ]},
                  {
                   TagBox[
                    TooltipBox[
                    ButtonBox[
                    RowBox[{"OrthogonalQ", "[", 
                    RowBox[{
                    "\[SelectionPlaceholder]", ",", "\[Placeholder]"}], "]"}],
                    
                    BaseStyle->"Paste"],
                    StyleBox[
                    "\"OrthogonalQ[R, A] returns True or False depending on \
whether the matrix A over the Ringoid R is an orthogonal matrix (i.e., the \
product of the transpose of A and A itself is the identity matrix). For \
matrices with real entries, OrthogonalQ[A] works similarly.\"", 14, 
                    StripOnInput -> False],
                    LabelStyle->"TextStyling"],
                    Annotation[#, 
                    Style[
                    "OrthogonalQ[R, A] returns True or False depending on \
whether the matrix A over the Ringoid R is an orthogonal matrix (i.e., the \
product of the transpose of A and A itself is the identity matrix). For \
matrices with real entries, OrthogonalQ[A] works similarly.", 14], 
                    "Tooltip"]& ]},
                  {
                   TagBox[
                    TooltipBox[
                    ButtonBox[
                    RowBox[{"RandomMatrix", "[", 
                    RowBox[{
                    "\[SelectionPlaceholder]", ",", "\[Placeholder]", ",", 
                    RowBox[{"MatrixType", "\[Rule]", "\[Placeholder]"}]}], 
                    "]"}],
                    BaseStyle->"Paste"],
                    StyleBox[
                    "\"RandomMatrix[R, n, MatrixType \[Rule] type] returns a \
random n-by-n matrix over the Ringoid R of the specified type; see MatrixType \
for the possible values.\"", 14, StripOnInput -> False],
                    LabelStyle->"TextStyling"],
                    Annotation[#, 
                    Style[
                    "RandomMatrix[R, n, MatrixType \[Rule] type] returns a \
random n-by-n matrix over the Ringoid R of the specified type; see MatrixType \
for the possible values.", 14], "Tooltip"]& ]},
                  {
                   TagBox[
                    TooltipBox[
                    ButtonBox[
                    RowBox[{
                    "SkewHermitianQ", "[", "\[SelectionPlaceholder]", "]"}],
                    BaseStyle->"Paste"],
                    StyleBox[
                    "\"SkewHermitianQ[A] returns True or False depending on \
whether the matrix A is skew-Hermitian in the sense that A = -Adjoint[A].\"", 
                    14, StripOnInput -> False],
                    LabelStyle->"TextStyling"],
                    Annotation[#, 
                    Style[
                    "SkewHermitianQ[A] returns True or False depending on \
whether the matrix A is skew-Hermitian in the sense that A = -Adjoint[A].", 
                    14], "Tooltip"]& ]},
                  {
                   TagBox[
                    TooltipBox[
                    ButtonBox[
                    RowBox[{"SkewSymmetricQ", "[", 
                    RowBox[{
                    "\[SelectionPlaceholder]", ",", "\[Placeholder]"}], "]"}],
                    
                    BaseStyle->"Paste"],
                    StyleBox[
                    "\"SkewSymmetricQ[R, A] returns True or False depending \
on whether the matrix A is skew-symmetric in the sense that A = \
-Transpose[A]. For matrices with numeric entries (over Integers, Rationals, \
Reals or Complex), SkewSymmetricQ[A] works similarly.\"", 14, StripOnInput -> 
                    False],
                    LabelStyle->"TextStyling"],
                    Annotation[#, 
                    Style[
                    "SkewSymmetricQ[R, A] returns True or False depending on \
whether the matrix A is skew-symmetric in the sense that A = -Transpose[A]. \
For matrices with numeric entries (over Integers, Rationals, Reals or \
Complex), SkewSymmetricQ[A] works similarly.", 14], "Tooltip"]& ]},
                  {
                   TagBox[
                    TooltipBox[
                    ButtonBox[
                    RowBox[{"SLQ", "[", 
                    RowBox[{
                    "\[SelectionPlaceholder]", ",", "\[Placeholder]"}], "]"}],
                    
                    BaseStyle->"Paste"],
                    StyleBox[
                    "\"SLQ[R, A] returns True or False depending on whether \
the matrix A over the Ringoid R is in SL[R, n] (where A is an n-by-n matrix).\
\"", 14, StripOnInput -> False],
                    LabelStyle->"TextStyling"],
                    Annotation[#, 
                    Style[
                    "SLQ[R, A] returns True or False depending on whether the \
matrix A over the Ringoid R is in SL[R, n] (where A is an n-by-n matrix).", 
                    14], "Tooltip"]& ]},
                  {
                   TagBox[
                    TooltipBox[
                    ButtonBox[
                    RowBox[{"SpecialLinear", "[", 
                    RowBox[{
                    "\[SelectionPlaceholder]", ",", "\[Placeholder]"}], "]"}],
                    
                    BaseStyle->"Paste"],
                    StyleBox[
                    "\"SpecialLinear[args] - see SL.\"", 14, StripOnInput -> 
                    False],
                    LabelStyle->"TextStyling"],
                    Annotation[#, 
                    Style["SpecialLinear[args] - see SL.", 14], "Tooltip"]& ]},
                  {
                   TagBox[
                    TooltipBox[
                    ButtonBox[
                    RowBox[{"SymmetricQ", "[", 
                    RowBox[{
                    "\[SelectionPlaceholder]", ",", "\[Placeholder]"}], "]"}],
                    
                    BaseStyle->"Paste"],
                    StyleBox[
                    "\"SymmetricQ[R, A] returns True or False depending on \
whether the matrix A is symmetric.  For matrices with numeric entries (over \
Integers, Rationals, Reals or Complex), SymmetricQ[A] works similarly.\"", 14,
                     StripOnInput -> False],
                    LabelStyle->"TextStyling"],
                    Annotation[#, 
                    Style[
                    "SymmetricQ[R, A] returns True or False depending on \
whether the matrix A is symmetric.  For matrices with numeric entries (over \
Integers, Rationals, Reals or Complex), SymmetricQ[A] works similarly.", 14], 
                    "Tooltip"]& ]},
                  {
                   TagBox[
                    TooltipBox[
                    ButtonBox[
                    RowBox[{"ToGroupoid", "[", 
                    RowBox[{
                    "\[SelectionPlaceholder]", ",", "\[Placeholder]", ",", 
                    "\[Placeholder]"}], "]"}],
                    BaseStyle->"Paste"],
                    StyleBox[
                    "\"ToGroupoid[extension], where extension might be \
GL[R,n] or some similar extension (such as MatricesOver[R, {m,n}, opts]), \
calculates the actual elements and forms a Groupoid when the number of \
elements is not larger than the default value of the option SizeLimit. \
Setting this option higher allows more Groupoids to be formed, but one needs \
to be sure there is sufficient memory to do so, since these Groupoids can \
become rather large. Using Size first may be a good idea, to see how many \
elements there are. To just get the list of elements, use the function \
Elements (which uses the same SizeLimit restriction).\"", 14, StripOnInput -> 
                    False],
                    LabelStyle->"TextStyling"],
                    Annotation[#, 
                    Style[
                    "ToGroupoid[extension], where extension might be GL[R,n] \
or some similar extension (such as MatricesOver[R, {m,n}, opts]), calculates \
the actual elements and forms a Groupoid when the number of elements is not \
larger than the default value of the option SizeLimit. Setting this option \
higher allows more Groupoids to be formed, but one needs to be sure there is \
sufficient memory to do so, since these Groupoids can become rather large. \
Using Size first may be a good idea, to see how many elements there are. To \
just get the list of elements, use the function Elements (which uses the same \
SizeLimit restriction).", 14], "Tooltip"]& ]},
                  {
                   TagBox[
                    TooltipBox[
                    ButtonBox[
                    RowBox[{"ToRingoid", "[", 
                    RowBox[{
                    "\[SelectionPlaceholder]", ",", "\[Placeholder]", ",", 
                    "\[Placeholder]"}], "]"}],
                    BaseStyle->"Paste"],
                    StyleBox[
                    "\"ToRingoid[Mat[R, n]], if the SizeLimit permits, \
returns the Ringoid consisting of the n-by-n matrices over the Ringoid R. See \
ToGroupoid for more details.\"", 14, StripOnInput -> False],
                    LabelStyle->"TextStyling"],
                    Annotation[#, 
                    Style[
                    "ToRingoid[Mat[R, n]], if the SizeLimit permits, returns \
the Ringoid consisting of the n-by-n matrices over the Ringoid R. See \
ToGroupoid for more details.", 14], "Tooltip"]& ]},
                  {
                   TagBox[
                    TooltipBox[
                    ButtonBox[
                    RowBox[{"UnitaryQ", "[", "\[SelectionPlaceholder]", "]"}],
                    
                    BaseStyle->"Paste"],
                    StyleBox[
                    "\"UnitaryQ[A] returns True or False depending on whether \
the matrix A (over the complex numbers) is an unitary matrix in the sense \
that the product of the adjoint of A and A itself is the identity matrix.\"", 
                    14, StripOnInput -> False],
                    LabelStyle->"TextStyling"],
                    Annotation[#, 
                    Style[
                    "UnitaryQ[A] returns True or False depending on whether \
the matrix A (over the complex numbers) is an unitary matrix in the sense \
that the product of the adjoint of A and A itself is the identity matrix.", 
                    14], "Tooltip"]& ]}
                 },
                 GridBoxAlignment->{"Columns" -> {{Left}}},
                 
                 GridBoxItemSize->{
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
                "Column"],
               ImageMargins->0]}
            },
            AutoDelete->False,
            BaselinePosition->{1, 1},
            GridBoxAlignment->{"Columns" -> {{Left}}},
            GridBoxBackground->{"Columns" -> {{Automatic}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
            GridBoxSpacings->{"Columns" -> {{0.2}}, "Rows" -> {{0.5}}}]}, 
           Dynamic[Typeset`var$$],
           Alignment->Automatic,
           BaselinePosition->Baseline,
           DefaultBaseStyle->"OpenerView",
           ImageMargins->0,
           ImageSize->Automatic],
          Deployed->False,
          StripOnInput->False],
         OpenerView[{
           Tooltip[
           "Matrix functions", 
            
            "List of matrix functions available -- You may wish to use \
SwitchStructureTo[Ring]"], 
           Column[{
             Tooltip[
              PasteButton[
               Defer[
                
                AbstractAlgebra`Master`Adjoint[$CellContext` \
\[SelectionPlaceholder]]]], 
              Style[
              "Adjoint[A] returns Transpose[MatrixConjugate[A]], the \
transpose of the conjugate of a matrix. (For the usage of adjoint as it \
relates to determinants, see DetAdjoint.)", 14]], 
             Tooltip[
              PasteButton[
               Defer[
                
                AbstractAlgebra`Master`AntiCommutingMatricesQ[$CellContext` \
\[SelectionPlaceholder], $CellContext` \[Placeholder], $CellContext` \
\[Placeholder]]]], 
              Style[
              "AntiCommutingMatricesQ[R, A, B] returns True or False \
depending on whether the matrices A and B over the Ringoid R anti-commute in \
the sense that A B = - B A. AntiCommutingMatricesQ[MatricesOver[R,{n,n}], A, \
B] works similarly. For matrices with numeric entries (over Integers, \
Rationals, Reals or Complex), AntiCommutingMatricesQ[A, B] works similarly.", 
               14]], 
             Tooltip[
              PasteButton[
               Defer[
                
                AbstractAlgebra`Master`DetAdjoint[$CellContext` \
\[SelectionPlaceholder]]]], 
              Style[
              "DetAdjoint[A] returns the adjoint of a matrix A, which is \
defined as (-1)^(i+j) Det[Transpose[Bij]], where Bij is the matrix Aij with \
the ith row and jth column removed.", 14]], 
             Tooltip[
              PasteButton[
               Defer[
                
                AbstractAlgebra`Master`GeneralLinear[$CellContext` \
\[SelectionPlaceholder], $CellContext` \[Placeholder]]]], 
              Style["GeneralLinear[args] - see GL.", 14]], 
             Tooltip[
              PasteButton[
               Defer[
                
                AbstractAlgebra`Master`GLQ[$CellContext` \
\[SelectionPlaceholder], $CellContext` \[Placeholder]]]], 
              Style[
              "GLQ[R, A] returns True or False depending on whether the \
matrix A over the Ringoid R is in GL[R, n] (where A is an n-by-n matrix).", 
               14]], 
             Tooltip[
              PasteButton[
               Defer[
                
                AbstractAlgebra`Master`HermitianQ[$CellContext` \
\[SelectionPlaceholder]]]], 
              Style[
              "HermitianQ[A] returns True or False depending on whether the \
matrix A is Hermitian (i.e., A = Adjoint[A]).", 14]], 
             Tooltip[
              PasteButton[
               Defer[
                
                AbstractAlgebra`Master`Mat[$CellContext` \
\[SelectionPlaceholder], $CellContext` \[Placeholder]]]], 
              Style[
              "Mat[R,n] (alternatively, Mat[n, R]) returns the extension ring \
of n-by-n matrices over the Ringoid R. Mat[R, {m,n}] (or Mat[{m,n},R]) \
returns the extension ring of m-by-n matrices over R.", 14]], 
             Tooltip[
              PasteButton[
               Defer[
                
                AbstractAlgebra`Master`MatA[$CellContext` \
\[SelectionPlaceholder], {$CellContext` \[Placeholder], $CellContext` \
\[Placeholder]}]]], 
              Style[
              "MatA[R,{m,n}] (alternatively, MatA[{m,n}, R]) returns the \
extension of m-by-n matrices over the Ringoid R with the operation being \
addition of matrices.", 14]], 
             Tooltip[
              PasteButton[
               Defer[
                
                AbstractAlgebra`Master`MatM[$CellContext` \
\[SelectionPlaceholder], $CellContext` \[Placeholder]]]], 
              Style[
              "MatM[R,n] (alternatively, MatM[n, R]) returns the extension of \
n-by-n matrices over the Ringoid R with the operation being multiplication of \
matrices.", 14]], 
             Tooltip[
              PasteButton[
               Defer[
                
                AbstractAlgebra`Master`MatrixConjugate[$CellContext` \
\[SelectionPlaceholder]]]], 
              Style[
              "MatrixConjugate[A], where A is a matrix, returns the matrix \
with all of the entries being the complex conjugate of those that occur in \
A.", 14]], 
             Tooltip[
              PasteButton[
               Defer[
                
                AbstractAlgebra`Master`OrthogonalQ[$CellContext` \
\[SelectionPlaceholder], $CellContext` \[Placeholder]]]], 
              Style[
              "OrthogonalQ[R, A] returns True or False depending on whether \
the matrix A over the Ringoid R is an orthogonal matrix (i.e., the product of \
the transpose of A and A itself is the identity matrix). For matrices with \
real entries, OrthogonalQ[A] works similarly.", 14]], 
             Tooltip[
              PasteButton[
               Defer[
                
                AbstractAlgebra`Master`RandomMatrix[$CellContext` \
\[SelectionPlaceholder], $CellContext` \[Placeholder], 
                 AbstractAlgebra`Master`MatrixType -> $CellContext` \
\[Placeholder]]]], 
              Style[
              "RandomMatrix[R, n, MatrixType \[Rule] type] returns a random \
n-by-n matrix over the Ringoid R of the specified type; see MatrixType for \
the possible values.", 14]], 
             Tooltip[
              PasteButton[
               Defer[
                
                AbstractAlgebra`Master`SkewHermitianQ[$CellContext` \
\[SelectionPlaceholder]]]], 
              Style[
              "SkewHermitianQ[A] returns True or False depending on whether \
the matrix A is skew-Hermitian in the sense that A = -Adjoint[A].", 14]], 
             Tooltip[
              PasteButton[
               Defer[
                
                AbstractAlgebra`Master`SkewSymmetricQ[$CellContext` \
\[SelectionPlaceholder], $CellContext` \[Placeholder]]]], 
              Style[
              "SkewSymmetricQ[R, A] returns True or False depending on \
whether the matrix A is skew-symmetric in the sense that A = -Transpose[A]. \
For matrices with numeric entries (over Integers, Rationals, Reals or \
Complex), SkewSymmetricQ[A] works similarly.", 14]], 
             Tooltip[
              PasteButton[
               Defer[
                
                AbstractAlgebra`Master`SLQ[$CellContext` \
\[SelectionPlaceholder], $CellContext` \[Placeholder]]]], 
              Style[
              "SLQ[R, A] returns True or False depending on whether the \
matrix A over the Ringoid R is in SL[R, n] (where A is an n-by-n matrix).", 
               14]], 
             Tooltip[
              PasteButton[
               Defer[
                
                AbstractAlgebra`Master`SpecialLinear[$CellContext` \
\[SelectionPlaceholder], $CellContext` \[Placeholder]]]], 
              Style["SpecialLinear[args] - see SL.", 14]], 
             Tooltip[
              PasteButton[
               Defer[
                
                AbstractAlgebra`Master`SymmetricQ[$CellContext` \
\[SelectionPlaceholder], $CellContext` \[Placeholder]]]], 
              Style[
              "SymmetricQ[R, A] returns True or False depending on whether \
the matrix A is symmetric.  For matrices with numeric entries (over Integers, \
Rationals, Reals or Complex), SymmetricQ[A] works similarly.", 14]], 
             Tooltip[
              PasteButton[
               Defer[
                
                AbstractAlgebra`Master`ToGroupoid[$CellContext` \
\[SelectionPlaceholder], $CellContext` \[Placeholder], $CellContext` \
\[Placeholder]]]], 
              Style[
              "ToGroupoid[extension], where extension might be GL[R,n] or \
some similar extension (such as MatricesOver[R, {m,n}, opts]), calculates the \
actual elements and forms a Groupoid when the number of elements is not \
larger than the default value of the option SizeLimit. Setting this option \
higher allows more Groupoids to be formed, but one needs to be sure there is \
sufficient memory to do so, since these Groupoids can become rather large. \
Using Size first may be a good idea, to see how many elements there are. To \
just get the list of elements, use the function Elements (which uses the same \
SizeLimit restriction).", 14]], 
             Tooltip[
              PasteButton[
               Defer[
                
                AbstractAlgebra`Master`ToRingoid[$CellContext` \
\[SelectionPlaceholder], $CellContext` \[Placeholder], $CellContext` \
\[Placeholder]]]], 
              Style[
              "ToRingoid[Mat[R, n]], if the SizeLimit permits, returns the \
Ringoid consisting of the n-by-n matrices over the Ringoid R. See ToGroupoid \
for more details.", 14]], 
             Tooltip[
              PasteButton[
               Defer[
                
                AbstractAlgebra`Master`UnitaryQ[$CellContext` \
\[SelectionPlaceholder]]]], 
              Style[
              "UnitaryQ[A] returns True or False depending on whether the \
matrix A (over the complex numbers) is an unitary matrix in the sense that \
the product of the adjoint of A and A itself is the identity matrix.", 
               14]]}]}, False]],
        DynamicModuleValues:>{}],
       Setting[#, {0}]& ]},
     {
      TagBox[
       DynamicModuleBox[{Typeset`var$$ = False}, 
        InterpretationBox[
         StyleBox[
          PaneSelectorBox[{False->GridBox[{
             {
              OpenerBox[Dynamic[Typeset`var$$],
               Appearance->Automatic,
               AutoAction->False,
               ContinuousAction->False,
               Enabled->Automatic], 
              TagBox[
               TooltipBox["\<\"Galois field functions\"\>",
                
                "\"List of Galois field functions available -- You may wish \
to use SwitchStructureTo[Ring]\"",
                LabelStyle->"TextStyling"],
               
               Annotation[#, 
                "List of Galois field functions available -- You may wish to \
use SwitchStructureTo[Ring]", "Tooltip"]& ]}
            },
            AutoDelete->False,
            BaselinePosition->{1, 1},
            GridBoxAlignment->{"Columns" -> {{Left}}},
            GridBoxBackground->{"Columns" -> {{Automatic}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
            GridBoxSpacings->{"Columns" -> {{0.2}}, "Rows" -> {{0.5}}}], True->
           GridBox[{
             {
              OpenerBox[Dynamic[Typeset`var$$],
               Appearance->Automatic,
               AutoAction->False,
               ContinuousAction->False,
               Enabled->Automatic], 
              TagBox[
               TooltipBox["\<\"Galois field functions\"\>",
                
                "\"List of Galois field functions available -- You may wish \
to use SwitchStructureTo[Ring]\"",
                LabelStyle->"TextStyling"],
               
               Annotation[#, 
                "List of Galois field functions available -- You may wish to \
use SwitchStructureTo[Ring]", "Tooltip"]& ]},
             {"", 
              PaneBox[
               TagBox[GridBox[{
                  {
                   TagBox[
                    TooltipBox[
                    ButtonBox[
                    RowBox[{"AdditiveToMultiplicative", "[", 
                    RowBox[{
                    "\[SelectionPlaceholder]", ",", "\[Placeholder]"}], "]"}],
                    
                    BaseStyle->"Paste"],
                    StyleBox[
                    "\"AdditiveToMultiplicative[R, add] returns the \
multiplicative form of the element add (given in additive form) from the \
ringoid R (typically a Galois field).\"", 14, StripOnInput -> False],
                    LabelStyle->"TextStyling"],
                    Annotation[#, 
                    Style[
                    "AdditiveToMultiplicative[R, add] returns the \
multiplicative form of the element add (given in additive form) from the \
ringoid R (typically a Galois field).", 14], "Tooltip"]& ]},
                  {
                   TagBox[
                    TooltipBox[
                    ButtonBox[
                    RowBox[{
                    "FieldIrreducible", "[", "\[SelectionPlaceholder]", "]"}],
                    
                    BaseStyle->"Paste"],
                    StyleBox[
                    "\"FieldIrreducible[GF[n]] returns the irreducible \
polynomial used in  establishing the Galois field GF[n].\"", 14, StripOnInput -> 
                    False],
                    LabelStyle->"TextStyling"],
                    Annotation[#, 
                    Style[
                    "FieldIrreducible[GF[n]] returns the irreducible \
polynomial used in  establishing the Galois field GF[n].", 14], "Tooltip"]& ]},
                  {
                   TagBox[
                    TooltipBox[
                    ButtonBox[
                    RowBox[{"GF", "[", "\[SelectionPlaceholder]", "]"}],
                    BaseStyle->"Paste"],
                    StyleBox[
                    "\"GF[n] returns the Galois field of order n (if n = p^d \
for some prime p and positive integer d), while GF[p, d] returns the field of \
order p^d (where p is the prime modulus and d is the degree of a irreducible \
polynomial to create the field). The field takes the form of a quotient ring \
of polynomials over Z[p] mod the ideal generated by the irreducible \
polynomial, and consequently consisting of polynomials of degree less than d. \
GF[n, poly] or GF[p, d, poly] returns the finite field using the specified \
irreducible polynomial. The option Indeterminate can be used to specify the \
symbol to be used for the indeterminate.\"", 14, StripOnInput -> False],
                    LabelStyle->"TextStyling"],
                    Annotation[#, 
                    Style[
                    "GF[n] returns the Galois field of order n (if n = p^d \
for some prime p and positive integer d), while GF[p, d] returns the field of \
order p^d (where p is the prime modulus and d is the degree of a irreducible \
polynomial to create the field). The field takes the form of a quotient ring \
of polynomials over Z[p] mod the ideal generated by the irreducible \
polynomial, and consequently consisting of polynomials of degree less than d. \
GF[n, poly] or GF[p, d, poly] returns the finite field using the specified \
irreducible polynomial. The option Indeterminate can be used to specify the \
symbol to be used for the indeterminate.", 14], "Tooltip"]& ]},
                  {
                   TagBox[
                    TooltipBox[
                    ButtonBox[
                    RowBox[{"GF", "[", 
                    RowBox[{
                    "\[SelectionPlaceholder]", ",", "\[Placeholder]"}], "]"}],
                    
                    BaseStyle->"Paste"],
                    StyleBox[
                    "\"GF[n] returns the Galois field of order n (if n = p^d \
for some prime p and positive integer d), while GF[p, d] returns the field of \
order p^d (where p is the prime modulus and d is the degree of a irreducible \
polynomial to create the field). The field takes the form of a quotient ring \
of polynomials over Z[p] mod the ideal generated by the irreducible \
polynomial, and consequently consisting of polynomials of degree less than d. \
GF[n, poly] or GF[p, d, poly] returns the finite field using the specified \
irreducible polynomial. The option Indeterminate can be used to specify the \
symbol to be used for the indeterminate.\"", 14, StripOnInput -> False],
                    LabelStyle->"TextStyling"],
                    Annotation[#, 
                    Style[
                    "GF[n] returns the Galois field of order n (if n = p^d \
for some prime p and positive integer d), while GF[p, d] returns the field of \
order p^d (where p is the prime modulus and d is the degree of a irreducible \
polynomial to create the field). The field takes the form of a quotient ring \
of polynomials over Z[p] mod the ideal generated by the irreducible \
polynomial, and consequently consisting of polynomials of degree less than d. \
GF[n, poly] or GF[p, d, poly] returns the finite field using the specified \
irreducible polynomial. The option Indeterminate can be used to specify the \
symbol to be used for the indeterminate.", 14], "Tooltip"]& ]},
                  {
                   TagBox[
                    TooltipBox[
                    ButtonBox[
                    RowBox[{"MultiplicativeToAdditive", "[", 
                    RowBox[{
                    "\[SelectionPlaceholder]", ",", "\[Placeholder]"}], "]"}],
                    
                    BaseStyle->"Paste"],
                    StyleBox[
                    "\"MultiplicativeToAdditive[R, mult] returns the additive \
form of the element mult, currently in multiplicative form, from the ringoid \
(typically a Galois field) R.\"", 14, StripOnInput -> False],
                    LabelStyle->"TextStyling"],
                    Annotation[#, 
                    Style[
                    "MultiplicativeToAdditive[R, mult] returns the additive \
form of the element mult, currently in multiplicative form, from the ringoid \
(typically a Galois field) R.", 14], "Tooltip"]& ]},
                  {
                   TagBox[
                    TooltipBox[
                    ButtonBox[
                    RowBox[{
                    "PrimitivePolynomials", "[", "\[SelectionPlaceholder]", 
                    "]"}],
                    BaseStyle->"Paste"],
                    StyleBox[
                    "\"PrimitivePolynomials[GF[n]] returns the set of \
primitive polynomials in GF[n]. (Actually, GF[n] can be replaced by any ring \
R and this will return the set of elements that generate the multiplicative \
Groupoid of non-zero elements in R.)\"", 14, StripOnInput -> False],
                    LabelStyle->"TextStyling"],
                    Annotation[#, 
                    Style[
                    "PrimitivePolynomials[GF[n]] returns the set of primitive \
polynomials in GF[n]. (Actually, GF[n] can be replaced by any ring R and this \
will return the set of elements that generate the multiplicative Groupoid of \
non-zero elements in R.)", 14], "Tooltip"]& ]},
                  {
                   TagBox[
                    TooltipBox[
                    ButtonBox[
                    RowBox[{
                    "TableOfPowers", "[", "\[SelectionPlaceholder]", "]"}],
                    BaseStyle->"Paste"],
                    StyleBox[
                    "\"TableOfPowers[GF[n]] returns a table consisting of \
first the element {0, 0} followed by pairs of the form {poly^j, r} where r is \
an element in GF[n], poly is the 'simplest' primitive polynomial for this \
ring, and j is the power to which poly needs to be raised to be equal to \
r.\"", 14, StripOnInput -> False],
                    LabelStyle->"TextStyling"],
                    Annotation[#, 
                    Style[
                    "TableOfPowers[GF[n]] returns a table consisting of first \
the element {0, 0} followed by pairs of the form {poly^j, r} where r is an \
element in GF[n], poly is the 'simplest' primitive polynomial for this ring, \
and j is the power to which poly needs to be raised to be equal to r.", 14], 
                    "Tooltip"]& ]}
                 },
                 GridBoxAlignment->{"Columns" -> {{Left}}},
                 
                 GridBoxItemSize->{
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
                "Column"],
               ImageMargins->0]}
            },
            AutoDelete->False,
            BaselinePosition->{1, 1},
            GridBoxAlignment->{"Columns" -> {{Left}}},
            GridBoxBackground->{"Columns" -> {{Automatic}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
            GridBoxSpacings->{"Columns" -> {{0.2}}, "Rows" -> {{0.5}}}]}, 
           Dynamic[Typeset`var$$],
           Alignment->Automatic,
           BaselinePosition->Baseline,
           DefaultBaseStyle->"OpenerView",
           ImageMargins->0,
           ImageSize->Automatic],
          Deployed->False,
          StripOnInput->False],
         OpenerView[{
           Tooltip[
           "Galois field functions", 
            "List of Galois field functions available -- You may wish to use \
SwitchStructureTo[Ring]"], 
           Column[{
             Tooltip[
              PasteButton[
               Defer[
                
                AbstractAlgebra`Master`AdditiveToMultiplicative[$CellContext` \
\[SelectionPlaceholder], $CellContext` \[Placeholder]]]], 
              Style[
              "AdditiveToMultiplicative[R, add] returns the multiplicative \
form of the element add (given in additive form) from the ringoid R \
(typically a Galois field).", 14]], 
             Tooltip[
              PasteButton[
               Defer[
                
                AbstractAlgebra`Master`FieldIrreducible[$CellContext` \
\[SelectionPlaceholder]]]], 
              Style[
              "FieldIrreducible[GF[n]] returns the irreducible polynomial \
used in  establishing the Galois field GF[n].", 14]], 
             Tooltip[
              PasteButton[
               Defer[
                
                AbstractAlgebra`Master`GF[$CellContext` \
\[SelectionPlaceholder]]]], 
              Style[
              "GF[n] returns the Galois field of order n (if n = p^d for some \
prime p and positive integer d), while GF[p, d] returns the field of order \
p^d (where p is the prime modulus and d is the degree of a irreducible \
polynomial to create the field). The field takes the form of a quotient ring \
of polynomials over Z[p] mod the ideal generated by the irreducible \
polynomial, and consequently consisting of polynomials of degree less than d. \
GF[n, poly] or GF[p, d, poly] returns the finite field using the specified \
irreducible polynomial. The option Indeterminate can be used to specify the \
symbol to be used for the indeterminate.", 14]], 
             Tooltip[
              PasteButton[
               Defer[
                
                AbstractAlgebra`Master`GF[$CellContext` \
\[SelectionPlaceholder], $CellContext` \[Placeholder]]]], 
              Style[
              "GF[n] returns the Galois field of order n (if n = p^d for some \
prime p and positive integer d), while GF[p, d] returns the field of order \
p^d (where p is the prime modulus and d is the degree of a irreducible \
polynomial to create the field). The field takes the form of a quotient ring \
of polynomials over Z[p] mod the ideal generated by the irreducible \
polynomial, and consequently consisting of polynomials of degree less than d. \
GF[n, poly] or GF[p, d, poly] returns the finite field using the specified \
irreducible polynomial. The option Indeterminate can be used to specify the \
symbol to be used for the indeterminate.", 14]], 
             Tooltip[
              PasteButton[
               Defer[
                
                AbstractAlgebra`Master`MultiplicativeToAdditive[$CellContext` \
\[SelectionPlaceholder], $CellContext` \[Placeholder]]]], 
              Style[
              "MultiplicativeToAdditive[R, mult] returns the additive form of \
the element mult, currently in multiplicative form, from the ringoid \
(typically a Galois field) R.", 14]], 
             Tooltip[
              PasteButton[
               Defer[
                
                AbstractAlgebra`Master`PrimitivePolynomials[$CellContext` \
\[SelectionPlaceholder]]]], 
              Style[
              "PrimitivePolynomials[GF[n]] returns the set of primitive \
polynomials in GF[n]. (Actually, GF[n] can be replaced by any ring R and this \
will return the set of elements that generate the multiplicative Groupoid of \
non-zero elements in R.)", 14]], 
             Tooltip[
              PasteButton[
               Defer[
                
                AbstractAlgebra`Master`TableOfPowers[$CellContext` \
\[SelectionPlaceholder]]]], 
              Style[
              "TableOfPowers[GF[n]] returns a table consisting of first the \
element {0, 0} followed by pairs of the form {poly^j, r} where r is an \
element in GF[n], poly is the 'simplest' primitive polynomial for this ring, \
and j is the power to which poly needs to be raised to be equal to r.", 
               14]]}]}, False]],
        DynamicModuleValues:>{}],
       Setting[#, {0}]& ]},
     {
      TagBox[
       DynamicModuleBox[{Typeset`var$$ = False}, 
        InterpretationBox[
         StyleBox[
          PaneSelectorBox[{False->GridBox[{
             {
              OpenerBox[Dynamic[Typeset`var$$],
               Appearance->Automatic,
               AutoAction->False,
               ContinuousAction->False,
               Enabled->Automatic], 
              TagBox[
               
               TooltipBox["\<\"\\!\\(\\*FormBox[\\n RowBox[{\\n  RowBox[{\\\"\
\[DoubleStruckCapitalZ]\\\", \\\"[\\\", SqrtBox[\\\"d\\\"], \\\"]\\\"}], \\\" \
\\\", \\\"functions\\\"}],\\n TraditionalForm]\\)\"\>",
                
                "\"List of \\!\\(\\*FormBox[\\n RowBox[{\\n  RowBox[{\\\"\
\[DoubleStruckCapitalZ]\\\", \\\"[\\\", SqrtBox[\\\"d\\\"], \\\"]\\\"}], \\\" \
\\\", \\\"functions\\\"}],\\n TraditionalForm]\\) available\"",
                LabelStyle->"TextStyling"],
               
               Annotation[#, 
                "List of \!\(\*FormBox[\n RowBox[{\n  RowBox[{\"\
\[DoubleStruckCapitalZ]\", \"[\", SqrtBox[\"d\"], \"]\"}], \" \", \"functions\
\"}],\n TraditionalForm]\) available", "Tooltip"]& ]}
            },
            AutoDelete->False,
            BaselinePosition->{1, 1},
            GridBoxAlignment->{"Columns" -> {{Left}}},
            GridBoxBackground->{"Columns" -> {{Automatic}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
            GridBoxSpacings->{"Columns" -> {{0.2}}, "Rows" -> {{0.5}}}], True->
           GridBox[{
             {
              OpenerBox[Dynamic[Typeset`var$$],
               Appearance->Automatic,
               AutoAction->False,
               ContinuousAction->False,
               Enabled->Automatic], 
              TagBox[
               
               TooltipBox["\<\"\\!\\(\\*FormBox[\\n RowBox[{\\n  RowBox[{\\\"\
\[DoubleStruckCapitalZ]\\\", \\\"[\\\", SqrtBox[\\\"d\\\"], \\\"]\\\"}], \\\" \
\\\", \\\"functions\\\"}],\\n TraditionalForm]\\)\"\>",
                
                "\"List of \\!\\(\\*FormBox[\\n RowBox[{\\n  RowBox[{\\\"\
\[DoubleStruckCapitalZ]\\\", \\\"[\\\", SqrtBox[\\\"d\\\"], \\\"]\\\"}], \\\" \
\\\", \\\"functions\\\"}],\\n TraditionalForm]\\) available\"",
                LabelStyle->"TextStyling"],
               
               Annotation[#, 
                "List of \!\(\*FormBox[\n RowBox[{\n  RowBox[{\"\
\[DoubleStruckCapitalZ]\", \"[\", SqrtBox[\"d\"], \"]\"}], \" \", \"functions\
\"}],\n TraditionalForm]\) available", "Tooltip"]& ]},
             {"", 
              PaneBox[
               TagBox[GridBox[{
                  {
                   TagBox[
                    TooltipBox[
                    ButtonBox[
                    RowBox[{
                    "IntegerDivisors", "[", "\[SelectionPlaceholder]", "]"}],
                    BaseStyle->"Paste"],
                    StyleBox[
                    "\"IntegerDivisors[n, opts] returns the divisors of the \
integer n, just as the built-in function Divisors[n] does. The options are \
Combine, NonTrivialOnly and DivisorsComplete. See these for more details.\"", 
                    14, StripOnInput -> False],
                    LabelStyle->"TextStyling"],
                    Annotation[#, 
                    Style[
                    "IntegerDivisors[n, opts] returns the divisors of the \
integer n, just as the built-in function Divisors[n] does. The options are \
Combine, NonTrivialOnly and DivisorsComplete. See these for more details.", 
                    14], "Tooltip"]& ]},
                  {
                   TagBox[
                    TooltipBox[
                    ButtonBox[
                    RowBox[{"ValuesHavingGivenNorm", "[", 
                    RowBox[{
                    "\[SelectionPlaceholder]", ",", "\[Placeholder]"}], "]"}],
                    
                    BaseStyle->"Paste"],
                    StyleBox[
                    "\"ValuesHavingGivenNorm[d, nrm], for negative d, returns \
the list (possibly empty) of values in Z[Sqrt[d]] that have the norm value of \
nrm. For positive d, ValuesHavingGivenNorm[d, nrm, iter] returns a (partial) \
list of values having the given norm obtained after iter number of iterations \
of an algorithm to search along the relevant hyperbola. The value for iter \
defaults to 50 if omitted. For positive d, the list is incomplete.\"", 14, 
                    StripOnInput -> False],
                    LabelStyle->"TextStyling"],
                    Annotation[#, 
                    Style[
                    "ValuesHavingGivenNorm[d, nrm], for negative d, returns \
the list (possibly empty) of values in Z[Sqrt[d]] that have the norm value of \
nrm. For positive d, ValuesHavingGivenNorm[d, nrm, iter] returns a (partial) \
list of values having the given norm obtained after iter number of iterations \
of an algorithm to search along the relevant hyperbola. The value for iter \
defaults to 50 if omitted. For positive d, the list is incomplete.", 14], 
                    "Tooltip"]& ]},
                  {
                   TagBox[
                    TooltipBox[
                    ButtonBox[
                    RowBox[{"ZdAssociatesQ", "[", 
                    RowBox[{
                    "\[SelectionPlaceholder]", ",", "\[Placeholder]", ",", 
                    "\[Placeholder]"}], "]"}],
                    BaseStyle->"Paste"],
                    StyleBox[
                    "\"ZdAssociatesQ[d, a, b] returns True if a and b are \
associates over \[DoubleStruckCapitalZ][\\!\\(\\@d\\)], and False \
otherwise.\"", 14, StripOnInput -> False],
                    LabelStyle->"TextStyling"],
                    Annotation[#, 
                    Style[
                    "ZdAssociatesQ[d, a, b] returns True if a and b are \
associates over \[DoubleStruckCapitalZ][\!\(\@d\)], and False otherwise.", 
                    14], "Tooltip"]& ]},
                  {
                   TagBox[
                    TooltipBox[
                    ButtonBox[
                    RowBox[{
                    "ZdConjugate", "[", "\[SelectionPlaceholder]", "]"}],
                    BaseStyle->"Paste"],
                    StyleBox[
                    "\"ZdConjugate[a + b Sqrt[d]] returns a - b \
\\!\\(\\@d\\), the conjugate in \[DoubleStruckCapitalZ][\\!\\(\\@d\\)].\"", 
                    14, StripOnInput -> False],
                    LabelStyle->"TextStyling"],
                    Annotation[#, 
                    Style[
                    "ZdConjugate[a + b Sqrt[d]] returns a - b \!\(\@d\), the \
conjugate in \[DoubleStruckCapitalZ][\!\(\@d\)].", 14], "Tooltip"]& ]},
                  {
                   TagBox[
                    TooltipBox[
                    ButtonBox[
                    RowBox[{"ZdDivide", "[", 
                    RowBox[{
                    "\[SelectionPlaceholder]", ",", "\[Placeholder]"}], "]"}],
                    
                    BaseStyle->"Paste"],
                    StyleBox[
                    "\"ZdDivide[x, y] returns the quotient x/y in the form r \
+ s \\!\\(\\@d\\) when x and y are both in \[DoubleStruckCapitalZ][\\!\\(\\@d\
\\)].\"", 14, StripOnInput -> False],
                    LabelStyle->"TextStyling"],
                    Annotation[#, 
                    Style[
                    "ZdDivide[x, y] returns the quotient x/y in the form r + \
s \!\(\@d\) when x and y are both in \[DoubleStruckCapitalZ][\!\(\@d\)].", 
                    14], "Tooltip"]& ]},
                  {
                   TagBox[
                    TooltipBox[
                    ButtonBox[
                    RowBox[{"ZdDividesQ", "[", 
                    RowBox[{
                    "\[SelectionPlaceholder]", ",", "\[Placeholder]", ",", 
                    "\[Placeholder]"}], "]"}],
                    BaseStyle->"Paste"],
                    StyleBox[
                    "\"ZdDividesQ[d, a, b] is equivalent to DividesQ[a, b, \
Radical \[Rule] d].\"", 14, StripOnInput -> False],
                    LabelStyle->"TextStyling"],
                    Annotation[#, 
                    Style[
                    "ZdDividesQ[d, a, b] is equivalent to DividesQ[a, b, \
Radical \[Rule] d].", 14], "Tooltip"]& ]},
                  {
                   TagBox[
                    TooltipBox[
                    ButtonBox[
                    RowBox[{"ZdDivisors", "[", 
                    RowBox[{
                    "\[SelectionPlaceholder]", ",", "\[Placeholder]"}], "]"}],
                    
                    BaseStyle->"Paste"],
                    StyleBox[
                    "\"ZdDivisors[d, x, (opts)], when d is negative, returns \
all the divisors of the number x in \[DoubleStruckCapitalZ][\\!\\(\\@d\\)], \
possibly restricted by the options in opts. When d is positive, ZdDivisors[d, \
x, max] returns all the divisors of x (possibly modified by opts) in \
\[DoubleStruckCapitalZ][\\!\\(\\@d\\)] whose norm is less than or equal to \
the norm of the integer max. Available options are Combine, NonTrivialOnly, \
and DivisorsComplete. See them for more details.\"", 14, StripOnInput -> 
                    False],
                    LabelStyle->"TextStyling"],
                    Annotation[#, 
                    Style[
                    "ZdDivisors[d, x, (opts)], when d is negative, returns \
all the divisors of the number x in \[DoubleStruckCapitalZ][\!\(\@d\)], \
possibly restricted by the options in opts. When d is positive, ZdDivisors[d, \
x, max] returns all the divisors of x (possibly modified by opts) in \
\[DoubleStruckCapitalZ][\!\(\@d\)] whose norm is less than or equal to the \
norm of the integer max. Available options are Combine, NonTrivialOnly, and \
DivisorsComplete. See them for more details.", 14], "Tooltip"]& ]},
                  {
                   TagBox[
                    TooltipBox[
                    ButtonBox[
                    RowBox[{"ZdNorm", "[", "\[SelectionPlaceholder]", "]"}],
                    BaseStyle->"Paste"],
                    StyleBox[
                    "\"ZdNorm[x] returns the norm of x as an element in \
\[DoubleStruckCapitalZ][\\!\\(\\@d\\)] for some d, which is the value |a^2 - \
d b^2| when x = a + b \\!\\(\\@d\\).\"", 14, StripOnInput -> False],
                    LabelStyle->"TextStyling"],
                    Annotation[#, 
                    Style[
                    "ZdNorm[x] returns the norm of x as an element in \
\[DoubleStruckCapitalZ][\!\(\@d\)] for some d, which is the value |a^2 - d \
b^2| when x = a + b \!\(\@d\).", 14], "Tooltip"]& ]},
                  {
                   TagBox[
                    TooltipBox[
                    ButtonBox[
                    RowBox[{"ZdIrreducibleQ", "[", 
                    RowBox[{
                    "\[SelectionPlaceholder]", ",", "\[Placeholder]"}], "]"}],
                    
                    BaseStyle->"Paste"],
                    StyleBox[
                    "\"ZdIrreducibleQ[d, x], for negative d, returns True if \
x is irreducible in \[DoubleStruckCapitalZ][\\!\\(\\@d\\)], and False \
otherwise.\"", 14, StripOnInput -> False],
                    LabelStyle->"TextStyling"],
                    Annotation[#, 
                    Style[
                    "ZdIrreducibleQ[d, x], for negative d, returns True if x \
is irreducible in \[DoubleStruckCapitalZ][\!\(\@d\)], and False otherwise.", 
                    14], "Tooltip"]& ]},
                  {
                   TagBox[
                    TooltipBox[
                    ButtonBox[
                    RowBox[{"ZdPossibleNormQ", "[", 
                    RowBox[{
                    "\[SelectionPlaceholder]", ",", "\[Placeholder]"}], "]"}],
                    
                    BaseStyle->"Paste"],
                    StyleBox[
                    "\"ZdPossibleNormQ[d, nrm], for negative d only, returns \
True if the value nrm can occur (i.e., it is possible) in \
\[DoubleStruckCapitalZ][\\!\\(\\@d\\)], and False otherwise.\"", 14, 
                    StripOnInput -> False],
                    LabelStyle->"TextStyling"],
                    Annotation[#, 
                    Style[
                    "ZdPossibleNormQ[d, nrm], for negative d only, returns \
True if the value nrm can occur (i.e., it is possible) in \
\[DoubleStruckCapitalZ][\!\(\@d\)], and False otherwise.", 14], "Tooltip"]& ]},
                  {
                   TagBox[
                    TooltipBox[
                    ButtonBox[
                    RowBox[{"ZdPossibleNorms", "[", 
                    RowBox[{
                    "\[SelectionPlaceholder]", ",", "\[Placeholder]"}], "]"}],
                    
                    BaseStyle->"Paste"],
                    StyleBox[
                    "\"ZdPossibleNorms[d, max], for negative d only, returns \
all the norms that can occur in \[DoubleStruckCapitalZ][\\!\\(\\@d\\)] that \
are less than or equal to max. This function has a Visual mode available.\"", 
                    14, StripOnInput -> False],
                    LabelStyle->"TextStyling"],
                    Annotation[#, 
                    Style[
                    "ZdPossibleNorms[d, max], for negative d only, returns \
all the norms that can occur in \[DoubleStruckCapitalZ][\!\(\@d\)] that are \
less than or equal to max. This function has a Visual mode available.", 14], 
                    "Tooltip"]& ]},
                  {
                   TagBox[
                    TooltipBox[
                    ButtonBox[
                    RowBox[{"ZdUnitQ", "[", 
                    RowBox[{
                    "\[SelectionPlaceholder]", ",", "\[Placeholder]"}], "]"}],
                    
                    BaseStyle->"Paste"],
                    StyleBox[
                    "\"ZdUnitQ[d, x] returns True if x is a unit in \
\[DoubleStruckCapitalZ][\\!\\(\\@d\\)], and False otherwise.\"", 14, 
                    StripOnInput -> False],
                    LabelStyle->"TextStyling"],
                    Annotation[#, 
                    Style[
                    "ZdUnitQ[d, x] returns True if x is a unit in \
\[DoubleStruckCapitalZ][\!\(\@d\)], and False otherwise.", 14], "Tooltip"]& ]},
                  {
                   TagBox[
                    TooltipBox[
                    ButtonBox[
                    RowBox[{"ZdQ", "[", "\[SelectionPlaceholder]", "]"}],
                    BaseStyle->"Paste"],
                    StyleBox[
                    "\"ZdQ[x] returns True if x can be viewed as an element \
in \[DoubleStruckCapitalZ][\\!\\(\\@d\\)] for some d, and False otherwise.\"",
                     14, StripOnInput -> False],
                    LabelStyle->"TextStyling"],
                    Annotation[#, 
                    Style[
                    "ZdQ[x] returns True if x can be viewed as an element in \
\[DoubleStruckCapitalZ][\!\(\@d\)] for some d, and False otherwise.", 14], 
                    "Tooltip"]& ]}
                 },
                 GridBoxAlignment->{"Columns" -> {{Left}}},
                 
                 GridBoxItemSize->{
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
                "Column"],
               ImageMargins->0]}
            },
            AutoDelete->False,
            BaselinePosition->{1, 1},
            GridBoxAlignment->{"Columns" -> {{Left}}},
            GridBoxBackground->{"Columns" -> {{Automatic}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
            GridBoxSpacings->{"Columns" -> {{0.2}}, "Rows" -> {{0.5}}}]}, 
           Dynamic[Typeset`var$$],
           Alignment->Automatic,
           BaselinePosition->Baseline,
           DefaultBaseStyle->"OpenerView",
           ImageMargins->0,
           ImageSize->Automatic],
          Deployed->False,
          StripOnInput->False],
         OpenerView[{
           Tooltip[
           "\!\(\*FormBox[\n RowBox[{\n  RowBox[{\"\[DoubleStruckCapitalZ]\", \
\"[\", SqrtBox[\"d\"], \"]\"}], \" \", \"functions\"}],\n TraditionalForm]\)",
             "List of \!\(\*FormBox[\n RowBox[{\n  RowBox[{\"\
\[DoubleStruckCapitalZ]\", \"[\", SqrtBox[\"d\"], \"]\"}], \" \", \"functions\
\"}],\n TraditionalForm]\) available"], 
           Column[{
             Tooltip[
              PasteButton[
               Defer[
                
                AbstractAlgebra`Master`IntegerDivisors[$CellContext` \
\[SelectionPlaceholder]]]], 
              Style[
              "IntegerDivisors[n, opts] returns the divisors of the integer \
n, just as the built-in function Divisors[n] does. The options are Combine, \
NonTrivialOnly and DivisorsComplete. See these for more details.", 14]], 
             Tooltip[
              PasteButton[
               Defer[
                
                AbstractAlgebra`Master`ValuesHavingGivenNorm[$CellContext` \
\[SelectionPlaceholder], $CellContext` \[Placeholder]]]], 
              Style[
              "ValuesHavingGivenNorm[d, nrm], for negative d, returns the \
list (possibly empty) of values in Z[Sqrt[d]] that have the norm value of \
nrm. For positive d, ValuesHavingGivenNorm[d, nrm, iter] returns a (partial) \
list of values having the given norm obtained after iter number of iterations \
of an algorithm to search along the relevant hyperbola. The value for iter \
defaults to 50 if omitted. For positive d, the list is incomplete.", 14]], 
             Tooltip[
              PasteButton[
               Defer[
                
                AbstractAlgebra`Master`ZdAssociatesQ[$CellContext` \
\[SelectionPlaceholder], $CellContext` \[Placeholder], $CellContext` \
\[Placeholder]]]], 
              Style[
              "ZdAssociatesQ[d, a, b] returns True if a and b are associates \
over \[DoubleStruckCapitalZ][\!\(\@d\)], and False otherwise.", 14]], 
             Tooltip[
              PasteButton[
               Defer[
                
                AbstractAlgebra`Master`ZdConjugate[$CellContext` \
\[SelectionPlaceholder]]]], 
              Style[
              "ZdConjugate[a + b Sqrt[d]] returns a - b \!\(\@d\), the \
conjugate in \[DoubleStruckCapitalZ][\!\(\@d\)].", 14]], 
             Tooltip[
              PasteButton[
               Defer[
                
                AbstractAlgebra`Master`ZdDivide[$CellContext` \
\[SelectionPlaceholder], $CellContext` \[Placeholder]]]], 
              Style[
              "ZdDivide[x, y] returns the quotient x/y in the form r + s \!\(\
\@d\) when x and y are both in \[DoubleStruckCapitalZ][\!\(\@d\)].", 14]], 
             Tooltip[
              PasteButton[
               Defer[
                
                AbstractAlgebra`Master`ZdDividesQ[$CellContext` \
\[SelectionPlaceholder], $CellContext` \[Placeholder], $CellContext` \
\[Placeholder]]]], 
              Style[
              "ZdDividesQ[d, a, b] is equivalent to DividesQ[a, b, Radical \
\[Rule] d].", 14]], 
             Tooltip[
              PasteButton[
               Defer[
                
                AbstractAlgebra`Master`ZdDivisors[$CellContext` \
\[SelectionPlaceholder], $CellContext` \[Placeholder]]]], 
              Style[
              "ZdDivisors[d, x, (opts)], when d is negative, returns all the \
divisors of the number x in \[DoubleStruckCapitalZ][\!\(\@d\)], possibly \
restricted by the options in opts. When d is positive, ZdDivisors[d, x, max] \
returns all the divisors of x (possibly modified by opts) in \
\[DoubleStruckCapitalZ][\!\(\@d\)] whose norm is less than or equal to the \
norm of the integer max. Available options are Combine, NonTrivialOnly, and \
DivisorsComplete. See them for more details.", 14]], 
             Tooltip[
              PasteButton[
               Defer[
                
                AbstractAlgebra`Master`ZdNorm[$CellContext` \
\[SelectionPlaceholder]]]], 
              Style[
              "ZdNorm[x] returns the norm of x as an element in \
\[DoubleStruckCapitalZ][\!\(\@d\)] for some d, which is the value |a^2 - d \
b^2| when x = a + b \!\(\@d\).", 14]], 
             Tooltip[
              PasteButton[
               Defer[
                
                AbstractAlgebra`Master`ZdIrreducibleQ[$CellContext` \
\[SelectionPlaceholder], $CellContext` \[Placeholder]]]], 
              Style[
              "ZdIrreducibleQ[d, x], for negative d, returns True if x is \
irreducible in \[DoubleStruckCapitalZ][\!\(\@d\)], and False otherwise.", 
               14]], 
             Tooltip[
              PasteButton[
               Defer[
                
                AbstractAlgebra`Master`ZdPossibleNormQ[$CellContext` \
\[SelectionPlaceholder], $CellContext` \[Placeholder]]]], 
              Style[
              "ZdPossibleNormQ[d, nrm], for negative d only, returns True if \
the value nrm can occur (i.e., it is possible) in \
\[DoubleStruckCapitalZ][\!\(\@d\)], and False otherwise.", 14]], 
             Tooltip[
              PasteButton[
               Defer[
                
                AbstractAlgebra`Master`ZdPossibleNorms[$CellContext` \
\[SelectionPlaceholder], $CellContext` \[Placeholder]]]], 
              Style[
              "ZdPossibleNorms[d, max], for negative d only, returns all the \
norms that can occur in \[DoubleStruckCapitalZ][\!\(\@d\)] that are less than \
or equal to max. This function has a Visual mode available.", 14]], 
             Tooltip[
              PasteButton[
               Defer[
                
                AbstractAlgebra`Master`ZdUnitQ[$CellContext` \
\[SelectionPlaceholder], $CellContext` \[Placeholder]]]], 
              Style[
              "ZdUnitQ[d, x] returns True if x is a unit in \
\[DoubleStruckCapitalZ][\!\(\@d\)], and False otherwise.", 14]], 
             Tooltip[
              PasteButton[
               Defer[
                
                AbstractAlgebra`Master`ZdQ[$CellContext` \
\[SelectionPlaceholder]]]], 
              Style[
              "ZdQ[x] returns True if x can be viewed as an element in \
\[DoubleStruckCapitalZ][\!\(\@d\)] for some d, and False otherwise.", 14]]}]},
           False]],
        DynamicModuleValues:>{}],
       Setting[#, {0}]& ]},
     {
      TagBox[
       DynamicModuleBox[{Typeset`var$$ = True}, 
        InterpretationBox[
         StyleBox[
          PaneSelectorBox[{False->GridBox[{
             {
              OpenerBox[Dynamic[Typeset`var$$],
               Appearance->Automatic,
               AutoAction->False,
               ContinuousAction->False,
               Enabled->Automatic], 
              TagBox[
               TooltipBox[
                
                StyleBox["\<\"\\!\\(\\*FormBox[\\\"Calculators\\\",\\n \
TraditionalForm]\\)\"\>",
                 StripOnInput->False,
                 FrontFaceColor->RGBColor[0, 0, 1],
                 BackFaceColor->RGBColor[0, 0, 1],
                 GraphicsColor->RGBColor[0, 0, 1],
                 FontSlant->Italic,
                 FontColor->RGBColor[0, 0, 1]],
                "\"List of calculators available\"",
                LabelStyle->"TextStyling"],
               Annotation[#, "List of calculators available", "Tooltip"]& ]}
            },
            AutoDelete->False,
            BaselinePosition->{1, 1},
            GridBoxAlignment->{"Columns" -> {{Left}}},
            GridBoxBackground->{"Columns" -> {{Automatic}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
            GridBoxSpacings->{"Columns" -> {{0.2}}, "Rows" -> {{0.5}}}], True->
           GridBox[{
             {
              OpenerBox[Dynamic[Typeset`var$$],
               Appearance->Automatic,
               AutoAction->False,
               ContinuousAction->False,
               Enabled->Automatic], 
              TagBox[
               TooltipBox[
                
                StyleBox["\<\"\\!\\(\\*FormBox[\\\"Calculators\\\",\\n \
TraditionalForm]\\)\"\>",
                 StripOnInput->False,
                 FrontFaceColor->RGBColor[0, 0, 1],
                 BackFaceColor->RGBColor[0, 0, 1],
                 GraphicsColor->RGBColor[0, 0, 1],
                 FontSlant->Italic,
                 FontColor->RGBColor[0, 0, 1]],
                "\"List of calculators available\"",
                LabelStyle->"TextStyling"],
               Annotation[#, "List of calculators available", "Tooltip"]& ]},
             {"", 
              PaneBox[
               TagBox[GridBox[{
                  {
                   TagBox[
                    TooltipBox[
                    TagBox[
                    ButtonBox[
                    
                    PaneSelectorBox[{
                    False->"\<\"Properties and calculator\"\>", True->
                    
                    StyleBox["\<\"Properties and calculator\"\>", 
                    "HyperlinkActive"]}, Dynamic[
                    CurrentValue["MouseOver"]],
                    BaseStyle->{"Hyperlink"},
                    BaselinePosition->Baseline,
                    FrameMargins->0,
                    ImageSize->Automatic],
                    BaseStyle->"Hyperlink",
                    ButtonData->{
                    FrontEnd`FileName[{
                    ParentDirectory[
                    ParentDirectory[]], "Palettes", "PropertiesPalette.nb"}], 
                    None},
                    ButtonNote->ButtonData],
                    Annotation[#, {
                    FrontEnd`FileName[{
                    ParentDirectory[
                    ParentDirectory[]], "Palettes", "PropertiesPalette.nb"}], 
                    None}, "Hyperlink"]& ],
                    
                    "\"Means of looking at properties of groups and group \
elements\"",
                    LabelStyle->"TextStyling"],
                    
                    Annotation[#, 
                    "Means of looking at properties of groups and group \
elements", "Tooltip"]& ]},
                  {
                   TagBox[
                    TooltipBox[
                    TagBox[
                    ButtonBox[
                    
                    PaneSelectorBox[{False->"\<\"Group Calculator\"\>", True->
                    
                    StyleBox["\<\"Group Calculator\"\>", "HyperlinkActive"]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]],
                    BaseStyle->{"Hyperlink"},
                    BaselinePosition->Baseline,
                    FrameMargins->0,
                    ImageSize->Automatic],
                    BaseStyle->"Hyperlink",
                    ButtonData->{
                    FrontEnd`FileName[{
                    ParentDirectory[
                    ParentDirectory[]], "Palettes", "AAGroupCalculator.nb"}], 
                    None},
                    ButtonNote->ButtonData],
                    Annotation[#, {
                    FrontEnd`FileName[{
                    ParentDirectory[
                    ParentDirectory[]], "Palettes", "AAGroupCalculator.nb"}], 
                    None}, "Hyperlink"]& ],
                    "\"Means of doing group calculations\"",
                    LabelStyle->"TextStyling"],
                    
                    Annotation[#, "Means of doing group calculations", 
                    "Tooltip"]& ]},
                  {
                   TagBox[
                    TooltipBox[
                    TagBox[
                    ButtonBox[
                    PaneSelectorBox[{False->"\<\"Morphoid Maker\"\>", True->
                    StyleBox["\<\"Morphoid Maker\"\>", "HyperlinkActive"]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]],
                    BaseStyle->{"Hyperlink"},
                    BaselinePosition->Baseline,
                    FrameMargins->0,
                    ImageSize->Automatic],
                    BaseStyle->"Hyperlink",
                    ButtonData->{
                    FrontEnd`FileName[{
                    ParentDirectory[
                    ParentDirectory[]], "Palettes", "MorphoidPalette.nb"}], 
                    None},
                    ButtonNote->ButtonData],
                    Annotation[#, {
                    FrontEnd`FileName[{
                    ParentDirectory[
                    ParentDirectory[]], "Palettes", "MorphoidPalette.nb"}], 
                    None}, "Hyperlink"]& ],
                    "\"Means of making a morphoid\"",
                    LabelStyle->"TextStyling"],
                    
                    Annotation[#, "Means of making a morphoid", 
                    "Tooltip"]& ]}
                 },
                 GridBoxAlignment->{"Columns" -> {{Left}}},
                 
                 GridBoxItemSize->{
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
                "Column"],
               ImageMargins->0]}
            },
            AutoDelete->False,
            BaselinePosition->{1, 1},
            GridBoxAlignment->{"Columns" -> {{Left}}},
            GridBoxBackground->{"Columns" -> {{Automatic}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
            GridBoxSpacings->{"Columns" -> {{0.2}}, "Rows" -> {{0.5}}}]}, 
           Dynamic[Typeset`var$$],
           Alignment->Automatic,
           BaselinePosition->Baseline,
           DefaultBaseStyle->"OpenerView",
           ImageMargins->0,
           ImageSize->Automatic],
          Deployed->False,
          StripOnInput->False],
         OpenerView[{
           Tooltip[
            Style["\!\(\*FormBox[\"Calculators\",\n TraditionalForm]\)", 
             RGBColor[0, 0, 1], Italic], "List of calculators available"], 
           Column[{
             Tooltip[
              Hyperlink["Properties and calculator", {
                FrontEnd`FileName[{
                  ParentDirectory[
                   ParentDirectory[]], "Palettes", "PropertiesPalette.nb"}], 
                None}], 
              "Means of looking at properties of groups and group elements"], 
             
             Tooltip[
              Hyperlink["Group Calculator", {
                FrontEnd`FileName[{
                  ParentDirectory[
                   ParentDirectory[]], "Palettes", "AAGroupCalculator.nb"}], 
                None}], "Means of doing group calculations"], 
             Tooltip[
              Hyperlink["Morphoid Maker", {
                FrontEnd`FileName[{
                  ParentDirectory[
                   ParentDirectory[]], "Palettes", "MorphoidPalette.nb"}], 
                None}], "Means of making a morphoid"]}]}, False]],
        DynamicModuleValues:>{}],
       Setting[#, {0}]& ]},
     {
      TagBox[
       DynamicModuleBox[{Typeset`var$$ = True}, 
        InterpretationBox[
         StyleBox[
          PaneSelectorBox[{False->GridBox[{
             {
              OpenerBox[Dynamic[Typeset`var$$],
               Appearance->Automatic,
               AutoAction->False,
               ContinuousAction->False,
               Enabled->Automatic], 
              TagBox[
               TooltipBox[
                
                StyleBox["\<\"\\!\\(\\*FormBox[\\n RowBox[{\\\"EAAM\\\", \\\" \
\\\", \\\"Labs\\\"}],\\n TraditionalForm]\\)\"\>",
                 StripOnInput->False,
                 FrontFaceColor->RGBColor[0, 0, 1],
                 BackFaceColor->RGBColor[0, 0, 1],
                 GraphicsColor->RGBColor[0, 0, 1],
                 FontSlant->Italic,
                 FontColor->RGBColor[0, 0, 1]],
                
                "\"List (and description) of labs in Exploring Abstract \
Algebra with Mathematica\"",
                LabelStyle->"TextStyling"],
               
               Annotation[#, 
                "List (and description) of labs in Exploring Abstract Algebra \
with Mathematica", "Tooltip"]& ]}
            },
            AutoDelete->False,
            BaselinePosition->{1, 1},
            GridBoxAlignment->{"Columns" -> {{Left}}},
            GridBoxBackground->{"Columns" -> {{Automatic}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
            GridBoxSpacings->{"Columns" -> {{0.2}}, "Rows" -> {{0.5}}}], True->
           GridBox[{
             {
              OpenerBox[Dynamic[Typeset`var$$],
               Appearance->Automatic,
               AutoAction->False,
               ContinuousAction->False,
               Enabled->Automatic], 
              TagBox[
               TooltipBox[
                
                StyleBox["\<\"\\!\\(\\*FormBox[\\n RowBox[{\\\"EAAM\\\", \\\" \
\\\", \\\"Labs\\\"}],\\n TraditionalForm]\\)\"\>",
                 StripOnInput->False,
                 FrontFaceColor->RGBColor[0, 0, 1],
                 BackFaceColor->RGBColor[0, 0, 1],
                 GraphicsColor->RGBColor[0, 0, 1],
                 FontSlant->Italic,
                 FontColor->RGBColor[0, 0, 1]],
                
                "\"List (and description) of labs in Exploring Abstract \
Algebra with Mathematica\"",
                LabelStyle->"TextStyling"],
               
               Annotation[#, 
                "List (and description) of labs in Exploring Abstract Algebra \
with Mathematica", "Tooltip"]& ]},
             {"", 
              PaneBox[
               TagBox[GridBox[{
                  {
                   TagBox[
                    DynamicModuleBox[{Typeset`var$$ = True}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False->GridBox[{
                    {
                    OpenerBox[Dynamic[Typeset`var$$],
                    Appearance->Automatic,
                    AutoAction->False,
                    ContinuousAction->False,
                    Enabled->Automatic], 
                    StyleBox["\<\"Group Labs\"\>",
                    StripOnInput->False,
                    FrontFaceColor->RGBColor[0, 0, 1],
                    BackFaceColor->RGBColor[0, 0, 1],
                    GraphicsColor->RGBColor[0, 0, 1],
                    FontSlant->Italic,
                    FontColor->RGBColor[0, 0, 1]]}
                    },
                    AutoDelete->False,
                    BaselinePosition->{1, 1},
                    GridBoxAlignment->{"Columns" -> {{Left}}},
                    GridBoxBackground->{"Columns" -> {{Automatic}}},
                    
                    GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
                    
                    GridBoxSpacings->{
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}], True->
                    GridBox[{
                    {
                    OpenerBox[Dynamic[Typeset`var$$],
                    Appearance->Automatic,
                    AutoAction->False,
                    ContinuousAction->False,
                    Enabled->Automatic], 
                    StyleBox["\<\"Group Labs\"\>",
                    StripOnInput->False,
                    FrontFaceColor->RGBColor[0, 0, 1],
                    BackFaceColor->RGBColor[0, 0, 1],
                    GraphicsColor->RGBColor[0, 0, 1],
                    FontSlant->Italic,
                    FontColor->RGBColor[0, 0, 1]]},
                    {"", 
                    PaneBox[
                    TagBox[GridBox[{
                    {
                    TagBox[
                    TooltipBox[
                    TagBox[
                    ButtonBox[
                    
                    PaneSelectorBox[{
                    False->"\<\"1. Using Symmetry to Uncover a Group\"\>", 
                    True->
                    
                    StyleBox["\<\"1. Using Symmetry to Uncover a Group\"\>", 
                    "HyperlinkActive"]}, Dynamic[
                    CurrentValue["MouseOver"]],
                    BaseStyle->{"Hyperlink"},
                    BaselinePosition->Baseline,
                    FrameMargins->0,
                    ImageSize->Automatic],
                    BaseStyle->"Hyperlink",
                    ButtonData->{
                    FrontEnd`FileName[{
                    ParentDirectory[
                    ParentDirectory[]], "GroupLabs", "GrpLab01"}], None},
                    ButtonNote->ButtonData],
                    Annotation[#, {
                    FrontEnd`FileName[{
                    ParentDirectory[
                    ParentDirectory[]], "GroupLabs", "GrpLab01"}], None}, 
                    "Hyperlink"]& ],
                    
                    "\"This lab explores the underlying definition of a group \
by looking at the symmetries of an equilateral triangle.\"",
                    LabelStyle->"TextStyling"],
                    
                    Annotation[#, 
                    "This lab explores the underlying definition of a group \
by looking at the symmetries of an equilateral triangle.", "Tooltip"]& ]},
                    {
                    TagBox[
                    TooltipBox[
                    TagBox[
                    ButtonBox[
                    
                    PaneSelectorBox[{
                    False->"\<\"2. Determining the Symmetry Group of a Given \
Figure\"\>", True->
                    
                    StyleBox["\<\"2. Determining the Symmetry Group of a \
Given Figure\"\>", "HyperlinkActive"]}, Dynamic[
                    CurrentValue["MouseOver"]],
                    BaseStyle->{"Hyperlink"},
                    BaselinePosition->Baseline,
                    FrameMargins->0,
                    ImageSize->Automatic],
                    BaseStyle->"Hyperlink",
                    ButtonData->{
                    FrontEnd`FileName[{
                    ParentDirectory[
                    ParentDirectory[]], "GroupLabs", "GrpLab02.nb"}], None},
                    ButtonNote->ButtonData],
                    Annotation[#, {
                    FrontEnd`FileName[{
                    ParentDirectory[
                    ParentDirectory[]], "GroupLabs", "GrpLab02.nb"}], None}, 
                    "Hyperlink"]& ],
                    
                    "\"The focus of this lab is to determine the symmetry \
group of a figure chosen randomly from a list of regular polygons and \
\[OpenCurlyDoubleQuote]cyclic\[CloseCurlyDoubleQuote] objects.\"",
                    LabelStyle->"TextStyling"],
                    
                    Annotation[#, 
                    "The focus of this lab is to determine the symmetry group \
of a figure chosen randomly from a list of regular polygons and \
\[OpenCurlyDoubleQuote]cyclic\[CloseCurlyDoubleQuote] objects.", 
                    "Tooltip"]& ]},
                    {
                    TagBox[
                    TooltipBox[
                    TagBox[
                    ButtonBox[
                    
                    PaneSelectorBox[{False->"\<\"3. Is This a Group?\"\>", 
                    True->
                    
                    StyleBox["\<\"3. Is This a Group?\"\>", 
                    "HyperlinkActive"]}, Dynamic[
                    CurrentValue["MouseOver"]],
                    BaseStyle->{"Hyperlink"},
                    BaselinePosition->Baseline,
                    FrameMargins->0,
                    ImageSize->Automatic],
                    BaseStyle->"Hyperlink",
                    ButtonData->{
                    FrontEnd`FileName[{
                    ParentDirectory[
                    ParentDirectory[]], "GroupLabs", "GrpLab03.nb"}], None},
                    ButtonNote->ButtonData],
                    Annotation[#, {
                    FrontEnd`FileName[{
                    ParentDirectory[
                    ParentDirectory[]], "GroupLabs", "GrpLab03.nb"}], None}, 
                    "Hyperlink"]& ],
                    
                    "\"This lab randomly presents a Cayley table of one of 20 \
\[OpenCurlyDoubleQuote]possible groups.\[CloseCurlyDoubleQuote] The goal is \
to determine which of the defining properties of a group are reflected in the \
Cayley table to determine which are groups.\"",
                    LabelStyle->"TextStyling"],
                    
                    Annotation[#, 
                    "This lab randomly presents a Cayley table of one of 20 \
\[OpenCurlyDoubleQuote]possible groups.\[CloseCurlyDoubleQuote] The goal is \
to determine which of the defining properties of a group are reflected in the \
Cayley table to determine which are groups.", "Tooltip"]& ]},
                    {
                    TagBox[
                    TooltipBox[
                    TagBox[
                    ButtonBox[
                    
                    PaneSelectorBox[{
                    False->"\<\"4. Let\[CloseCurlyQuote]s Get These Orders \
Straight\"\>", True->
                    
                    StyleBox["\<\"4. Let\[CloseCurlyQuote]s Get These Orders \
Straight\"\>", "HyperlinkActive"]}, Dynamic[
                    CurrentValue["MouseOver"]],
                    BaseStyle->{"Hyperlink"},
                    BaselinePosition->Baseline,
                    FrameMargins->0,
                    ImageSize->Automatic],
                    BaseStyle->"Hyperlink",
                    ButtonData->{
                    FrontEnd`FileName[{
                    ParentDirectory[
                    ParentDirectory[]], "GroupLabs", "GrpLab04.nb"}], None},
                    ButtonNote->ButtonData],
                    Annotation[#, {
                    FrontEnd`FileName[{
                    ParentDirectory[
                    ParentDirectory[]], "GroupLabs", "GrpLab04.nb"}], None}, 
                    "Hyperlink"]& ],
                    
                    "\"This lab looks at the order of an element and its \
inverse, the distribution of the orders of the elements in \
\\!\\(\\*SubscriptBox[\\(\[DoubleStruckCapitalZ]\\), \\(n\\)]\\) investigates \
the probability that an element in \\!\\(\\*SubscriptBox[\\(\
\[DoubleStruckCapitalZ]\\), \\(n\\)]\\) has order n and also explores the \
group \\!\\(\\*SubscriptBox[\\(U\\), \\(n\\)]\\) (the units in \
\\!\\(\\*SubscriptBox[\\(\[DoubleStruckCapitalZ]\\), \\(n\\)]\\)).\"",
                    LabelStyle->"TextStyling"],
                    
                    Annotation[#, 
                    "This lab looks at the order of an element and its \
inverse, the distribution of the orders of the elements in \
\!\(\*SubscriptBox[\(\[DoubleStruckCapitalZ]\), \(n\)]\) investigates the \
probability that an element in \
\!\(\*SubscriptBox[\(\[DoubleStruckCapitalZ]\), \(n\)]\) has order n and also \
explores the group \!\(\*SubscriptBox[\(U\), \(n\)]\) (the units in \
\!\(\*SubscriptBox[\(\[DoubleStruckCapitalZ]\), \(n\)]\)).", "Tooltip"]& ]},
                    {
                    TagBox[
                    TooltipBox[
                    TagBox[
                    ButtonBox[
                    
                    PaneSelectorBox[{
                    False->"\<\"5. Subversively Grouping Our Elements\"\>", 
                    True->
                    
                    StyleBox["\<\"5. Subversively Grouping Our Elements\"\>", 
                    "HyperlinkActive"]}, Dynamic[
                    CurrentValue["MouseOver"]],
                    BaseStyle->{"Hyperlink"},
                    BaselinePosition->Baseline,
                    FrameMargins->0,
                    ImageSize->Automatic],
                    BaseStyle->"Hyperlink",
                    ButtonData->{
                    FrontEnd`FileName[{
                    ParentDirectory[
                    ParentDirectory[]], "GroupLabs", "GrpLab05.nb"}], None},
                    ButtonNote->ButtonData],
                    Annotation[#, {
                    FrontEnd`FileName[{
                    ParentDirectory[
                    ParentDirectory[]], "GroupLabs", "GrpLab05.nb"}], None}, 
                    "Hyperlink"]& ],
                    
                    "\"This lab explores the notion of a subgroup, including \
looking at the subgroups of \
\\!\\(\\*SubscriptBox[\\(\[DoubleStruckCapitalZ]\\), \\(n\\)]\\) and \
\\!\\(\\*SubscriptBox[\\(U\\), \\(n\\)]\\), calculating the probability that \
a random subset of \\!\\(\\*SubscriptBox[\\(\[DoubleStruckCapitalZ]\\), \
\\(n\\)]\\) is a subgroup, and determining what elements in a subset are \
necessary so that the closure yields the whole group.\"",
                    LabelStyle->"TextStyling"],
                    
                    Annotation[#, 
                    "This lab explores the notion of a subgroup, including \
looking at the subgroups of \!\(\*SubscriptBox[\(\[DoubleStruckCapitalZ]\), \
\(n\)]\) and \!\(\*SubscriptBox[\(U\), \(n\)]\), calculating the probability \
that a random subset of \!\(\*SubscriptBox[\(\[DoubleStruckCapitalZ]\), \
\(n\)]\) is a subgroup, and determining what elements in a subset are \
necessary so that the closure yields the whole group.", "Tooltip"]& ]},
                    {
                    TagBox[
                    TooltipBox[
                    TagBox[
                    ButtonBox[
                    
                    PaneSelectorBox[{
                    False->"\<\"6. Cycling Through the Groups\"\>", True->
                    StyleBox["\<\"6. Cycling Through the Groups\"\>", 
                    "HyperlinkActive"]}, Dynamic[
                    CurrentValue["MouseOver"]],
                    BaseStyle->{"Hyperlink"},
                    BaselinePosition->Baseline,
                    FrameMargins->0,
                    ImageSize->Automatic],
                    BaseStyle->"Hyperlink",
                    ButtonData->{
                    FrontEnd`FileName[{
                    ParentDirectory[
                    ParentDirectory[]], "GroupLabs", "GrpLab06.nb"}], None},
                    ButtonNote->ButtonData],
                    Annotation[#, {
                    FrontEnd`FileName[{
                    ParentDirectory[
                    ParentDirectory[]], "GroupLabs", "GrpLab06.nb"}], None}, 
                    "Hyperlink"]& ],
                    
                    "\"Here we focus on the notion of a cyclic group and its \
subgroup structure. We also look at determining when the direct sum of \\!\\(\
\\*SubscriptBox[\\(\[DoubleStruckCapitalZ]\\), \\(n\\)]\\) and \
\\!\\(\\*SubscriptBox[\\(\[DoubleStruckCapitalZ]\\), \\(n\\)]\\) is a cyclic \
group.\"",
                    LabelStyle->"TextStyling"],
                    
                    Annotation[#, 
                    "Here we focus on the notion of a cyclic group and its \
subgroup structure. We also look at determining when the direct sum of \
\!\(\*SubscriptBox[\(\[DoubleStruckCapitalZ]\), \(n\)]\) and \
\!\(\*SubscriptBox[\(\[DoubleStruckCapitalZ]\), \(n\)]\) is a cyclic group.", 
                    "Tooltip"]& ]},
                    {
                    TagBox[
                    TooltipBox[
                    TagBox[
                    ButtonBox[
                    PaneSelectorBox[{False->"\<\"7. Permutations\"\>", True->
                    StyleBox["\<\"7. Permutations\"\>", "HyperlinkActive"]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]],
                    BaseStyle->{"Hyperlink"},
                    BaselinePosition->Baseline,
                    FrameMargins->0,
                    ImageSize->Automatic],
                    BaseStyle->"Hyperlink",
                    ButtonData->{
                    FrontEnd`FileName[{
                    ParentDirectory[
                    ParentDirectory[]], "GroupLabs", "GrpLab07.nb"}], None},
                    ButtonNote->ButtonData],
                    Annotation[#, {
                    FrontEnd`FileName[{
                    ParentDirectory[
                    ParentDirectory[]], "GroupLabs", "GrpLab07.nb"}], None}, 
                    "Hyperlink"]& ],
                    
                    "\"This lab looks at the definitions of a permutation, \
cycle and transposition, how to perform computations with each of these \
structures, and explores their properties and relations to each other. We \
also look at some applications of permutations.\"",
                    LabelStyle->"TextStyling"],
                    
                    Annotation[#, 
                    "This lab looks at the definitions of a permutation, \
cycle and transposition, how to perform computations with each of these \
structures, and explores their properties and relations to each other. We \
also look at some applications of permutations.", "Tooltip"]& ]},
                    {
                    TagBox[
                    TooltipBox[
                    TagBox[
                    ButtonBox[
                    PaneSelectorBox[{False->"\<\"8. Isomorphisms\"\>", True->
                    StyleBox["\<\"8. Isomorphisms\"\>", "HyperlinkActive"]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]],
                    BaseStyle->{"Hyperlink"},
                    BaselinePosition->Baseline,
                    FrameMargins->0,
                    ImageSize->Automatic],
                    BaseStyle->"Hyperlink",
                    ButtonData->{
                    FrontEnd`FileName[{
                    ParentDirectory[
                    ParentDirectory[]], "GroupLabs", "GrpLab08.nb"}], None},
                    ButtonNote->ButtonData],
                    Annotation[#, {
                    FrontEnd`FileName[{
                    ParentDirectory[
                    ParentDirectory[]], "GroupLabs", "GrpLab08.nb"}], None}, 
                    "Hyperlink"]& ],
                    
                    "\"Here we look at the definition of an isomorphism and \
then use various visual mechanisms to try to determine when two groups are or \
are not isomorphic. A Morphoid is introduced here.\"",
                    LabelStyle->"TextStyling"],
                    
                    Annotation[#, 
                    "Here we look at the definition of an isomorphism and \
then use various visual mechanisms to try to determine when two groups are or \
are not isomorphic. A Morphoid is introduced here.", "Tooltip"]& ]},
                    {
                    TagBox[
                    TooltipBox[
                    TagBox[
                    ButtonBox[
                    
                    PaneSelectorBox[{False->"\<\"9. Automorphisms\"\>", True->
                    
                    StyleBox["\<\"9. Automorphisms\"\>", "HyperlinkActive"]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]],
                    BaseStyle->{"Hyperlink"},
                    BaselinePosition->Baseline,
                    FrameMargins->0,
                    ImageSize->Automatic],
                    BaseStyle->"Hyperlink",
                    ButtonData->{
                    FrontEnd`FileName[{
                    ParentDirectory[
                    ParentDirectory[]], "GroupLabs", "GrpLab09.nb"}], None},
                    ButtonNote->ButtonData],
                    Annotation[#, {
                    FrontEnd`FileName[{
                    ParentDirectory[
                    ParentDirectory[]], "GroupLabs", "GrpLab09.nb"}], None}, 
                    "Hyperlink"]& ],
                    
                    "\"In this lab, we look at the group of automorphisms of \
\\!\\(\\*SubscriptBox[\\(\[DoubleStruckCapitalZ]\\), \\(n\\)]\\) and also \
look at inner automorphisms.\"",
                    LabelStyle->"TextStyling"],
                    
                    Annotation[#, 
                    "In this lab, we look at the group of automorphisms of \!\
\(\*SubscriptBox[\(\[DoubleStruckCapitalZ]\), \(n\)]\) and also look at inner \
automorphisms.", "Tooltip"]& ]},
                    {
                    TagBox[
                    TooltipBox[
                    TagBox[
                    ButtonBox[
                    
                    PaneSelectorBox[{False->"\<\"10. Direct Products\"\>", 
                    True->
                    
                    StyleBox["\<\"10. Direct Products\"\>", 
                    "HyperlinkActive"]}, Dynamic[
                    CurrentValue["MouseOver"]],
                    BaseStyle->{"Hyperlink"},
                    BaselinePosition->Baseline,
                    FrameMargins->0,
                    ImageSize->Automatic],
                    BaseStyle->"Hyperlink",
                    ButtonData->{
                    FrontEnd`FileName[{
                    ParentDirectory[
                    ParentDirectory[]], "GroupLabs", "GrpLab10.nb"}], None},
                    ButtonNote->ButtonData],
                    Annotation[#, {
                    FrontEnd`FileName[{
                    ParentDirectory[
                    ParentDirectory[]], "GroupLabs", "GrpLab10.nb"}], None}, 
                    "Hyperlink"]& ],
                    
                    "\"The notion of direct products (sums) are introduced \
and we determine the order of elements in a direct product. We also try to \
determine when the direct product of cyclic groups is itself cyclic. We also \
look for isomorphisms between some \\!\\(\\*SubscriptBox[\\(U\\), \\(n\\)]\\) \
groups.\"",
                    LabelStyle->"TextStyling"],
                    
                    Annotation[#, 
                    "The notion of direct products (sums) are introduced and \
we determine the order of elements in a direct product. We also try to \
determine when the direct product of cyclic groups is itself cyclic. We also \
look for isomorphisms between some \!\(\*SubscriptBox[\(U\), \(n\)]\) \
groups.", "Tooltip"]& ]},
                    {
                    TagBox[
                    TooltipBox[
                    TagBox[
                    ButtonBox[
                    PaneSelectorBox[{False->"\<\"11. Cosets\"\>", True->
                    StyleBox["\<\"11. Cosets\"\>", "HyperlinkActive"]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]],
                    BaseStyle->{"Hyperlink"},
                    BaselinePosition->Baseline,
                    FrameMargins->0,
                    ImageSize->Automatic],
                    BaseStyle->"Hyperlink",
                    ButtonData->{
                    FrontEnd`FileName[{
                    ParentDirectory[
                    ParentDirectory[]], "GroupLabs", "GrpLab11.nb"}], None},
                    ButtonNote->ButtonData],
                    Annotation[#, {
                    FrontEnd`FileName[{
                    ParentDirectory[
                    ParentDirectory[]], "GroupLabs", "GrpLab11.nb"}], None}, 
                    "Hyperlink"]& ],
                    
                    "\"This lab explores the definition and properties of \
cosets.\"",
                    LabelStyle->"TextStyling"],
                    
                    Annotation[#, 
                    "This lab explores the definition and properties of \
cosets.", "Tooltip"]& ]},
                    {
                    TagBox[
                    TooltipBox[
                    TagBox[
                    ButtonBox[
                    
                    PaneSelectorBox[{
                    False->"\<\"12. Normality and Factor groups\"\>", True->
                    
                    StyleBox["\<\"12. Normality and Factor groups\"\>", 
                    "HyperlinkActive"]}, Dynamic[
                    CurrentValue["MouseOver"]],
                    BaseStyle->{"Hyperlink"},
                    BaselinePosition->Baseline,
                    FrameMargins->0,
                    ImageSize->Automatic],
                    BaseStyle->"Hyperlink",
                    ButtonData->{
                    FrontEnd`FileName[{
                    ParentDirectory[
                    ParentDirectory[]], "GroupLabs", "GrpLab12.nb"}], None},
                    ButtonNote->ButtonData],
                    Annotation[#, {
                    FrontEnd`FileName[{
                    ParentDirectory[
                    ParentDirectory[]], "GroupLabs", "GrpLab12.nb"}], None}, 
                    "Hyperlink"]& ],
                    
                    "\"A normal group is defined, explored, and then used to \
define and explore factor groups.\"",
                    LabelStyle->"TextStyling"],
                    
                    Annotation[#, 
                    "A normal group is defined, explored, and then used to \
define and explore factor groups.", "Tooltip"]& ]},
                    {
                    TagBox[
                    TooltipBox[
                    TagBox[
                    ButtonBox[
                    
                    PaneSelectorBox[{False->"\<\"13. Homomorphisms\"\>", True->
                    
                    StyleBox["\<\"13. Homomorphisms\"\>", "HyperlinkActive"]},
                     Dynamic[
                    CurrentValue["MouseOver"]],
                    BaseStyle->{"Hyperlink"},
                    BaselinePosition->Baseline,
                    FrameMargins->0,
                    ImageSize->Automatic],
                    BaseStyle->"Hyperlink",
                    ButtonData->{
                    FrontEnd`FileName[{
                    ParentDirectory[
                    ParentDirectory[]], "GroupLabs", "GrpLab13.nb"}], None},
                    ButtonNote->ButtonData],
                    Annotation[#, {
                    FrontEnd`FileName[{
                    ParentDirectory[
                    ParentDirectory[]], "GroupLabs", "GrpLab13.nb"}], None}, 
                    "Hyperlink"]& ],
                    "\"This lab explores group homomorphisms.\"",
                    LabelStyle->"TextStyling"],
                    
                    Annotation[#, "This lab explores group homomorphisms.", 
                    "Tooltip"]& ]},
                    {
                    TagBox[
                    TooltipBox[
                    TagBox[
                    ButtonBox[
                    
                    PaneSelectorBox[{
                    False->"\<\"14: Rotational Groups of Regular \
Polyhedra\"\>", True->
                    
                    StyleBox["\<\"14: Rotational Groups of Regular \
Polyhedra\"\>", "HyperlinkActive"]}, Dynamic[
                    CurrentValue["MouseOver"]],
                    BaseStyle->{"Hyperlink"},
                    BaselinePosition->Baseline,
                    FrameMargins->0,
                    ImageSize->Automatic],
                    BaseStyle->"Hyperlink",
                    ButtonData->{
                    FrontEnd`FileName[{
                    ParentDirectory[
                    ParentDirectory[]], "GroupLabs", "GrpLab14.nb"}], None},
                    ButtonNote->ButtonData],
                    Annotation[#, {
                    FrontEnd`FileName[{
                    ParentDirectory[
                    ParentDirectory[]], "GroupLabs", "GrpLab14.nb"}], None}, 
                    "Hyperlink"]& ],
                    
                    "\"Here we look at how to generate the rotational groups \
of several polyhedra.\"",
                    LabelStyle->"TextStyling"],
                    
                    Annotation[#, 
                    "Here we look at how to generate the rotational groups of \
several polyhedra.", "Tooltip"]& ]}
                    },
                    GridBoxAlignment->{"Columns" -> {{Left}}},
                    
                    GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
                    "Column"],
                    ImageMargins->0]}
                    },
                    AutoDelete->False,
                    BaselinePosition->{1, 1},
                    GridBoxAlignment->{"Columns" -> {{Left}}},
                    GridBoxBackground->{"Columns" -> {{Automatic}}},
                    
                    GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
                    
                    GridBoxSpacings->{
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}]}, Dynamic[
                    Typeset`var$$],
                    Alignment->Automatic,
                    BaselinePosition->Baseline,
                    DefaultBaseStyle->"OpenerView",
                    ImageMargins->0,
                    ImageSize->Automatic],
                    Deployed->False,
                    StripOnInput->False],
                    OpenerView[{
                    Style["Group Labs", 
                    RGBColor[0, 0, 1], Italic], 
                    Column[{
                    Tooltip[
                    Hyperlink["1. Using Symmetry to Uncover a Group", {
                    FrontEnd`FileName[{
                    ParentDirectory[
                    ParentDirectory[]], "GroupLabs", "GrpLab01"}], None}], 
                    "This lab explores the underlying definition of a group \
by looking at the symmetries of an equilateral triangle."], 
                    Tooltip[
                    Hyperlink[
                    "2. Determining the Symmetry Group of a Given Figure", {
                    FrontEnd`FileName[{
                    ParentDirectory[
                    ParentDirectory[]], "GroupLabs", "GrpLab02.nb"}], None}], 
                    "The focus of this lab is to determine the symmetry group \
of a figure chosen randomly from a list of regular polygons and \
\[OpenCurlyDoubleQuote]cyclic\[CloseCurlyDoubleQuote] objects."], 
                    Tooltip[
                    Hyperlink["3. Is This a Group?", {
                    FrontEnd`FileName[{
                    ParentDirectory[
                    ParentDirectory[]], "GroupLabs", "GrpLab03.nb"}], None}], 
                    "This lab randomly presents a Cayley table of one of 20 \
\[OpenCurlyDoubleQuote]possible groups.\[CloseCurlyDoubleQuote] The goal is \
to determine which of the defining properties of a group are reflected in the \
Cayley table to determine which are groups."], 
                    Tooltip[
                    Hyperlink[
                    "4. Let\[CloseCurlyQuote]s Get These Orders Straight", {
                    FrontEnd`FileName[{
                    ParentDirectory[
                    ParentDirectory[]], "GroupLabs", "GrpLab04.nb"}], None}], 
                    "This lab looks at the order of an element and its \
inverse, the distribution of the orders of the elements in \
\!\(\*SubscriptBox[\(\[DoubleStruckCapitalZ]\), \(n\)]\) investigates the \
probability that an element in \
\!\(\*SubscriptBox[\(\[DoubleStruckCapitalZ]\), \(n\)]\) has order n and also \
explores the group \!\(\*SubscriptBox[\(U\), \(n\)]\) (the units in \
\!\(\*SubscriptBox[\(\[DoubleStruckCapitalZ]\), \(n\)]\))."], 
                    Tooltip[
                    Hyperlink["5. Subversively Grouping Our Elements", {
                    FrontEnd`FileName[{
                    ParentDirectory[
                    ParentDirectory[]], "GroupLabs", "GrpLab05.nb"}], None}], 
                    "This lab explores the notion of a subgroup, including \
looking at the subgroups of \!\(\*SubscriptBox[\(\[DoubleStruckCapitalZ]\), \
\(n\)]\) and \!\(\*SubscriptBox[\(U\), \(n\)]\), calculating the probability \
that a random subset of \!\(\*SubscriptBox[\(\[DoubleStruckCapitalZ]\), \
\(n\)]\) is a subgroup, and determining what elements in a subset are \
necessary so that the closure yields the whole group."], 
                    Tooltip[
                    Hyperlink["6. Cycling Through the Groups", {
                    FrontEnd`FileName[{
                    ParentDirectory[
                    ParentDirectory[]], "GroupLabs", "GrpLab06.nb"}], None}], 
                    "Here we focus on the notion of a cyclic group and its \
subgroup structure. We also look at determining when the direct sum of \
\!\(\*SubscriptBox[\(\[DoubleStruckCapitalZ]\), \(n\)]\) and \
\!\(\*SubscriptBox[\(\[DoubleStruckCapitalZ]\), \(n\)]\) is a cyclic group."], 
                    Tooltip[
                    Hyperlink["7. Permutations", {
                    FrontEnd`FileName[{
                    ParentDirectory[
                    ParentDirectory[]], "GroupLabs", "GrpLab07.nb"}], None}], 
                    "This lab looks at the definitions of a permutation, \
cycle and transposition, how to perform computations with each of these \
structures, and explores their properties and relations to each other. We \
also look at some applications of permutations."], 
                    Tooltip[
                    Hyperlink["8. Isomorphisms", {
                    FrontEnd`FileName[{
                    ParentDirectory[
                    ParentDirectory[]], "GroupLabs", "GrpLab08.nb"}], None}], 
                    "Here we look at the definition of an isomorphism and \
then use various visual mechanisms to try to determine when two groups are or \
are not isomorphic. A Morphoid is introduced here."], 
                    Tooltip[
                    Hyperlink["9. Automorphisms", {
                    FrontEnd`FileName[{
                    ParentDirectory[
                    ParentDirectory[]], "GroupLabs", "GrpLab09.nb"}], None}], 
                    "In this lab, we look at the group of automorphisms of \!\
\(\*SubscriptBox[\(\[DoubleStruckCapitalZ]\), \(n\)]\) and also look at inner \
automorphisms."], 
                    Tooltip[
                    Hyperlink["10. Direct Products", {
                    FrontEnd`FileName[{
                    ParentDirectory[
                    ParentDirectory[]], "GroupLabs", "GrpLab10.nb"}], None}], 
                    
                    "The notion of direct products (sums) are introduced and \
we determine the order of elements in a direct product. We also try to \
determine when the direct product of cyclic groups is itself cyclic. We also \
look for isomorphisms between some \!\(\*SubscriptBox[\(U\), \(n\)]\) \
groups."], 
                    Tooltip[
                    Hyperlink["11. Cosets", {
                    FrontEnd`FileName[{
                    ParentDirectory[
                    ParentDirectory[]], "GroupLabs", "GrpLab11.nb"}], None}], 
                    "This lab explores the definition and properties of \
cosets."], 
                    Tooltip[
                    Hyperlink["12. Normality and Factor groups", {
                    FrontEnd`FileName[{
                    ParentDirectory[
                    ParentDirectory[]], "GroupLabs", "GrpLab12.nb"}], None}], 
                    "A normal group is defined, explored, and then used to \
define and explore factor groups."], 
                    Tooltip[
                    Hyperlink["13. Homomorphisms", {
                    FrontEnd`FileName[{
                    ParentDirectory[
                    ParentDirectory[]], "GroupLabs", "GrpLab13.nb"}], None}], 
                    "This lab explores group homomorphisms."], 
                    Tooltip[
                    Hyperlink["14: Rotational Groups of Regular Polyhedra", {
                    FrontEnd`FileName[{
                    ParentDirectory[
                    ParentDirectory[]], "GroupLabs", "GrpLab14.nb"}], None}], 
                    "Here we look at how to generate the rotational groups of \
several polyhedra."]}]}, False]],
                    DynamicModuleValues:>{}],
                    Setting[#, {0}]& ]},
                  {
                   TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False->GridBox[{
                    {
                    OpenerBox[Dynamic[Typeset`var$$],
                    Appearance->Automatic,
                    AutoAction->False,
                    ContinuousAction->False,
                    Enabled->Automatic], 
                    StyleBox["\<\"Ring Labs\"\>",
                    StripOnInput->False,
                    FrontFaceColor->RGBColor[0, 0, 1],
                    BackFaceColor->RGBColor[0, 0, 1],
                    GraphicsColor->RGBColor[0, 0, 1],
                    FontSlant->Italic,
                    FontColor->RGBColor[0, 0, 1]]}
                    },
                    AutoDelete->False,
                    BaselinePosition->{1, 1},
                    GridBoxAlignment->{"Columns" -> {{Left}}},
                    GridBoxBackground->{"Columns" -> {{Automatic}}},
                    
                    GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
                    
                    GridBoxSpacings->{
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}], True->
                    GridBox[{
                    {
                    OpenerBox[Dynamic[Typeset`var$$],
                    Appearance->Automatic,
                    AutoAction->False,
                    ContinuousAction->False,
                    Enabled->Automatic], 
                    StyleBox["\<\"Ring Labs\"\>",
                    StripOnInput->False,
                    FrontFaceColor->RGBColor[0, 0, 1],
                    BackFaceColor->RGBColor[0, 0, 1],
                    GraphicsColor->RGBColor[0, 0, 1],
                    FontSlant->Italic,
                    FontColor->RGBColor[0, 0, 1]]},
                    {"", 
                    PaneBox[
                    TagBox[GridBox[{
                    {
                    TagBox[
                    TooltipBox[
                    TagBox[
                    ButtonBox[
                    
                    PaneSelectorBox[{
                    False->"\<\"1. An Introduction to Rings and Ringoids\"\>",
                     True->
                    
                    StyleBox["\<\"1. An Introduction to Rings and \
Ringoids\"\>", "HyperlinkActive"]}, Dynamic[
                    CurrentValue["MouseOver"]],
                    BaseStyle->{"Hyperlink"},
                    BaselinePosition->Baseline,
                    FrameMargins->0,
                    ImageSize->Automatic],
                    BaseStyle->"Hyperlink",
                    ButtonData->{
                    FrontEnd`FileName[{
                    ParentDirectory[
                    ParentDirectory[]], "RingLabs", "RngLab01.nb"}], None},
                    ButtonNote->ButtonData],
                    Annotation[#, {
                    FrontEnd`FileName[{
                    ParentDirectory[
                    ParentDirectory[]], "RingLabs", "RngLab01.nb"}], None}, 
                    "Hyperlink"]& ],
                    
                    "\"This lab introduces some of the definitions and \
properties of rings.\"",
                    LabelStyle->"TextStyling"],
                    
                    Annotation[#, 
                    "This lab introduces some of the definitions and \
properties of rings.", "Tooltip"]& ]},
                    {
                    TagBox[
                    TooltipBox[
                    TagBox[
                    ButtonBox[
                    
                    PaneSelectorBox[{
                    False->"\<\"2. An Introduction to Rings, Part 2\"\>", 
                    True->
                    
                    StyleBox["\<\"2. An Introduction to Rings, Part 2\"\>", 
                    "HyperlinkActive"]}, Dynamic[
                    CurrentValue["MouseOver"]],
                    BaseStyle->{"Hyperlink"},
                    BaselinePosition->Baseline,
                    FrameMargins->0,
                    ImageSize->Automatic],
                    BaseStyle->"Hyperlink",
                    ButtonData->{
                    FrontEnd`FileName[{
                    ParentDirectory[
                    ParentDirectory[]], "RingLabs", "RngLab02.nb"}], None},
                    ButtonNote->ButtonData],
                    Annotation[#, {
                    FrontEnd`FileName[{
                    ParentDirectory[
                    ParentDirectory[]], "RingLabs", "RngLab02.nb"}], None}, 
                    "Hyperlink"]& ],
                    
                    "\"This lab continues looking at basic ring concepts, \
focusing on units and zero divisors and leading to the definition of an \
integral domain and field.\"",
                    LabelStyle->"TextStyling"],
                    
                    Annotation[#, 
                    "This lab continues looking at basic ring concepts, \
focusing on units and zero divisors and leading to the definition of an \
integral domain and field.", "Tooltip"]& ]},
                    {
                    TagBox[
                    TooltipBox[
                    TagBox[
                    ButtonBox[
                    
                    PaneSelectorBox[{
                    False->"\<\"3. An Ideal Part of Rings\"\>", True->
                    
                    StyleBox["\<\"3. An Ideal Part of Rings\"\>", 
                    "HyperlinkActive"]}, Dynamic[
                    CurrentValue["MouseOver"]],
                    BaseStyle->{"Hyperlink"},
                    BaselinePosition->Baseline,
                    FrameMargins->0,
                    ImageSize->Automatic],
                    BaseStyle->"Hyperlink",
                    ButtonData->{
                    FrontEnd`FileName[{
                    ParentDirectory[
                    ParentDirectory[]], "RingLabs", "RngLab03.nb"}], None},
                    ButtonNote->ButtonData],
                    Annotation[#, {
                    FrontEnd`FileName[{
                    ParentDirectory[
                    ParentDirectory[]], "RingLabs", "RngLab03.nb"}], None}, 
                    "Hyperlink"]& ],
                    
                    "\"This explores the notion of an ideal and properties \
related to it.\"",
                    LabelStyle->"TextStyling"],
                    
                    Annotation[#, 
                    "This explores the notion of an ideal and properties \
related to it.", "Tooltip"]& ]},
                    {
                    TagBox[
                    TooltipBox[
                    TagBox[
                    ButtonBox[
                    
                    PaneSelectorBox[{
                    False->"\<\"4. What Does \[DoubleStruckCapitalZ][i]/\
\[LeftAngleBracket]a+b i\[RightAngleBracket] Look Like?\"\>", True->
                    
                    StyleBox["\<\"4. What Does \[DoubleStruckCapitalZ][i]/\
\[LeftAngleBracket]a+b i\[RightAngleBracket] Look Like?\"\>", 
                    "HyperlinkActive"]}, Dynamic[
                    CurrentValue["MouseOver"]],
                    BaseStyle->{"Hyperlink"},
                    BaselinePosition->Baseline,
                    FrameMargins->0,
                    ImageSize->Automatic],
                    BaseStyle->"Hyperlink",
                    ButtonData->{
                    FrontEnd`FileName[{
                    ParentDirectory[
                    ParentDirectory[]], "RingLabs", "RngLab04.nb"}], None},
                    ButtonNote->ButtonData],
                    Annotation[#, {
                    FrontEnd`FileName[{
                    ParentDirectory[
                    ParentDirectory[]], "RingLabs", "RngLab04.nb"}], None}, 
                    "Hyperlink"]& ],
                    
                    "\"This lab focuses on the Gaussian integers modulo an \
ideal generated by some Gaussian integer.\"",
                    LabelStyle->"TextStyling"],
                    
                    Annotation[#, 
                    "This lab focuses on the Gaussian integers modulo an \
ideal generated by some Gaussian integer.", "Tooltip"]& ]},
                    {
                    TagBox[
                    TooltipBox[
                    TagBox[
                    ButtonBox[
                    
                    PaneSelectorBox[{False->"\<\"5. Ring Homomorphisms\"\>", 
                    True->
                    
                    StyleBox["\<\"5. Ring Homomorphisms\"\>", 
                    "HyperlinkActive"]}, Dynamic[
                    CurrentValue["MouseOver"]],
                    BaseStyle->{"Hyperlink"},
                    BaselinePosition->Baseline,
                    FrameMargins->0,
                    ImageSize->Automatic],
                    BaseStyle->"Hyperlink",
                    ButtonData->{
                    FrontEnd`FileName[{
                    ParentDirectory[
                    ParentDirectory[]], "RingLabs", "RngLab05.nb"}], None},
                    ButtonNote->ButtonData],
                    Annotation[#, {
                    FrontEnd`FileName[{
                    ParentDirectory[
                    ParentDirectory[]], "RingLabs", "RngLab05.nb"}], None}, 
                    "Hyperlink"]& ],
                    
                    "\"This lab looks at the definition of a ring \
homomorphism, the First Isomorphism Theorem, and the Chinese Remainder \
Theorem.\"",
                    LabelStyle->"TextStyling"],
                    
                    Annotation[#, 
                    "This lab looks at the definition of a ring homomorphism, \
the First Isomorphism Theorem, and the Chinese Remainder Theorem.", 
                    "Tooltip"]& ]},
                    {
                    TagBox[
                    TooltipBox[
                    TagBox[
                    ButtonBox[
                    
                    PaneSelectorBox[{False->"\<\"6. Polynomial Rings\"\>", 
                    True->
                    
                    StyleBox["\<\"6. Polynomial Rings\"\>", 
                    "HyperlinkActive"]}, Dynamic[
                    CurrentValue["MouseOver"]],
                    BaseStyle->{"Hyperlink"},
                    BaselinePosition->Baseline,
                    FrameMargins->0,
                    ImageSize->Automatic],
                    BaseStyle->"Hyperlink",
                    ButtonData->{
                    FrontEnd`FileName[{
                    ParentDirectory[
                    ParentDirectory[]], "RingLabs", "RngLab06.nb"}], None},
                    ButtonNote->ButtonData],
                    Annotation[#, {
                    FrontEnd`FileName[{
                    ParentDirectory[
                    ParentDirectory[]], "RingLabs", "RngLab06.nb"}], None}, 
                    "Hyperlink"]& ],
                    
                    "\"Some basic properties of polynomial rings are \
introduced and explored.\"",
                    LabelStyle->"TextStyling"],
                    
                    Annotation[#, 
                    "Some basic properties of polynomial rings are introduced \
and explored.", "Tooltip"]& ]},
                    {
                    TagBox[
                    TooltipBox[
                    TagBox[
                    ButtonBox[
                    
                    PaneSelectorBox[{
                    False->"\<\"7. Factoring and Irreducibility\"\>", True->
                    
                    StyleBox["\<\"7. Factoring and Irreducibility\"\>", 
                    "HyperlinkActive"]}, Dynamic[
                    CurrentValue["MouseOver"]],
                    BaseStyle->{"Hyperlink"},
                    BaselinePosition->Baseline,
                    FrameMargins->0,
                    ImageSize->Automatic],
                    BaseStyle->"Hyperlink",
                    ButtonData->{
                    FrontEnd`FileName[{
                    ParentDirectory[
                    ParentDirectory[]], "RingLabs", "RngLab07.nb"}], None},
                    ButtonNote->ButtonData],
                    Annotation[#, {
                    FrontEnd`FileName[{
                    ParentDirectory[
                    ParentDirectory[]], "RingLabs", "RngLab07.nb"}], None}, 
                    "Hyperlink"]& ],
                    
                    "\"What does it mean to factor a polynomial? Various \
definitions and techniques are introduced, including the Rational Root \
Theorem, the Mod p Irreducibility Test, and Eisenstein\[CloseCurlyQuote]s \
Criterion. \"",
                    LabelStyle->"TextStyling"],
                    
                    Annotation[#, 
                    "What does it mean to factor a polynomial? Various \
definitions and techniques are introduced, including the Rational Root \
Theorem, the Mod p Irreducibility Test, and Eisenstein\[CloseCurlyQuote]s \
Criterion. ", "Tooltip"]& ]},
                    {
                    TagBox[
                    TooltipBox[
                    TagBox[
                    ButtonBox[
                    
                    PaneSelectorBox[{False->"\<\"8. Roots of Unity\"\>", True->
                    
                    StyleBox["\<\"8. Roots of Unity\"\>", "HyperlinkActive"]},
                     Dynamic[
                    CurrentValue["MouseOver"]],
                    BaseStyle->{"Hyperlink"},
                    BaselinePosition->Baseline,
                    FrameMargins->0,
                    ImageSize->Automatic],
                    BaseStyle->"Hyperlink",
                    ButtonData->{
                    FrontEnd`FileName[{
                    ParentDirectory[
                    ParentDirectory[]], "RingLabs", "RngLab08.nb"}], None},
                    ButtonNote->ButtonData],
                    Annotation[#, {
                    FrontEnd`FileName[{
                    ParentDirectory[
                    ParentDirectory[]], "RingLabs", "RngLab08.nb"}], None}, 
                    "Hyperlink"]& ],
                    
                    "\"This lab focuses on the polynomial \
\\!\\(\\*SuperscriptBox[\\(x\\), \\(n\\)]\\)-1 and explores graphically the \
zeros of this polynomial, in particular seeing how the zeros are related to \
the factors and how the group \\!\\(\\*SubscriptBox[\\(U\\), \\(n\\)]\\) \
arises out of this.\"",
                    LabelStyle->"TextStyling"],
                    
                    Annotation[#, 
                    "This lab focuses on the polynomial \!\(\*SuperscriptBox[\
\(x\), \(n\)]\)-1 and explores graphically the zeros of this polynomial, in \
particular seeing how the zeros are related to the factors and how the group \
\!\(\*SubscriptBox[\(U\), \(n\)]\) arises out of this.", "Tooltip"]& ]},
                    {
                    TagBox[
                    TooltipBox[
                    TagBox[
                    ButtonBox[
                    
                    PaneSelectorBox[{
                    False->"\<\"9. Cyclotomic Polynomials\"\>", True->
                    
                    StyleBox["\<\"9. Cyclotomic Polynomials\"\>", 
                    "HyperlinkActive"]}, Dynamic[
                    CurrentValue["MouseOver"]],
                    BaseStyle->{"Hyperlink"},
                    BaselinePosition->Baseline,
                    FrameMargins->0,
                    ImageSize->Automatic],
                    BaseStyle->"Hyperlink",
                    ButtonData->{
                    FrontEnd`FileName[{
                    ParentDirectory[
                    ParentDirectory[]], "RingLabs", "RngLab09.nb"}], None},
                    ButtonNote->ButtonData],
                    Annotation[#, {
                    FrontEnd`FileName[{
                    ParentDirectory[
                    ParentDirectory[]], "RingLabs", "RngLab09.nb"}], None}, 
                    "Hyperlink"]& ],
                    
                    "\"This lab focuses on cyclotomic polynomials and the \
many properties related to them.\"",
                    LabelStyle->"TextStyling"],
                    
                    Annotation[#, 
                    "This lab focuses on cyclotomic polynomials and the many \
properties related to them.", "Tooltip"]& ]},
                    {
                    TagBox[
                    TooltipBox[
                    TagBox[
                    ButtonBox[
                    
                    PaneSelectorBox[{
                    False->"\<\"10. Quotient Rings of Polynomials\"\>", True->
                    
                    
                    StyleBox["\<\"10. Quotient Rings of Polynomials\"\>", 
                    "HyperlinkActive"]}, Dynamic[
                    CurrentValue["MouseOver"]],
                    BaseStyle->{"Hyperlink"},
                    BaselinePosition->Baseline,
                    FrameMargins->0,
                    ImageSize->Automatic],
                    BaseStyle->"Hyperlink",
                    ButtonData->{
                    FrontEnd`FileName[{
                    ParentDirectory[
                    ParentDirectory[]], "RingLabs", "RngLab10.nb"}], None},
                    ButtonNote->ButtonData],
                    Annotation[#, {
                    FrontEnd`FileName[{
                    ParentDirectory[
                    ParentDirectory[]], "RingLabs", "RngLab10.nb"}], None}, 
                    "Hyperlink"]& ],
                    
                    "\"The notion of a quotient ring over a polynomial is \
introduced in this lab.\"",
                    LabelStyle->"TextStyling"],
                    
                    Annotation[#, 
                    "The notion of a quotient ring over a polynomial is \
introduced in this lab.", "Tooltip"]& ]},
                    {
                    TagBox[
                    TooltipBox[
                    TagBox[
                    ButtonBox[
                    
                    PaneSelectorBox[{
                    False->"\<\"11. Quadratic Field Extensions\"\>", True->
                    
                    StyleBox["\<\"11. Quadratic Field Extensions\"\>", 
                    "HyperlinkActive"]}, Dynamic[
                    CurrentValue["MouseOver"]],
                    BaseStyle->{"Hyperlink"},
                    BaselinePosition->Baseline,
                    FrameMargins->0,
                    ImageSize->Automatic],
                    BaseStyle->"Hyperlink",
                    ButtonData->{
                    FrontEnd`FileName[{
                    ParentDirectory[
                    ParentDirectory[]], "RingLabs", "RngLab11.nb"}], None},
                    ButtonNote->ButtonData],
                    Annotation[#, {
                    FrontEnd`FileName[{
                    ParentDirectory[
                    ParentDirectory[]], "RingLabs", "RngLab11.nb"}], None}, 
                    "Hyperlink"]& ],
                    
                    "\"This lab continues the last one by looking more \
closely at quotient rings modulo a quadratic polynomial where the result is a \
field.\"",
                    LabelStyle->"TextStyling"],
                    
                    Annotation[#, 
                    "This lab continues the last one by looking more closely \
at quotient rings modulo a quadratic polynomial where the result is a field.",
                     "Tooltip"]& ]},
                    {
                    TagBox[
                    TooltipBox[
                    TagBox[
                    ButtonBox[
                    
                    PaneSelectorBox[{
                    False->"\<\"12. Factoring in \
\[DoubleStruckCapitalZ][\\!\\(\\*SqrtBox[\\(d\\)]\\)]\"\>", True->
                    
                    StyleBox["\<\"12. Factoring in \
\[DoubleStruckCapitalZ][\\!\\(\\*SqrtBox[\\(d\\)]\\)]\"\>", 
                    "HyperlinkActive"]}, Dynamic[
                    CurrentValue["MouseOver"]],
                    BaseStyle->{"Hyperlink"},
                    BaselinePosition->Baseline,
                    FrameMargins->0,
                    ImageSize->Automatic],
                    BaseStyle->"Hyperlink",
                    ButtonData->{
                    FrontEnd`FileName[{
                    ParentDirectory[
                    ParentDirectory[]], "RingLabs", "RngLab12.nb"}], None},
                    ButtonNote->ButtonData],
                    Annotation[#, {
                    FrontEnd`FileName[{
                    ParentDirectory[
                    ParentDirectory[]], "RingLabs", "RngLab12.nb"}], None}, 
                    "Hyperlink"]& ],
                    
                    "\"This lab focuses on the rings \[DoubleStruckCapitalZ][\
\\!\\(\\*SqrtBox[\\(d\\)]\\)] and pursues the notion of divisibility and \
factoring in such rings. Several rings are illustrated as failing being a \
UFD.\"",
                    LabelStyle->"TextStyling"],
                    Annotation[#, 
                    "This lab focuses on the rings \[DoubleStruckCapitalZ][\!\
\(\*SqrtBox[\(d\)]\)] and pursues the notion of divisibility and factoring in \
such rings. Several rings are illustrated as failing being a UFD.", 
                    "Tooltip"]& ]},
                    {
                    TagBox[
                    TooltipBox[
                    TagBox[
                    ButtonBox[
                    
                    PaneSelectorBox[{False->"\<\"13. Finite Fields\"\>", True->
                    
                    StyleBox["\<\"13. Finite Fields\"\>", "HyperlinkActive"]},
                     Dynamic[
                    CurrentValue["MouseOver"]],
                    BaseStyle->{"Hyperlink"},
                    BaselinePosition->Baseline,
                    FrameMargins->0,
                    ImageSize->Automatic],
                    BaseStyle->"Hyperlink",
                    ButtonData->{
                    FrontEnd`FileName[{
                    ParentDirectory[
                    ParentDirectory[]], "RingLabs", "RngLab13.nb"}], None},
                    ButtonNote->ButtonData],
                    Annotation[#, {
                    FrontEnd`FileName[{
                    ParentDirectory[
                    ParentDirectory[]], "RingLabs", "RngLab13.nb"}], None}, 
                    "Hyperlink"]& ],
                    
                    "\"This lab continues the ideas formulated in lab 11 by \
looking at Galois fields and properties related to them.\"",
                    LabelStyle->"TextStyling"],
                    
                    Annotation[#, 
                    "This lab continues the ideas formulated in lab 11 by \
looking at Galois fields and properties related to them.", "Tooltip"]& ]}
                    },
                    GridBoxAlignment->{"Columns" -> {{Left}}},
                    
                    GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
                    "Column"],
                    ImageMargins->0]}
                    },
                    AutoDelete->False,
                    BaselinePosition->{1, 1},
                    GridBoxAlignment->{"Columns" -> {{Left}}},
                    GridBoxBackground->{"Columns" -> {{Automatic}}},
                    
                    GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
                    
                    GridBoxSpacings->{
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}]}, Dynamic[
                    Typeset`var$$],
                    Alignment->Automatic,
                    BaselinePosition->Baseline,
                    DefaultBaseStyle->"OpenerView",
                    ImageMargins->0,
                    ImageSize->Automatic],
                    Deployed->False,
                    StripOnInput->False],
                    OpenerView[{
                    Style["Ring Labs", 
                    RGBColor[0, 0, 1], Italic], 
                    Column[{
                    Tooltip[
                    Hyperlink["1. An Introduction to Rings and Ringoids", {
                    FrontEnd`FileName[{
                    ParentDirectory[
                    ParentDirectory[]], "RingLabs", "RngLab01.nb"}], None}], 
                    "This lab introduces some of the definitions and \
properties of rings."], 
                    Tooltip[
                    Hyperlink["2. An Introduction to Rings, Part 2", {
                    FrontEnd`FileName[{
                    ParentDirectory[
                    ParentDirectory[]], "RingLabs", "RngLab02.nb"}], None}], 
                    "This lab continues looking at basic ring concepts, \
focusing on units and zero divisors and leading to the definition of an \
integral domain and field."], 
                    Tooltip[
                    Hyperlink["3. An Ideal Part of Rings", {
                    FrontEnd`FileName[{
                    ParentDirectory[
                    ParentDirectory[]], "RingLabs", "RngLab03.nb"}], None}], 
                    "This explores the notion of an ideal and properties \
related to it."], 
                    Tooltip[
                    Hyperlink[
                    "4. What Does \[DoubleStruckCapitalZ][i]/\
\[LeftAngleBracket]a+b i\[RightAngleBracket] Look Like?", {
                    FrontEnd`FileName[{
                    ParentDirectory[
                    ParentDirectory[]], "RingLabs", "RngLab04.nb"}], None}], 
                    "This lab focuses on the Gaussian integers modulo an \
ideal generated by some Gaussian integer."], 
                    Tooltip[
                    Hyperlink["5. Ring Homomorphisms", {
                    FrontEnd`FileName[{
                    ParentDirectory[
                    ParentDirectory[]], "RingLabs", "RngLab05.nb"}], None}], 
                    "This lab looks at the definition of a ring homomorphism, \
the First Isomorphism Theorem, and the Chinese Remainder Theorem."], 
                    Tooltip[
                    Hyperlink["6. Polynomial Rings", {
                    FrontEnd`FileName[{
                    ParentDirectory[
                    ParentDirectory[]], "RingLabs", "RngLab06.nb"}], None}], 
                    "Some basic properties of polynomial rings are introduced \
and explored."], 
                    Tooltip[
                    Hyperlink["7. Factoring and Irreducibility", {
                    FrontEnd`FileName[{
                    ParentDirectory[
                    ParentDirectory[]], "RingLabs", "RngLab07.nb"}], None}], 
                    "What does it mean to factor a polynomial? Various \
definitions and techniques are introduced, including the Rational Root \
Theorem, the Mod p Irreducibility Test, and Eisenstein\[CloseCurlyQuote]s \
Criterion. "], 
                    Tooltip[
                    Hyperlink["8. Roots of Unity", {
                    FrontEnd`FileName[{
                    ParentDirectory[
                    ParentDirectory[]], "RingLabs", "RngLab08.nb"}], None}], 
                    "This lab focuses on the polynomial \!\(\*SuperscriptBox[\
\(x\), \(n\)]\)-1 and explores graphically the zeros of this polynomial, in \
particular seeing how the zeros are related to the factors and how the group \
\!\(\*SubscriptBox[\(U\), \(n\)]\) arises out of this."], 
                    Tooltip[
                    Hyperlink["9. Cyclotomic Polynomials", {
                    FrontEnd`FileName[{
                    ParentDirectory[
                    ParentDirectory[]], "RingLabs", "RngLab09.nb"}], None}], 
                    "This lab focuses on cyclotomic polynomials and the many \
properties related to them."], 
                    Tooltip[
                    Hyperlink["10. Quotient Rings of Polynomials", {
                    FrontEnd`FileName[{
                    ParentDirectory[
                    ParentDirectory[]], "RingLabs", "RngLab10.nb"}], None}], 
                    "The notion of a quotient ring over a polynomial is \
introduced in this lab."], 
                    Tooltip[
                    Hyperlink["11. Quadratic Field Extensions", {
                    FrontEnd`FileName[{
                    ParentDirectory[
                    ParentDirectory[]], "RingLabs", "RngLab11.nb"}], None}], 
                    "This lab continues the last one by looking more closely \
at quotient rings modulo a quadratic polynomial where the result is a \
field."], 
                    Tooltip[
                    Hyperlink[
                    "12. Factoring in \
\[DoubleStruckCapitalZ][\!\(\*SqrtBox[\(d\)]\)]", {
                    FrontEnd`FileName[{
                    ParentDirectory[
                    ParentDirectory[]], "RingLabs", "RngLab12.nb"}], None}], 
                    "This lab focuses on the rings \[DoubleStruckCapitalZ][\!\
\(\*SqrtBox[\(d\)]\)] and pursues the notion of divisibility and factoring in \
such rings. Several rings are illustrated as failing being a UFD."], 
                    Tooltip[
                    Hyperlink["13. Finite Fields", {
                    FrontEnd`FileName[{
                    ParentDirectory[
                    ParentDirectory[]], "RingLabs", "RngLab13.nb"}], None}], 
                    "This lab continues the ideas formulated in lab 11 by \
looking at Galois fields and properties related to them."]}]}, False]],
                    DynamicModuleValues:>{}],
                    Setting[#, {0}]& ]}
                 },
                 GridBoxAlignment->{"Columns" -> {{Left}}},
                 
                 GridBoxItemSize->{
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
                "Column"],
               ImageMargins->0]}
            },
            AutoDelete->False,
            BaselinePosition->{1, 1},
            GridBoxAlignment->{"Columns" -> {{Left}}},
            GridBoxBackground->{"Columns" -> {{Automatic}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
            GridBoxSpacings->{"Columns" -> {{0.2}}, "Rows" -> {{0.5}}}]}, 
           Dynamic[Typeset`var$$],
           Alignment->Automatic,
           BaselinePosition->Baseline,
           DefaultBaseStyle->"OpenerView",
           ImageMargins->0,
           ImageSize->Automatic],
          Deployed->False,
          StripOnInput->False],
         OpenerView[{
           Tooltip[
            Style[
            "\!\(\*FormBox[\n RowBox[{\"EAAM\", \" \", \"Labs\"}],\n \
TraditionalForm]\)", 
             RGBColor[0, 0, 1], Italic], 
            "List (and description) of labs in Exploring Abstract Algebra \
with Mathematica"], 
           Column[{
             OpenerView[{
               Style["Group Labs", 
                RGBColor[0, 0, 1], Italic], 
               Column[{
                 Tooltip[
                  Hyperlink["1. Using Symmetry to Uncover a Group", {
                    FrontEnd`FileName[{
                    ParentDirectory[
                    ParentDirectory[]], "GroupLabs", "GrpLab01"}], None}], 
                  "This lab explores the underlying definition of a group by \
looking at the symmetries of an equilateral triangle."], 
                 Tooltip[
                  Hyperlink[
                  "2. Determining the Symmetry Group of a Given Figure", {
                    FrontEnd`FileName[{
                    ParentDirectory[
                    ParentDirectory[]], "GroupLabs", "GrpLab02.nb"}], None}], 
                  "The focus of this lab is to determine the symmetry group \
of a figure chosen randomly from a list of regular polygons and \
\[OpenCurlyDoubleQuote]cyclic\[CloseCurlyDoubleQuote] objects."], 
                 Tooltip[
                  Hyperlink["3. Is This a Group?", {
                    FrontEnd`FileName[{
                    ParentDirectory[
                    ParentDirectory[]], "GroupLabs", "GrpLab03.nb"}], None}], 
                  "This lab randomly presents a Cayley table of one of 20 \
\[OpenCurlyDoubleQuote]possible groups.\[CloseCurlyDoubleQuote] The goal is \
to determine which of the defining properties of a group are reflected in the \
Cayley table to determine which are groups."], 
                 Tooltip[
                  Hyperlink[
                  "4. Let\[CloseCurlyQuote]s Get These Orders Straight", {
                    FrontEnd`FileName[{
                    ParentDirectory[
                    ParentDirectory[]], "GroupLabs", "GrpLab04.nb"}], None}], 
                  "This lab looks at the order of an element and its inverse, \
the distribution of the orders of the elements in \!\(\*SubscriptBox[\(\
\[DoubleStruckCapitalZ]\), \(n\)]\) investigates the probability that an \
element in \!\(\*SubscriptBox[\(\[DoubleStruckCapitalZ]\), \(n\)]\) has order \
n and also explores the group \!\(\*SubscriptBox[\(U\), \(n\)]\) (the units \
in \!\(\*SubscriptBox[\(\[DoubleStruckCapitalZ]\), \(n\)]\))."], 
                 Tooltip[
                  Hyperlink["5. Subversively Grouping Our Elements", {
                    FrontEnd`FileName[{
                    ParentDirectory[
                    ParentDirectory[]], "GroupLabs", "GrpLab05.nb"}], None}], 
                  "This lab explores the notion of a subgroup, including \
looking at the subgroups of \!\(\*SubscriptBox[\(\[DoubleStruckCapitalZ]\), \
\(n\)]\) and \!\(\*SubscriptBox[\(U\), \(n\)]\), calculating the probability \
that a random subset of \!\(\*SubscriptBox[\(\[DoubleStruckCapitalZ]\), \
\(n\)]\) is a subgroup, and determining what elements in a subset are \
necessary so that the closure yields the whole group."], 
                 Tooltip[
                  Hyperlink["6. Cycling Through the Groups", {
                    FrontEnd`FileName[{
                    ParentDirectory[
                    ParentDirectory[]], "GroupLabs", "GrpLab06.nb"}], None}], 
                  "Here we focus on the notion of a cyclic group and its \
subgroup structure. We also look at determining when the direct sum of \
\!\(\*SubscriptBox[\(\[DoubleStruckCapitalZ]\), \(n\)]\) and \
\!\(\*SubscriptBox[\(\[DoubleStruckCapitalZ]\), \(n\)]\) is a cyclic group."], 
                 Tooltip[
                  Hyperlink["7. Permutations", {
                    FrontEnd`FileName[{
                    ParentDirectory[
                    ParentDirectory[]], "GroupLabs", "GrpLab07.nb"}], None}], 
                  "This lab looks at the definitions of a permutation, cycle \
and transposition, how to perform computations with each of these structures, \
and explores their properties and relations to each other. We also look at \
some applications of permutations."], 
                 Tooltip[
                  Hyperlink["8. Isomorphisms", {
                    FrontEnd`FileName[{
                    ParentDirectory[
                    ParentDirectory[]], "GroupLabs", "GrpLab08.nb"}], None}], 
                  "Here we look at the definition of an isomorphism and then \
use various visual mechanisms to try to determine when two groups are or are \
not isomorphic. A Morphoid is introduced here."], 
                 Tooltip[
                  Hyperlink["9. Automorphisms", {
                    FrontEnd`FileName[{
                    ParentDirectory[
                    ParentDirectory[]], "GroupLabs", "GrpLab09.nb"}], None}], 
                  "In this lab, we look at the group of automorphisms of \!\(\
\*SubscriptBox[\(\[DoubleStruckCapitalZ]\), \(n\)]\) and also look at inner \
automorphisms."], 
                 Tooltip[
                  Hyperlink["10. Direct Products", {
                    FrontEnd`FileName[{
                    ParentDirectory[
                    ParentDirectory[]], "GroupLabs", "GrpLab10.nb"}], None}], 
                  "The notion of direct products (sums) are introduced and we \
determine the order of elements in a direct product. We also try to determine \
when the direct product of cyclic groups is itself cyclic. We also look for \
isomorphisms between some \!\(\*SubscriptBox[\(U\), \(n\)]\) groups."], 
                 Tooltip[
                  Hyperlink["11. Cosets", {
                    FrontEnd`FileName[{
                    ParentDirectory[
                    ParentDirectory[]], "GroupLabs", "GrpLab11.nb"}], None}], 
                  "This lab explores the definition and properties of \
cosets."], 
                 Tooltip[
                  Hyperlink["12. Normality and Factor groups", {
                    FrontEnd`FileName[{
                    ParentDirectory[
                    ParentDirectory[]], "GroupLabs", "GrpLab12.nb"}], None}], 
                  "A normal group is defined, explored, and then used to \
define and explore factor groups."], 
                 Tooltip[
                  Hyperlink["13. Homomorphisms", {
                    FrontEnd`FileName[{
                    ParentDirectory[
                    ParentDirectory[]], "GroupLabs", "GrpLab13.nb"}], None}], 
                  "This lab explores group homomorphisms."], 
                 Tooltip[
                  Hyperlink["14: Rotational Groups of Regular Polyhedra", {
                    FrontEnd`FileName[{
                    ParentDirectory[
                    ParentDirectory[]], "GroupLabs", "GrpLab14.nb"}], None}], 
                  "Here we look at how to generate the rotational groups of \
several polyhedra."]}]}], 
             OpenerView[{
               Style["Ring Labs", 
                RGBColor[0, 0, 1], Italic], 
               Column[{
                 Tooltip[
                  Hyperlink["1. An Introduction to Rings and Ringoids", {
                    FrontEnd`FileName[{
                    ParentDirectory[
                    ParentDirectory[]], "RingLabs", "RngLab01.nb"}], None}], 
                  "This lab introduces some of the definitions and properties \
of rings."], 
                 Tooltip[
                  Hyperlink["2. An Introduction to Rings, Part 2", {
                    FrontEnd`FileName[{
                    ParentDirectory[
                    ParentDirectory[]], "RingLabs", "RngLab02.nb"}], None}], 
                  "This lab continues looking at basic ring concepts, \
focusing on units and zero divisors and leading to the definition of an \
integral domain and field."], 
                 Tooltip[
                  Hyperlink["3. An Ideal Part of Rings", {
                    FrontEnd`FileName[{
                    ParentDirectory[
                    ParentDirectory[]], "RingLabs", "RngLab03.nb"}], None}], 
                  "This explores the notion of an ideal and properties \
related to it."], 
                 Tooltip[
                  Hyperlink[
                  "4. What Does \
\[DoubleStruckCapitalZ][i]/\[LeftAngleBracket]a+b i\[RightAngleBracket] Look \
Like?", {
                    FrontEnd`FileName[{
                    ParentDirectory[
                    ParentDirectory[]], "RingLabs", "RngLab04.nb"}], None}], 
                  "This lab focuses on the Gaussian integers modulo an ideal \
generated by some Gaussian integer."], 
                 Tooltip[
                  Hyperlink["5. Ring Homomorphisms", {
                    FrontEnd`FileName[{
                    ParentDirectory[
                    ParentDirectory[]], "RingLabs", "RngLab05.nb"}], None}], 
                  "This lab looks at the definition of a ring homomorphism, \
the First Isomorphism Theorem, and the Chinese Remainder Theorem."], 
                 Tooltip[
                  Hyperlink["6. Polynomial Rings", {
                    FrontEnd`FileName[{
                    ParentDirectory[
                    ParentDirectory[]], "RingLabs", "RngLab06.nb"}], None}], 
                  "Some basic properties of polynomial rings are introduced \
and explored."], 
                 Tooltip[
                  Hyperlink["7. Factoring and Irreducibility", {
                    FrontEnd`FileName[{
                    ParentDirectory[
                    ParentDirectory[]], "RingLabs", "RngLab07.nb"}], None}], 
                  "What does it mean to factor a polynomial? Various \
definitions and techniques are introduced, including the Rational Root \
Theorem, the Mod p Irreducibility Test, and Eisenstein\[CloseCurlyQuote]s \
Criterion. "], 
                 Tooltip[
                  Hyperlink["8. Roots of Unity", {
                    FrontEnd`FileName[{
                    ParentDirectory[
                    ParentDirectory[]], "RingLabs", "RngLab08.nb"}], None}], 
                  "This lab focuses on the polynomial \
\!\(\*SuperscriptBox[\(x\), \(n\)]\)-1 and explores graphically the zeros of \
this polynomial, in particular seeing how the zeros are related to the \
factors and how the group \!\(\*SubscriptBox[\(U\), \(n\)]\) arises out of \
this."], 
                 Tooltip[
                  Hyperlink["9. Cyclotomic Polynomials", {
                    FrontEnd`FileName[{
                    ParentDirectory[
                    ParentDirectory[]], "RingLabs", "RngLab09.nb"}], None}], 
                  "This lab focuses on cyclotomic polynomials and the many \
properties related to them."], 
                 Tooltip[
                  Hyperlink["10. Quotient Rings of Polynomials", {
                    FrontEnd`FileName[{
                    ParentDirectory[
                    ParentDirectory[]], "RingLabs", "RngLab10.nb"}], None}], 
                  "The notion of a quotient ring over a polynomial is \
introduced in this lab."], 
                 Tooltip[
                  Hyperlink["11. Quadratic Field Extensions", {
                    FrontEnd`FileName[{
                    ParentDirectory[
                    ParentDirectory[]], "RingLabs", "RngLab11.nb"}], None}], 
                  "This lab continues the last one by looking more closely at \
quotient rings modulo a quadratic polynomial where the result is a field."], 
                 Tooltip[
                  Hyperlink[
                  "12. Factoring in \[DoubleStruckCapitalZ][\!\(\*SqrtBox[\(d\
\)]\)]", {
                    FrontEnd`FileName[{
                    ParentDirectory[
                    ParentDirectory[]], "RingLabs", "RngLab12.nb"}], None}], 
                  "This lab focuses on the rings \[DoubleStruckCapitalZ][\!\(\
\*SqrtBox[\(d\)]\)] and pursues the notion of divisibility and factoring in \
such rings. Several rings are illustrated as failing being a UFD."], 
                 Tooltip[
                  Hyperlink["13. Finite Fields", {
                    FrontEnd`FileName[{
                    ParentDirectory[
                    ParentDirectory[]], "RingLabs", "RngLab13.nb"}], None}], 
                  "This lab continues the ideas formulated in lab 11 by \
looking at Galois fields and properties related to them."]}]}]}]}, False]],
        DynamicModuleValues:>{}],
       Setting[#, {0}]& ]}
    },
    GridBoxAlignment->{"Columns" -> {{Left}}},
    GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
   "Column"],
  BaseStyle->{FontSize -> 10}]], NotebookDefault,
 CellChangeTimes->{
  3.4447376573902187`*^9, 3.444737797497919*^9, 3.444751416159369*^9, 
   3.444751678165468*^9, 3.444752202846575*^9, 3.444761022679689*^9, 
   3.444763287705105*^9, 3.444763356796378*^9, 3.444763765194504*^9, 
   3.444769326332954*^9, 3.4447696531385183`*^9, 3.444769874483993*^9, 
   3.444770043806129*^9, 3.444770118819323*^9, {3.444770153736567*^9, 
   3.4447701633134127`*^9}, {3.44483330020499*^9, 3.444833333137705*^9}, 
   3.4448383064278316`*^9, 3.444838339009094*^9, 3.444853671712738*^9, 
   3.444854704003583*^9, 3.4448547797438793`*^9, 3.4448548803763103`*^9, {
   3.44485491674583*^9, 3.444854933117382*^9}, 3.444854963366993*^9, {
   3.4448550232735443`*^9, 3.444855030722621*^9}, {3.444855104656275*^9, 
   3.444855107886499*^9}, 3.444855573813615*^9, 3.4448557011190357`*^9, 
   3.444855746542297*^9, 3.4448558746143827`*^9, 3.445030709275317*^9, 
   3.445030790302846*^9}]
},
WindowSize->{Fit, Fit},
WindowMargins->{{Automatic, 262}, {Automatic, 0}},
WindowFrame->"Palette",
WindowElements->{"VerticalScrollBar", "MagnificationPopUp"},
WindowFrameElements->{"CloseBox", "MinimizeBox"},
WindowTitle->"AbstractAlgebra",
ScrollingOptions->{"PagewiseScrolling"->False,
"VerticalScrollRange"->Fit},
FrontEndVersion->"7.0 for Mac OS X x86 (32-bit) (February 18, 2009)",
StyleDefinitions->"Palette.nb"
]
(* End of Notebook Content *)


(require 'package)
(let* ((no-ssl (and (memq system-type '(windows-nt ms-dos))
                    (not (gnutls-available-p))))
       (proto (if no-ssl "http" "https")))
  ;; Comment/uncomment these two lines to enable/disable MELPA and MELPA Stable as desired
  (add-to-list 'package-archives (cons "melpa" (concat proto "://melpa.org/packages/")) t)
  ;;(add-to-list 'package-archives (cons "melpa-stable" (concat proto "://stable.melpa.org/packages/")) t)
  (when (< emacs-major-version 24)
    ;; For important compatibility libraries like cl-lib
    (add-to-list 'package-archives '("gnu" . (concat proto "://elpa.gnu.org/packages/")))))
(package-initialize)

;; ;; System
;; (setq package-list '(package-selected-packages))
;; (unless package-archive-contents
;;   (package-refresh-contents))
;; (dolist (package package-list)
;;   (unless (package-installed-p package)
;;     (package-install package)))
(setq gc-cons-threshold 200000000)
;; (add-to-list 'load-path "lisp/better-defaults.el")
;; (require 'better-defaults)
(require 'crux)
(setq enable-recursive-minibuffers t)
(define-key process-menu-mode-map (kbd "C-k") 'joaot/delete-process-at-point)
(defun joaot/delete-process-at-point ()
  (interactive)
  (let ((process (get-text-property (point) 'tabulated-list-id)))
    (cond ((and
            process
            (processp process))
           (delete-process process)
           (revert-buffer))
          (t
           (error
            "no process at point!")))))
(setq disabled-command-function nil)

;; Minibuffers
(require 'helm-config)
(global-set-key (kbd "M-x") #'helm-M-x)
(global-set-key (kbd "C-x r b") #'helm-filtered-bookmarks)
(global-set-key (kbd "C-x C-f") #'helm-find-files)
(global-set-key (kbd "C-x b") #'helm-mini)
(helm-mode 1)
(setq helm-allow-mouse t)
(setq helm-ff-skip-boring-buffers t)
(setq helm-skip-boring-buffers t)
(helm-autoresize-mode 1)
(setq helm-autoresize-max-height 40)
(setq helm-autoresize-min-height 40)
(setq helm-candidate-number-limit 100)
(add-hook 'helm-cleanup-hook #'helm-handle-winner-boring-buffers)

;; Interface
(menu-bar-mode t)
(scroll-bar-mode t)
(global-anzu-mode +1)
(defun set-code-font ()
  (set-frame-font "Source Code Pro" nil t)
  (set-face-attribute 'default nil
                      :height 130)
  )
(defun set-text-font ()
  (set-frame-font "Helvetica" nil t)
  (set-face-attribute 'default nil
                      :height 140)
  )
(if (display-graphic-p)
    (progn
      ;; (require 'sublimity)
      ;; (require 'sublimity-scroll)
      ;; (sublimity-mode t)
      ;; (setq base16-distinct-fringe-background nil)
      ;; (setq base16-theme-256-color-source 'base16_shell)
      ;; (load-theme 'base16-summerfruit-light t)
      (setq solarized-high-contrast-mode-line t)
      (setq solarized-use-more-italic nil)
      (setq solarized-distinct-fringe-background t)
      (load-theme 'solarized-light t)
      (custom-set-faces '(line-number-current-line ((t :weight bold))))
      (pixel-scroll-mode)
      (set-code-font)
      ;; (defun iterm ()
      ;;   "Go to present working dir and focus iterm"
      ;;   (interactive)
      ;;    (dired-smart-shell-command "open -a iTerm $PWD" nil nil))
      (defun iterm ()
        "Open the current directory of the buffer in iTerm."
        (interactive)
        (let* ((iterm-app-path "/Applications/iTerm.app")
               (iterm-brew-path "/opt/homebrew-cask/Caskroom/iterm2/2.1.4/iTerm.app")
               (iterm-path (if (file-directory-p iterm-app-path) iterm-app-path iterm-brew-path)))
          (shell-command (concat "open -a " iterm-path " ."))))
      (global-set-key (kbd "C-x t") 'iterm)
      (mac-pseudo-daemon-mode)))
(when (memq window-system '(mac ns x))
  (global-set-key (kbd "C-z") nil)
  (setq ns-right-alternate-modifier "none")
  (exec-path-from-shell-initialize)
  (require 'read-aloud)
  (setq read-aloud-engine "say")
  (crux-with-region-or-buffer read-aloud-this)
  (global-set-key (kbd "M-ESC") 'read-aloud-this)
  ;; (ns-toggle-toolbar)
  (setq ns-pop-up-frames 'fresh))
;; (load-theme 'sanityinc-tomorrow-night t)
(setq-default cursor-type 'bar)
(setq-default show-trailing-whitespace t)
(setq-default grep-highlight-matches t grep-scroll-output t)
(require 'wgrep)
(require 'wgrep-helm)


(with-eval-after-load "esh-opt"
  (require 'virtualenvwrapper)
  (venv-initialize-eshell)
  (autoload 'epe-theme-lambda "eshell-prompt-extras")
  (setq eshell-highlight-prompt nil eshell-prompt-function 'epe-theme-lambda))
(defun *-eshell-clear ()
  "Clear `eshell' buffer, comint-style."
  (interactive)
  (let ((input (eshell-get-old-input)))
    (eshell/clear-scrollback)
    (eshell-emit-prompt)
    (insert input)))
                                        ; (require 'sr-speedbar)
;; (global-set-key (kbd "M-0") 'sr-speedbar-toggle)
(setq-default cursor-type 'bar)
(column-number-mode t)
(line-number-mode t)
(size-indication-mode t)
(global-visual-line-mode t)
(setq line-move-visual nil)
(setq visual-line-fringe-indicators nil)
(setq-default word-wrap t)
(setq-default truncate-lines t)
(require 'ls-lisp)
(setq dired-listing-switches "-alhG")
(setq ls-lisp-use-insert-directory-program nil)
(setq ls-lisp-ignore-case t)
(setq ls-lisp-use-string-collate nil)
;; customise the appearance of the listing
(setq ls-lisp-verbosity '(links uid))
(setq ls-lisp-format-time-list '("%b %e %H:%M" "%b %e  %Y"))
(setq ls-lisp-use-localized-time-format t)
(diredfl-global-mode nil)

;; Tabbar
;; (require 'tabbar)
;; (set-face-attribute
;;  'tabbar-default nil
;;  :background "gray75"
;;  :foreground "gray75"
;;  :box '(:line-width 1 :color "gray75" :style nil))
;; (set-face-attribute
;;  'tabbar-unselected nil
;;  :background "gray75"
;;  :foreground "black"
;;  :box '(:line-width 5 :color "gray75" :style nil))
;; (set-face-attribute
;;  'tabbar-selected nil
;;  :background "gray90"
;;  :foreground "black"
;;  :box '(:line-width 5 :color "gray90" :style nil))
;; (set-face-attribute
;;  'tabbar-highlight nil
;;  :background "gray90"
;;  :foreground "black"
;;  :underline nil
;;  :box '(:line-width 5 :color "gray90" :style nil))
;; (set-face-attribute
;;  'tabbar-button nil
;;  :box '(:line-width 1 :color "gray90" :style nil))
;; (set-face-attribute
;;  'tabbar-separator nil
;;  :background "gray75"
;;  :height 1)
;; ;; Change padding of the tabs
;; ;; we also need to set separator to avoid overlapping tabs by highlighted tabs
;; (tabbar-mode 0)

;; Behavior and navigation
(require 'google-translate)
(require 'google-translate-default-ui)
(global-set-key "\C-ct" 'google-translate-at-point)
(global-set-key "\C-cT" 'google-translate-query-translate)
(ace-link-setup-default)
(global-set-key (kbd "C-x o") 'ace-window)
(global-set-key (kbd "M-o") 'ace-link-addr)
(global-set-key (kbd "C-x C-M-e") 'crux-eval-and-replace)
(global-set-key (kbd "C-x 4 t") 'crux-transpose-windows)
(global-set-key (kbd "C-c d") 'crux-duplicate-current-line-or-region)
(global-set-key (kbd "C-c M-d") 'crux-duplicate-and-comment-current-line-or-region)
(setq comment-empty-lines t)
(global-set-key (kbd "C-x M-t") 'crux-visit-term-buffer)
(global-set-key (kbd "C-x M-k") 'crux-kill-other-buffers)
;; (crux-with-region-or-buffer 'indent-region)
;; (crux-with-region-or-line 'kill-region)
(yafolding-mode)
(defvar yafolding-mode-map
  (let ((map (make-sparse-keymap)))
    (define-key map (kbd "<C-S-return>") #'yafolding-hide-parent-element)
    (define-key map (kbd "<C-M-return>") #'yafolding-toggle-all)
    (define-key map (kbd "<C-return>") #'yafolding-toggle-element)
    map))
(yafolding-mode)
(advice-add 'whitespace-cleanup :around #'yafolding-show-all)
(advice-add 'whitespace-cleanup-region :around #'yafolding-show-all)
(advice-add 'delete-trailing-whitespace :around #'yafolding-show-all)
(defun kill-whitespace ()
  "Kill the whitespace between two non-whitespace characters"
  (interactive "*")
  (save-excursion
    (save-restriction
      (save-match-data
        (progn
          (re-search-backward "[^ \t\r\n]" nil t)
          (re-search-forward "[ \t\r\n]+" nil t)
          (replace-match "" nil nil))))))
(global-set-key (kbd "M-\\") 'kill-whitespace)
(global-undo-tree-mode)
(setq undo-tree-visualizer-diff t)
(setq undo-tree-visualizer-timestamps t)
(xterm-mouse-mode t)
(setq mouse-wheel-scroll-amount '(1 ((shift) . t)))
(setq mouse-wheel-follow-mouse 't)
(setq mouse-wheel-scroll-amount '(1 ((shift) . 1))) ;; one line at a time
(setq mouse-wheel-progressive-speed nil) ;; don't accelerate scrolling
(setq mouse-wheel-follow-mouse 't)       ;; scroll window under mouse
(setq scroll-step 0) ;; keyboard scroll one line at a time
(setq scroll-error-top-bottom t)
(global-set-key [mouse-4] 'scroll-down-line)
(global-set-key [mouse-5] 'scroll-up-line)
(setq scroll-preserve-screen-position 'always)
(setq scroll-conservatively 1)
;; (desktop-save-mode 1)
(savehist-mode 1)
(global-hl-todo-mode 1)
(global-git-gutter-mode 1)
(set-language-environment "UTF-8")
(set-terminal-coding-system 'utf-8)
(set-keyboard-coding-system 'utf-8)
(prefer-coding-system 'utf-8)
(fset 'yes-or-no-p 'y-or-n-p)
(setq require-final-newline t)
(setq next-line-add-newlines nil)
(setq ring-bell-function 'ignore)
;; (electric-pair-mode 1)
(require 'smartparens-config)
(smartparens-global-mode t)
(show-paren-mode 1)

;; (global-num3-mode)
(setq inhibit-startup-message t)
;; (scroll-lock-mode 1)
(transient-mark-mode 1)
(setq shift-select-mode t)
(defun eshell-here ()
  "Opens up a new shell in the directory associated with the
current buffer's file. The eshell is renamed to match that
directory to make multiple eshell windows easier."
  (interactive)
  (let* ((parent (if (buffer-file-name)
                     (file-name-directory (buffer-file-name)) default-directory))
         (height (/ (window-total-height) 3))
         (name   (car (last (split-string parent "/" t)))))
    (split-window-vertically (- height))
    (other-window t)
    (eshell "new")
    (rename-buffer (concat "*eshell: " name "*"))
    (insert (concat "ls"))
    (eshell-send-input)))
(global-set-key (kbd "C-!") 'eshell-here)
(delete-selection-mode t)
(require 'expand-region)
(global-set-key (kbd "C-=") 'er/expand-region)
(defun forward-or-backward-sexp
    (&optional
     arg)
  "Go to the matching parenthesis character if one is adjacent to point."
  (interactive "^p")
  (cond ((looking-at "\\s(")
         (forward-sexp arg))
        ((looking-back "\\s)" 1)
         (backward-sexp arg))
        ;; Now, try to succeed from inside of a bracket
        ((looking-at "\\s)")
         (forward-char)
         (backward-sexp arg))
        ((looking-back "\\s(" 1)
         (backward-char)
         (forward-sexp arg))))
(global-set-key (kbd "C-%") 'forward-or-backward-sexp)
(eval-after-load "dired" '(progn (define-key dired-mode-map "F" 'my-dired-find-file)
                                 (defun my-dired-find-file
                                     (&optional
                                      arg)
                                   "Open each of the marked files, or the file under the point, or when prefix arg, the next N files "
                                   (interactive "P")
                                   (let* ((fn-list (dired-get-marked-files nil arg)))
                                     (mapc 'find-file fn-list)))))

;; Keybinds
(defun backward-kill-line (arg)
  "Kill ARG lines backward."
  (interactive "p")
  (kill-line (- 1 arg)))
(global-set-key '[(kp-delete)] 'delete-char)
(global-set-key (kbd "s-<backspace>") 'backward-kill-line)
(global-set-key (kbd "s-<delete>") 'kill-line)
(global-set-key (kbd "s-<left>") 'beginning-of-line)
(global-set-key (kbd "s-<right>") 'end-of-line)
(global-set-key (kbd "C-a") 'beginning-of-line)
(global-set-key (kbd "C-e") 'end-of-line)
(global-set-key (kbd "M-<delete>") 'kill-word)
(global-set-key (kbd "C-_") 'undo-only)`a
(global-set-key (kbd "s-z") 'undo-only)
(global-set-key (kbd "M-;") 'comment-or-uncomment-region)
(global-set-key (kbd "s-/") 'comment-or-uncomment-region)
(require 'crux)
(crux-with-region-or-line comment-or-uncomment-region)
(crux-with-region-or-line kill-region)
(crux-with-region-or-buffer untabify)
(setq undo-limit 160000)
(setq undo-strong-limit 320000)(require 'iy-go-to-char)
(setq path-to-ctags "/usr/local/bin/ctags")
(defun create-tags (dir-name)
  "Create tags file."
  (interactive "DDirectory: ")
  (shell-command
   (format "%s -f TAGS -e -R %s" path-to-ctags (directory-file-name dir-name)))
  )
(global-set-key (kbd "M-g d") 'helm-imenu-anywhere)
(global-set-key (kbd "M-g f") 'iy-go-to-char)
(global-set-key (kbd "M-g F") 'iy-go-to-char-backward)
(global-set-key (kbd "M-g ;") 'iy-go-to-or-up-to-continue)
(global-set-key (kbd "M-g ,") 'iy-go-to-or-up-to-continue-backward)
(global-set-key (kbd "M-g t") 'iy-go-up-to-char)
(global-set-key (kbd "M-g T") 'iy-go-up-to-char-backward)
(global-set-key (kbd "M-g s") 'helm-swoop)
(global-set-key (kbd "M-g M-s") 'helm-swoop)
(global-set-key (kbd "C-x C-b") 'ibuffer)

(setq make-backup-files nil)          ; stop creating backup~ files
(setq auto-save-default nil)          ; stop creating #autosave# files


;; Completion
(icomplete-mode nil)
(add-hook 'after-init-hook 'global-company-mode)
(require 'company-quickhelp)
(setq company-quickhelp-delay 3)
(setq company-tooltip-align-annotations t)
(setq company-tooltip-limit 25)
(setq company-tooltip-flip-when-above t)
(setq company-minimum-prefix-length 2)
(setq company-idle-delay 0.3)
(setq company-backends '(company-ycmd company-yasnippet company-dabbrev))
;
(require 'yasnippet)
(require 'helm-c-yasnippet)
(setq helm-yas-space-match-any-greedy t)
(global-set-key (kbd "C-M-<tab>") 'helm-yas-complete)
(yas-global-mode 1)
;; (defun custom-company-frontend-setup ()
;;   (require 'helm-company)
;;   (setq company-frontends nil)
;;   (setq company-auto-complete nil)
;;   (setq tab-always-indent 'complete)
;;   ;; (global-set-key (kbd "<tab>") 'helm-company)
;;   (global-set-key (kbd "M-<tab>") 'helm-company)
;;   ;;   (message nil)
;;   )
;; (defun custom-company-frontend-setup ()
;;   (setq company-frontends '(company-pseudo-tooltip-unless-just-one-frontend company-preview-if-just-one-frontend))
;;   (setq tab-always-indent 'complete)
;;   (define-key company-active-map [tab] 'company-complete-common-or-cycle)
;;   (define-key company-active-map (kbd "TAB") 'company-complete-common-or-cycle)
;;   )
;; (custom-company-frontend-setup())
;; Per-mode set up
(set-variable 'ycmd-server-command '("/usr/local/bin/python2" "/Users/aosh/.vim/plugged/YouCompleteMe/third_party/ycmd/ycmd"))
(require 'ycmd)
(add-hook 'after-init-hook #'global-ycmd-mode)
(require 'company-ycmd)
(company-ycmd-setup)
;; Code
(add-hook 'prog-mode-hook 'display-line-numbers-mode)
(add-hook 'prog-mode-hook (lambda () (ycmd-mode 1)))
(require 'rainbow-delimiters)
(add-hook 'prog-mode-hook 'rainbow-delimiters-mode)

;; Conf
(add-hook 'conf-mode-hook 'display-line-numbers-mode)

;; C*
(add-hook 'c++-mode-hook 'irony-mode)
(add-hook 'c-mode-hook 'irony-mode)
(add-hook 'objc-mode-hook 'irony-mode)
(add-hook 'irony-mode-hook 'irony-cdb-autosetup-compile-options)
;; (eval-after-load 'company
;;   '(add-to-list 'company-backends 'company-irony))

;; Python*
(add-hook 'python-mode-hook (lambda () (elpy-enable)))
;; (eval-after-load "company"
;;   '(add-to-list 'company-backends 'company-anaconda))

;; Web mode
(require 'web-mode)
(add-to-list 'auto-mode-alist '("\\.phtml\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.tpl\\.php\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.[agj]sp\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.as[cp]x\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.erb\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.mustache\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.djhtml\\'" . web-mode))
(setq web-mode-enable-current-element-highlight t)
(setq-default indent-tabs-mode nil)
(add-to-list 'web-mode-comment-formats '("javascript" . "//"))
(add-to-list 'web-mode-comment-formats '("jsx" . "//"))
(defun my-web-mode-hook ()
  (setq web-mode-enable-auto-pairing nil))
(add-hook 'web-mode-hook  'my-web-mode-hook)
(defun sp-web-mode-is-code-context (id action context)
  (and (eq action 'insert)
       (not (or (get-text-property (point) 'part-side)
                (get-text-property (point) 'block-side)))))
(sp-local-pair 'web-mode "<" nil :when '(sp-web-mode-is-code-context))
(setq web-mode-enable-auto-closing t)

;; JS*
;; (require 'js2-mode)
;; (add-hook 'js2-mode-hook 'custom-company-frontend-setup)
;; (add-hook 'rjsx-mode-hook 'custom-company-frontend-setup) ;; what the shit
;; (add-hook 'web-mode-hook 'custom-company-frontend-setup)
(add-to-list 'auto-mode-alist '("\\.js\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.jsx\\'" . web-mode))
(setq web-mode-auto-close-style 2)
(setq web-mode-enable-current-element-highlight t)

;; Mathematica
;; (autoload 'wolfram-mode "wolfram-mode" nil t)
;; (autoload 'run-wolfram "wolfram-mode" nil t)
;; (setq wolfram-program "/Applications/Mathematica.app/Contents/MacOS/MathKernel")
;; (add-to-list 'auto-mode-alist '("\.[nb,m]$" . wolfram-mode))
;; (setq wolfram-path "/Applications")

;; TeX*
(add-hook 'tex-mode 'company-auctex-init)

;; Text
;; (add-hook 'markdown-mode-hook 'set-text-font)

;; Flycheck
(add-hook 'after-init-hook #'global-flycheck-mode)
;; (setq flycheck-check-syntax-automatically '(mode-enabled save))
(setq flycheck-indication-mode (quote left-fringe))
(setq flycheck-python-flake8-executable "flake8")
(setq flycheck-display-errors-delay 0.3)
(with-eval-after-load 'flycheck (flycheck-pos-tip-mode))
(with-eval-after-load 'flycheck '(add-hook 'flycheck-mode-hook #'flycheck-css-colorguard-setup))

;; Files

(require 'dtrt-indent)
(dtrt-indent-mode)
(require 'uniquify)
(setq uniquify-buffer-name-style 'forward)
(goto-address-mode)
(setq-default indent-tabs-mode nil
              tab-width 4)
;; (global-set-key (kbd "M-s $ DEL") 'omni-scratch)
;; (global-set-key (kbd "M-s $ -") 'omni-scratch-major)
;; (global-set-key (kbd "M-s $ _") 'omni-scratch-buffer)
;; (global-set-key (kbd "M-s $ $") 'omni-scratch-goto-latest)
;; (global-set-key (kbd "M-s $ b") 'omni-scratch-buffers)
(setq auto-indent-on-visit-file 0)
(global-auto-revert-mode t)
(require 'auto-indent-mode)
(setq vc-follow-symlinks t)
(global-set-key (kbd "C-x g") 'magit-status)
(require 'magit)
(magithub-feature-autoinject t)
(setq vc-handled-backends (delq 'Git vc-handled-backends))
(require 'generic-x)
;; (global-whitespace-mode t)
(add-to-list 'auto-mode-alist '("\\.*rc$" . conf-unix-mode))
(add-to-list 'auto-mode-alist '("/tmp/zsh*" . sh-mode))
;; (with-eval-after-load "ispell"
;;   (setq ispell-program-name "hunspell")
;;   (setq ispell-dictionary "en_US,de_DE,ru_RU")
;;   (ispell-set-spellchecker-params)
;;   (ispell-hunspell-add-multi-dic "en_US,de_DE,ru_RU"))
(autoload 'flyspell-mode "flyspell" "On-the-fly spelling checker." t)
(require 'flyspell-correct-helm)
(define-key flyspell-mode-map (kbd "C-;") 'flyspell-correct-word-generic)
(add-hook 'text-mode-hook #'turn-on-flyspell)
(add-hook 'prog-mode-hook (lambda () (flyspell-prog-mode)))
(add-hook 'conf-mode-hook (lambda () (flyspell-prog-mode)))
;; (setq tramp-default-method "ssh")
;; (setq tramp-shell-prompt-pattern "^[^$>\n]*[#$%>] *\\(\[[0-9;]*[a-zA-Z] *\\)*")
(winner-mode)
(defvar ediff-last-windows nil
  "Last ediff window configuration.")
(defun ediff-restore-windows ()
  "Restore window configuration to `ediff-last-windows'."
  (set-window-configuration ediff-last-windows)
  (remove-hook 'ediff-after-quit-hook-internal
               'ediff-restore-windows))
(defadvice ediff-buffers (around ediff-restore-windows activate)
  (setq ediff-last-windows (current-window-configuration))
  (add-hook 'ediff-after-quit-hook-internal 'ediff-restore-windows)
  ad-do-it)

;; Diminish
(require 'diminish)
(diminish 'dtrt-indent-mode)
(diminish 'winner-mode)
(diminish 'goto-address-mode)
(diminish 'yas-global-mode)
(diminish 'yas-minor-mode)
(diminish 'global-undo-tree-mode)
(diminish 'undo-tree-mode)
(diminish 'global-ycmd-mode)
(diminish 'ycmd-mode)
(diminish 'global-flycheck-mode)
(diminish 'flyspell-mode)
(diminish 'smartparens-mode)
(diminish 'company-mode)
(diminish 'global-company-mode)
(diminish 'global-anzu-mode)
(diminish 'anzu-mode)
(diminish 'helm-mode)
(diminish 'eldoc-mode)
(diminish 'global-git-gutter-mode)
(diminish 'git-gutter-mode)
(diminish 'global-visual-line-mode)
(diminish 'visual-line-mode)
(diminish 'yafolding-mode)

;; UNIX interaction
(require 'man)
(set-face-attribute 'Man-overstrike nil :inherit font-lock-type-face :bold t)
(set-face-attribute 'Man-underline nil :inherit font-lock-keyword-face :underline t)
(setq explicit-shell-file-name "/usr/local/bin/bash")
(add-hook 'term-mode-hook (lambda () (setq show-trailing-whitespace nil)))
(add-hook 'eshell-mode-hook (lambda () (setq show-trailing-whitespace nil)))

;; Evil
(setq evil-want-integration nil)
(require 'evil)
(evil-commentary-mode)
(when (require 'evil-collection nil t)
  (evil-collection-init))
(setq evil-collection-company-use-tng nil)
(setq evil-collection-setup-minibuffer t)
(evil-mode 1)
;; (evil-rsi-mode)
(require 'evil-surround)
(global-evil-surround-mode 1)
(require 'evil-anzu)
(evil-lion-mode)
(setq evil-magit-state 'normal)
(require 'evil-magit)
;; (setq evil-normal-state-modes
;;       (append evil-emacs-state-modes
;;               ;; evil-insert-state-modes
;;               evil-normal-state-modes
;;               evil-motion-state-modes))
(defun my-center-line (&rest _)
  (evil-scroll-line-to-center nil))
(advice-add 'evil-search-next :after #'my-center-line)
(setq evil-search-wrap t
      evil-regexp-search t)
(setq evil-esc-delay 0)
(diminish 'evil-commentary-mode)
;; ;; (defhydra helm-like-unite ()
;; ;;   "vim movement"
;; ;;   ("?" helm-help "help")
;; ;;   ("<escape>" keyboard-escape-quit "exit")
;; ;;   ("<SPC>" helm-toggle-visible-mark "mark")
;; ;;   ("a" helm-toggle-all-marks "(un)mark all")
;; ;;   ;; not sure if there's a better way to do this
;; ;;   ("/" (lambda ()
;; ;;           (interactive)
;; ;;           (execute-kbd-macro [?\C-s]))
;; ;;        "search")
;; ;;   ("v" helm-execute-persistent-action)
;; ;;   ("g" helm-beginning-of-buffer "top")
;; ;;   ("G" helm-end-of-buffer "bottom")
;; ;;   ("j" helm-next-line "down")
;; ;;   ("k" helm-previous-line "up")
;; ;;   ("h" helm-previous-source)
;; ;;   ("l" helm-next-source)
;; ;;   ("i" nil "cancel"))
;; ;; (define-key helm-map (kbd "<escape>") 'helm-like-unite/body)
;; (setq-default display-line-numbers 'visual
;;               display-line-numbers-widen t
;;               ;; this is the default
;;               display-line-numbers-current-absolute t)
;; (defun noct:relative ()
;;   (setq-local display-line-numbers 'visual))
;; (defun noct:absolute ()
;;   (setq-local display-line-numbers t))
;; (add-hook 'evil-insert-state-entry-hook #'noct:absolute)
;; (add-hook 'evil-insert-state-exit-hook #'noct:relative)
(set-cursor-color "#000000")

(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(font-lock-comment-face ((t (:foreground "#93a1a1" :slant italic))))
 '(line-number-current-line ((t :weight bold))))
(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(custom-safe-themes
   (quote
    ("a8245b7cc985a0610d71f9852e9f2767ad1b852c2bdea6f4aadc12cce9c4d6d0" "1b8d67b43ff1723960eb5e0cba512a2c7a2ad544ddb2533a90101fd1852b426e" "82d2cac368ccdec2fcc7573f24c3f79654b78bf133096f9b40c20d97ec1d8016" "99c86852decaeb0c6f51ce8bd46e4906a4f28ab4c5b201bdc3fdf85b24f88518" "a27c00821ccfd5a78b01e4f35dc056706dd9ede09a8b90c6955ae6a390eb1c1e" "60e09d2e58343186a59d9ed52a9b13d822a174b33f20bdc1d4abb86e6b17f45b" "cea3ec09c821b7eaf235882e6555c3ffa2fd23de92459751e18f26ad035d2142" "bb08c73af94ee74453c90422485b29e5643b73b05e8de029a6909af6a3fb3f58" "b3bcf1b12ef2a7606c7697d71b934ca0bdd495d52f901e73ce008c4c9825a3aa" "4cf3221feff536e2b3385209e9b9dc4c2e0818a69a1cdb4b522756bcdf4e00a4" "d677ef584c6dfc0697901a44b885cc18e206f05114c8a3b7fde674fce6180879" "8db4b03b9ae654d4a57804286eb3e332725c84d7cdab38463cb6b97d5762ad26" default)))
 '(mac-pseudo-daemon-mode t)
 '(magit-log-section-arguments (quote ("--graph" "--color" "--decorate" "-n256")))
 '(package-selected-packages
   (quote
    (boxquote ibuffer-projectile wgrep-helm wgrep dtrt-indent evil-magit hydra ac-helm angular-snippets aws-snippets clojure-snippets common-lisp-snippets django-snippets go-snippets haskell-snippets helm-c-yasnippet java-snippets php-auto-yasnippets r-autoyas react-snippets yasnippet-snippets yatemplate espresso-theme evil-rsi linum-relative rjsx-mode helm-swoop omni-scratch mac-pseudo-daemon apples-mode aurora-config-mode bbcode-mode bison-mode bitbake blockdiag-mode csgo-conf-mode dkdo easy-jekyll erc-view-log erlang gf gitattributes-mode jgraph-mode lcb-mode livescript-mode logview motion-mode ng2-mode nix-mode paperless picolisp-mode po-mode pollen-mode preseed-generic-mode qt-pro-mode reason-mode redprl remark-mode scad-mode scss-mode sml-mode stylus-mode textile-mode textmate-to-yas thrift todotxt tornado-template-mode typescript-mode vue-html-mode xahk-mode yarn-mode adoc-mode lua-mode swift-mode wsd-mode elf-mode elvish-mode extempore-mode fic-mode forth-mode fountain-mode gl-conf-mode gnu-apl-mode graphql-mode ham-mode haskell-mode helm-tramp hoa-mode homebrew-mode html2org intel-hex-mode jira-markup-mode julia-mode kaesar-mode kotlin-mode ksp-cfg-mode launch-mode less-css-mode lfe-mode load-dir lockfile-mode lognav-mode magic-filetype matlab-mode metascript-mode mgmtconfig-mode mips-mode mo-git-blame actionscript-mode ada-mode apache-mode arduino-mode bash-completion bln-mode bmx-mode cask-mode chef-mode clojure-mode cmake-mode cobol-mode coffee-mode cpanfile-mode csharp-mode django-mode djvu docker-compose-mode dokuwiki-mode gist magithub google-translate ace-link ace-window dired-imenu flyspell-correct-helm helm-bind-key cyberpunk-theme dark-souls evil-anzu evil-ediff evil-lion evil-numbers flycheck-css-colorguard flycheck-objc-clang crux ranger elpy symon drag-stuff dimmer iy-go-to-char imenu-anywhere tabbar elmacro company-edbi edbi-django edbi-sqlite magit-todos edbi elisp-format helm-descbinds helm-dash helm-google wolfram wolfram-mode ido-vertical-mode helm-fuzzier diredfl expand-region yaml-mode web-mode virtualenvwrapper vimrc-mode tf2-conf-mode systemd ssh-config-mode ssh sr-speedbar solarized-theme smooth-scrolling smooth-scroll smartparens smart-tab smart-mode-line-powerline-theme sed-mode scala-mode robots-txt-mode rhtml-mode reveal-in-osx-finder realgud-pry realgud-old-debuggers rainbow-delimiters qml-mode python-mode powershell pip-requirements perl6-mode pcomplete-extension parent-mode ninja-mode nginx-mode nasm-mode multi-term markdown-mode magit jinja2-mode jar-manifest-mode ini-mode iasm-mode hl-todo hgignore-mode helm-flycheck helm-flx helm-company helm-ag go-mode gnuplot-mode gitignore-templates gitignore-mode gitconfig-mode git-gutter format-all flycheck-pos-tip flx-isearch fish-mode fireplace fill-column-indicator exec-path-from-shell evil-tutor evil-surround evil-commentary ess eshell-prompt-extras esh-autosuggest emmet-mode emamux elscreen ein dotenv-mode dockerfile-mode docker diminish dash-at-point cython-mode cuda-mode csv-mode csv crm-custom company-ycmd company-web company-shell company-quickhelp company-php company-math company-irony-c-headers company-irony company-c-headers company-bibtex company-auctex company-anaconda color-theme-sanityinc-tomorrow color-theme-sanityinc-solarized cheatsheet better-defaults basic-mode base16-theme auto-indent-mode anzu angular-mode ace-popup-menu 4clojure yafolding read-aloud)))
 '(tabbar-mwheel-mode nil nil (tabbar)))
